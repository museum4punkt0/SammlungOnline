# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"mutation root"
type mutation_root {
    "delete data from the table: \"smb.attachments\""
    delete_smb_attachments(
        "filter the rows which have to be deleted"
        where: smb_attachments_bool_exp!
    ): smb_attachments_mutation_response
    "delete single row from the table: \"smb.attachments\""
    delete_smb_attachments_by_pk(id: bigint!): smb_attachments
    "delete data from the table: \"smb.attribute_translations\""
    delete_smb_attribute_translations(
        "filter the rows which have to be deleted"
        where: smb_attribute_translations_bool_exp!
    ): smb_attribute_translations_mutation_response
    "delete single row from the table: \"smb.attribute_translations\""
    delete_smb_attribute_translations_by_pk(id: bigint!): smb_attribute_translations
    "delete data from the table: \"smb.attributes\""
    delete_smb_attributes(
        "filter the rows which have to be deleted"
        where: smb_attributes_bool_exp!
    ): smb_attributes_mutation_response
    "delete single row from the table: \"smb.attributes\""
    delete_smb_attributes_by_pk(key: String!): smb_attributes
    "delete data from the table: \"smb.header\""
    delete_smb_header(
        "filter the rows which have to be deleted"
        where: smb_header_bool_exp!
    ): smb_header_mutation_response
    "delete single row from the table: \"smb.header\""
    delete_smb_header_by_pk(id: bigint!): smb_header
    "delete data from the table: \"smb.header_translations\""
    delete_smb_header_translations(
        "filter the rows which have to be deleted"
        where: smb_header_translations_bool_exp!
    ): smb_header_translations_mutation_response
    "delete single row from the table: \"smb.header_translations\""
    delete_smb_header_translations_by_pk(id: bigint!): smb_header_translations
    "delete data from the table: \"smb.highlights\""
    delete_smb_highlights(
        "filter the rows which have to be deleted"
        where: smb_highlights_bool_exp!
    ): smb_highlights_mutation_response
    "delete single row from the table: \"smb.highlights\""
    delete_smb_highlights_by_pk(id: bigint!): smb_highlights
    "delete data from the table: \"smb.ignoreable_keys\""
    delete_smb_ignoreable_keys(
        "filter the rows which have to be deleted"
        where: smb_ignoreable_keys_bool_exp!
    ): smb_ignoreable_keys_mutation_response
    "delete single row from the table: \"smb.ignoreable_keys\""
    delete_smb_ignoreable_keys_by_pk(id: bigint!): smb_ignoreable_keys
    "delete data from the table: \"smb.intro_slide_translations\""
    delete_smb_intro_slide_translations(
        "filter the rows which have to be deleted"
        where: smb_intro_slide_translations_bool_exp!
    ): smb_intro_slide_translations_mutation_response
    "delete single row from the table: \"smb.intro_slide_translations\""
    delete_smb_intro_slide_translations_by_pk(id: bigint!): smb_intro_slide_translations
    "delete data from the table: \"smb.intro_slides\""
    delete_smb_intro_slides(
        "filter the rows which have to be deleted"
        where: smb_intro_slides_bool_exp!
    ): smb_intro_slides_mutation_response
    "delete single row from the table: \"smb.intro_slides\""
    delete_smb_intro_slides_by_pk(id: bigint!): smb_intro_slides
    "delete data from the table: \"smb.intro_text_module_translations\""
    delete_smb_intro_text_module_translations(
        "filter the rows which have to be deleted"
        where: smb_intro_text_module_translations_bool_exp!
    ): smb_intro_text_module_translations_mutation_response
    "delete single row from the table: \"smb.intro_text_module_translations\""
    delete_smb_intro_text_module_translations_by_pk(id: bigint!): smb_intro_text_module_translations
    "delete data from the table: \"smb.intro_text_module_type\""
    delete_smb_intro_text_module_type(
        "filter the rows which have to be deleted"
        where: smb_intro_text_module_type_bool_exp!
    ): smb_intro_text_module_type_mutation_response
    "delete single row from the table: \"smb.intro_text_module_type\""
    delete_smb_intro_text_module_type_by_pk(value: String!): smb_intro_text_module_type
    "delete data from the table: \"smb.intro_text_modules\""
    delete_smb_intro_text_modules(
        "filter the rows which have to be deleted"
        where: smb_intro_text_modules_bool_exp!
    ): smb_intro_text_modules_mutation_response
    "delete single row from the table: \"smb.intro_text_modules\""
    delete_smb_intro_text_modules_by_pk(id: bigint!): smb_intro_text_modules
    "delete data from the table: \"smb.language\""
    delete_smb_language(
        "filter the rows which have to be deleted"
        where: smb_language_bool_exp!
    ): smb_language_mutation_response
    "delete single row from the table: \"smb.language\""
    delete_smb_language_by_pk(id: bigint!): smb_language
    "delete data from the table: \"smb.licenses\""
    delete_smb_licenses(
        "filter the rows which have to be deleted"
        where: smb_licenses_bool_exp!
    ): smb_licenses_mutation_response
    "delete single row from the table: \"smb.licenses\""
    delete_smb_licenses_by_pk(id: bigint!): smb_licenses
    "delete data from the table: \"smb.licenses_translation\""
    delete_smb_licenses_translation(
        "filter the rows which have to be deleted"
        where: smb_licenses_translation_bool_exp!
    ): smb_licenses_translation_mutation_response
    "delete single row from the table: \"smb.licenses_translation\""
    delete_smb_licenses_translation_by_pk(id: bigint!): smb_licenses_translation
    "delete data from the table: \"smb.objects\""
    delete_smb_objects(
        "filter the rows which have to be deleted"
        where: smb_objects_bool_exp!
    ): smb_objects_mutation_response
    "delete single row from the table: \"smb.objects\""
    delete_smb_objects_by_pk(id: bigint!): smb_objects
    "delete data from the table: \"smb.org_unit\""
    delete_smb_org_unit(
        "filter the rows which have to be deleted"
        where: smb_org_unit_bool_exp!
    ): smb_org_unit_mutation_response
    "delete single row from the table: \"smb.org_unit\""
    delete_smb_org_unit_by_pk(id: bigint!): smb_org_unit
    "delete data from the table: \"smb.sync_cycle_type\""
    delete_smb_sync_cycle_type(
        "filter the rows which have to be deleted"
        where: smb_sync_cycle_type_bool_exp!
    ): smb_sync_cycle_type_mutation_response
    "delete single row from the table: \"smb.sync_cycle_type\""
    delete_smb_sync_cycle_type_by_pk(value: String!): smb_sync_cycle_type
    "delete data from the table: \"smb.sync_cycles\""
    delete_smb_sync_cycles(
        "filter the rows which have to be deleted"
        where: smb_sync_cycles_bool_exp!
    ): smb_sync_cycles_mutation_response
    "delete single row from the table: \"smb.sync_cycles\""
    delete_smb_sync_cycles_by_pk(id: bigint!): smb_sync_cycles
    "delete data from the table: \"smb.topics\""
    delete_smb_topics(
        "filter the rows which have to be deleted"
        where: smb_topics_bool_exp!
    ): smb_topics_mutation_response
    "delete single row from the table: \"smb.topics\""
    delete_smb_topics_by_pk(id: bigint!): smb_topics
    "delete data from the table: \"smb.topics_objects\""
    delete_smb_topics_objects(
        "filter the rows which have to be deleted"
        where: smb_topics_objects_bool_exp!
    ): smb_topics_objects_mutation_response
    "delete single row from the table: \"smb.topics_objects\""
    delete_smb_topics_objects_by_pk(id: bigint!): smb_topics_objects
    "delete data from the table: \"smb.topics_translations\""
    delete_smb_topics_translations(
        "filter the rows which have to be deleted"
        where: smb_topics_translations_bool_exp!
    ): smb_topics_translations_mutation_response
    "delete single row from the table: \"smb.topics_translations\""
    delete_smb_topics_translations_by_pk(id: bigint!): smb_topics_translations
    "delete data from the table: \"smb.tours\""
    delete_smb_tours(
        "filter the rows which have to be deleted"
        where: smb_tours_bool_exp!
    ): smb_tours_mutation_response
    "delete single row from the table: \"smb.tours\""
    delete_smb_tours_by_pk(id: bigint!): smb_tours
    "delete data from the table: \"smb.tours_objects\""
    delete_smb_tours_objects(
        "filter the rows which have to be deleted"
        where: smb_tours_objects_bool_exp!
    ): smb_tours_objects_mutation_response
    "delete single row from the table: \"smb.tours_objects\""
    delete_smb_tours_objects_by_pk(id: bigint!): smb_tours_objects
    "delete data from the table: \"smb.tours_objects_translation\""
    delete_smb_tours_objects_translation(
        "filter the rows which have to be deleted"
        where: smb_tours_objects_translation_bool_exp!
    ): smb_tours_objects_translation_mutation_response
    "delete single row from the table: \"smb.tours_objects_translation\""
    delete_smb_tours_objects_translation_by_pk(id: bigint!): smb_tours_objects_translation
    "delete data from the table: \"smb.tours_translation\""
    delete_smb_tours_translation(
        "filter the rows which have to be deleted"
        where: smb_tours_translation_bool_exp!
    ): smb_tours_translation_mutation_response
    "delete single row from the table: \"smb.tours_translation\""
    delete_smb_tours_translation_by_pk(id: bigint!): smb_tours_translation
    "delete data from the table: \"smb.user\""
    delete_smb_user(
        "filter the rows which have to be deleted"
        where: smb_user_bool_exp!
    ): smb_user_mutation_response
    "delete single row from the table: \"smb.user\""
    delete_smb_user_by_pk(id: uuid!): smb_user
    "delete data from the table: \"smb.user_role\""
    delete_smb_user_role(
        "filter the rows which have to be deleted"
        where: smb_user_role_bool_exp!
    ): smb_user_role_mutation_response
    "delete single row from the table: \"smb.user_role\""
    delete_smb_user_role_by_pk(id: bigint!): smb_user_role
    "insert data into the table: \"smb.attachments\""
    insert_smb_attachments(
        "the rows to be inserted"
        objects: [smb_attachments_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_attachments_on_conflict
    ): smb_attachments_mutation_response
    "insert a single row into the table: \"smb.attachments\""
    insert_smb_attachments_one(
        "the row to be inserted"
        object: smb_attachments_insert_input!,
        "on conflict condition"
        on_conflict: smb_attachments_on_conflict
    ): smb_attachments
    "insert data into the table: \"smb.attribute_translations\""
    insert_smb_attribute_translations(
        "the rows to be inserted"
        objects: [smb_attribute_translations_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_attribute_translations_on_conflict
    ): smb_attribute_translations_mutation_response
    "insert a single row into the table: \"smb.attribute_translations\""
    insert_smb_attribute_translations_one(
        "the row to be inserted"
        object: smb_attribute_translations_insert_input!,
        "on conflict condition"
        on_conflict: smb_attribute_translations_on_conflict
    ): smb_attribute_translations
    "insert data into the table: \"smb.attributes\""
    insert_smb_attributes(
        "the rows to be inserted"
        objects: [smb_attributes_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_attributes_on_conflict
    ): smb_attributes_mutation_response
    "insert a single row into the table: \"smb.attributes\""
    insert_smb_attributes_one(
        "the row to be inserted"
        object: smb_attributes_insert_input!,
        "on conflict condition"
        on_conflict: smb_attributes_on_conflict
    ): smb_attributes
    "insert data into the table: \"smb.header\""
    insert_smb_header(
        "the rows to be inserted"
        objects: [smb_header_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_header_on_conflict
    ): smb_header_mutation_response
    "insert a single row into the table: \"smb.header\""
    insert_smb_header_one(
        "the row to be inserted"
        object: smb_header_insert_input!,
        "on conflict condition"
        on_conflict: smb_header_on_conflict
    ): smb_header
    "insert data into the table: \"smb.header_translations\""
    insert_smb_header_translations(
        "the rows to be inserted"
        objects: [smb_header_translations_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_header_translations_on_conflict
    ): smb_header_translations_mutation_response
    "insert a single row into the table: \"smb.header_translations\""
    insert_smb_header_translations_one(
        "the row to be inserted"
        object: smb_header_translations_insert_input!,
        "on conflict condition"
        on_conflict: smb_header_translations_on_conflict
    ): smb_header_translations
    "insert data into the table: \"smb.highlights\""
    insert_smb_highlights(
        "the rows to be inserted"
        objects: [smb_highlights_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_highlights_on_conflict
    ): smb_highlights_mutation_response
    "insert a single row into the table: \"smb.highlights\""
    insert_smb_highlights_one(
        "the row to be inserted"
        object: smb_highlights_insert_input!,
        "on conflict condition"
        on_conflict: smb_highlights_on_conflict
    ): smb_highlights
    "insert data into the table: \"smb.ignoreable_keys\""
    insert_smb_ignoreable_keys(
        "the rows to be inserted"
        objects: [smb_ignoreable_keys_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_ignoreable_keys_on_conflict
    ): smb_ignoreable_keys_mutation_response
    "insert a single row into the table: \"smb.ignoreable_keys\""
    insert_smb_ignoreable_keys_one(
        "the row to be inserted"
        object: smb_ignoreable_keys_insert_input!,
        "on conflict condition"
        on_conflict: smb_ignoreable_keys_on_conflict
    ): smb_ignoreable_keys
    "insert data into the table: \"smb.intro_slide_translations\""
    insert_smb_intro_slide_translations(
        "the rows to be inserted"
        objects: [smb_intro_slide_translations_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_intro_slide_translations_on_conflict
    ): smb_intro_slide_translations_mutation_response
    "insert a single row into the table: \"smb.intro_slide_translations\""
    insert_smb_intro_slide_translations_one(
        "the row to be inserted"
        object: smb_intro_slide_translations_insert_input!,
        "on conflict condition"
        on_conflict: smb_intro_slide_translations_on_conflict
    ): smb_intro_slide_translations
    "insert data into the table: \"smb.intro_slides\""
    insert_smb_intro_slides(
        "the rows to be inserted"
        objects: [smb_intro_slides_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_intro_slides_on_conflict
    ): smb_intro_slides_mutation_response
    "insert a single row into the table: \"smb.intro_slides\""
    insert_smb_intro_slides_one(
        "the row to be inserted"
        object: smb_intro_slides_insert_input!,
        "on conflict condition"
        on_conflict: smb_intro_slides_on_conflict
    ): smb_intro_slides
    "insert data into the table: \"smb.intro_text_module_translations\""
    insert_smb_intro_text_module_translations(
        "the rows to be inserted"
        objects: [smb_intro_text_module_translations_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_intro_text_module_translations_on_conflict
    ): smb_intro_text_module_translations_mutation_response
    "insert a single row into the table: \"smb.intro_text_module_translations\""
    insert_smb_intro_text_module_translations_one(
        "the row to be inserted"
        object: smb_intro_text_module_translations_insert_input!,
        "on conflict condition"
        on_conflict: smb_intro_text_module_translations_on_conflict
    ): smb_intro_text_module_translations
    "insert data into the table: \"smb.intro_text_module_type\""
    insert_smb_intro_text_module_type(
        "the rows to be inserted"
        objects: [smb_intro_text_module_type_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_intro_text_module_type_on_conflict
    ): smb_intro_text_module_type_mutation_response
    "insert a single row into the table: \"smb.intro_text_module_type\""
    insert_smb_intro_text_module_type_one(
        "the row to be inserted"
        object: smb_intro_text_module_type_insert_input!,
        "on conflict condition"
        on_conflict: smb_intro_text_module_type_on_conflict
    ): smb_intro_text_module_type
    "insert data into the table: \"smb.intro_text_modules\""
    insert_smb_intro_text_modules(
        "the rows to be inserted"
        objects: [smb_intro_text_modules_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_intro_text_modules_on_conflict
    ): smb_intro_text_modules_mutation_response
    "insert a single row into the table: \"smb.intro_text_modules\""
    insert_smb_intro_text_modules_one(
        "the row to be inserted"
        object: smb_intro_text_modules_insert_input!,
        "on conflict condition"
        on_conflict: smb_intro_text_modules_on_conflict
    ): smb_intro_text_modules
    "insert data into the table: \"smb.language\""
    insert_smb_language(
        "the rows to be inserted"
        objects: [smb_language_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_language_on_conflict
    ): smb_language_mutation_response
    "insert a single row into the table: \"smb.language\""
    insert_smb_language_one(
        "the row to be inserted"
        object: smb_language_insert_input!,
        "on conflict condition"
        on_conflict: smb_language_on_conflict
    ): smb_language
    "insert data into the table: \"smb.licenses\""
    insert_smb_licenses(
        "the rows to be inserted"
        objects: [smb_licenses_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_licenses_on_conflict
    ): smb_licenses_mutation_response
    "insert a single row into the table: \"smb.licenses\""
    insert_smb_licenses_one(
        "the row to be inserted"
        object: smb_licenses_insert_input!,
        "on conflict condition"
        on_conflict: smb_licenses_on_conflict
    ): smb_licenses
    "insert data into the table: \"smb.licenses_translation\""
    insert_smb_licenses_translation(
        "the rows to be inserted"
        objects: [smb_licenses_translation_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_licenses_translation_on_conflict
    ): smb_licenses_translation_mutation_response
    "insert a single row into the table: \"smb.licenses_translation\""
    insert_smb_licenses_translation_one(
        "the row to be inserted"
        object: smb_licenses_translation_insert_input!,
        "on conflict condition"
        on_conflict: smb_licenses_translation_on_conflict
    ): smb_licenses_translation
    "insert data into the table: \"smb.objects\""
    insert_smb_objects(
        "the rows to be inserted"
        objects: [smb_objects_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_objects_on_conflict
    ): smb_objects_mutation_response
    "insert a single row into the table: \"smb.objects\""
    insert_smb_objects_one(
        "the row to be inserted"
        object: smb_objects_insert_input!,
        "on conflict condition"
        on_conflict: smb_objects_on_conflict
    ): smb_objects
    "insert data into the table: \"smb.org_unit\""
    insert_smb_org_unit(
        "the rows to be inserted"
        objects: [smb_org_unit_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_org_unit_on_conflict
    ): smb_org_unit_mutation_response
    "insert a single row into the table: \"smb.org_unit\""
    insert_smb_org_unit_one(
        "the row to be inserted"
        object: smb_org_unit_insert_input!,
        "on conflict condition"
        on_conflict: smb_org_unit_on_conflict
    ): smb_org_unit
    "insert data into the table: \"smb.sync_cycle_type\""
    insert_smb_sync_cycle_type(
        "the rows to be inserted"
        objects: [smb_sync_cycle_type_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_sync_cycle_type_on_conflict
    ): smb_sync_cycle_type_mutation_response
    "insert a single row into the table: \"smb.sync_cycle_type\""
    insert_smb_sync_cycle_type_one(
        "the row to be inserted"
        object: smb_sync_cycle_type_insert_input!,
        "on conflict condition"
        on_conflict: smb_sync_cycle_type_on_conflict
    ): smb_sync_cycle_type
    "insert data into the table: \"smb.sync_cycles\""
    insert_smb_sync_cycles(
        "the rows to be inserted"
        objects: [smb_sync_cycles_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_sync_cycles_on_conflict
    ): smb_sync_cycles_mutation_response
    "insert a single row into the table: \"smb.sync_cycles\""
    insert_smb_sync_cycles_one(
        "the row to be inserted"
        object: smb_sync_cycles_insert_input!,
        "on conflict condition"
        on_conflict: smb_sync_cycles_on_conflict
    ): smb_sync_cycles
    "insert data into the table: \"smb.topics\""
    insert_smb_topics(
        "the rows to be inserted"
        objects: [smb_topics_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_topics_on_conflict
    ): smb_topics_mutation_response
    "insert data into the table: \"smb.topics_objects\""
    insert_smb_topics_objects(
        "the rows to be inserted"
        objects: [smb_topics_objects_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_topics_objects_on_conflict
    ): smb_topics_objects_mutation_response
    "insert a single row into the table: \"smb.topics_objects\""
    insert_smb_topics_objects_one(
        "the row to be inserted"
        object: smb_topics_objects_insert_input!,
        "on conflict condition"
        on_conflict: smb_topics_objects_on_conflict
    ): smb_topics_objects
    "insert a single row into the table: \"smb.topics\""
    insert_smb_topics_one(
        "the row to be inserted"
        object: smb_topics_insert_input!,
        "on conflict condition"
        on_conflict: smb_topics_on_conflict
    ): smb_topics
    "insert data into the table: \"smb.topics_translations\""
    insert_smb_topics_translations(
        "the rows to be inserted"
        objects: [smb_topics_translations_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_topics_translations_on_conflict
    ): smb_topics_translations_mutation_response
    "insert a single row into the table: \"smb.topics_translations\""
    insert_smb_topics_translations_one(
        "the row to be inserted"
        object: smb_topics_translations_insert_input!,
        "on conflict condition"
        on_conflict: smb_topics_translations_on_conflict
    ): smb_topics_translations
    "insert data into the table: \"smb.tours\""
    insert_smb_tours(
        "the rows to be inserted"
        objects: [smb_tours_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_tours_on_conflict
    ): smb_tours_mutation_response
    "insert data into the table: \"smb.tours_objects\""
    insert_smb_tours_objects(
        "the rows to be inserted"
        objects: [smb_tours_objects_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_tours_objects_on_conflict
    ): smb_tours_objects_mutation_response
    "insert a single row into the table: \"smb.tours_objects\""
    insert_smb_tours_objects_one(
        "the row to be inserted"
        object: smb_tours_objects_insert_input!,
        "on conflict condition"
        on_conflict: smb_tours_objects_on_conflict
    ): smb_tours_objects
    "insert data into the table: \"smb.tours_objects_translation\""
    insert_smb_tours_objects_translation(
        "the rows to be inserted"
        objects: [smb_tours_objects_translation_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_tours_objects_translation_on_conflict
    ): smb_tours_objects_translation_mutation_response
    "insert a single row into the table: \"smb.tours_objects_translation\""
    insert_smb_tours_objects_translation_one(
        "the row to be inserted"
        object: smb_tours_objects_translation_insert_input!,
        "on conflict condition"
        on_conflict: smb_tours_objects_translation_on_conflict
    ): smb_tours_objects_translation
    "insert a single row into the table: \"smb.tours\""
    insert_smb_tours_one(
        "the row to be inserted"
        object: smb_tours_insert_input!,
        "on conflict condition"
        on_conflict: smb_tours_on_conflict
    ): smb_tours
    "insert data into the table: \"smb.tours_translation\""
    insert_smb_tours_translation(
        "the rows to be inserted"
        objects: [smb_tours_translation_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_tours_translation_on_conflict
    ): smb_tours_translation_mutation_response
    "insert a single row into the table: \"smb.tours_translation\""
    insert_smb_tours_translation_one(
        "the row to be inserted"
        object: smb_tours_translation_insert_input!,
        "on conflict condition"
        on_conflict: smb_tours_translation_on_conflict
    ): smb_tours_translation
    "insert data into the table: \"smb.user\""
    insert_smb_user(
        "the rows to be inserted"
        objects: [smb_user_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_user_on_conflict
    ): smb_user_mutation_response
    "insert a single row into the table: \"smb.user\""
    insert_smb_user_one(
        "the row to be inserted"
        object: smb_user_insert_input!,
        "on conflict condition"
        on_conflict: smb_user_on_conflict
    ): smb_user
    "insert data into the table: \"smb.user_role\""
    insert_smb_user_role(
        "the rows to be inserted"
        objects: [smb_user_role_insert_input!]!,
        "on conflict condition"
        on_conflict: smb_user_role_on_conflict
    ): smb_user_role_mutation_response
    "insert a single row into the table: \"smb.user_role\""
    insert_smb_user_role_one(
        "the row to be inserted"
        object: smb_user_role_insert_input!,
        "on conflict condition"
        on_conflict: smb_user_role_on_conflict
    ): smb_user_role
    "update data of the table: \"smb.attachments\""
    update_smb_attachments(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_attachments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_attachments_set_input,
        "filter the rows which have to be updated"
        where: smb_attachments_bool_exp!
    ): smb_attachments_mutation_response
    "update single row of the table: \"smb.attachments\""
    update_smb_attachments_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_attachments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_attachments_set_input,
        pk_columns: smb_attachments_pk_columns_input!
    ): smb_attachments
    "update data of the table: \"smb.attribute_translations\""
    update_smb_attribute_translations(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_attribute_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_attribute_translations_set_input,
        "filter the rows which have to be updated"
        where: smb_attribute_translations_bool_exp!
    ): smb_attribute_translations_mutation_response
    "update single row of the table: \"smb.attribute_translations\""
    update_smb_attribute_translations_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_attribute_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_attribute_translations_set_input,
        pk_columns: smb_attribute_translations_pk_columns_input!
    ): smb_attribute_translations
    "update data of the table: \"smb.attributes\""
    update_smb_attributes(
        "sets the columns of the filtered rows to the given values"
        _set: smb_attributes_set_input,
        "filter the rows which have to be updated"
        where: smb_attributes_bool_exp!
    ): smb_attributes_mutation_response
    "update single row of the table: \"smb.attributes\""
    update_smb_attributes_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: smb_attributes_set_input,
        pk_columns: smb_attributes_pk_columns_input!
    ): smb_attributes
    "update data of the table: \"smb.header\""
    update_smb_header(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_header_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_header_set_input,
        "filter the rows which have to be updated"
        where: smb_header_bool_exp!
    ): smb_header_mutation_response
    "update single row of the table: \"smb.header\""
    update_smb_header_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_header_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_header_set_input,
        pk_columns: smb_header_pk_columns_input!
    ): smb_header
    "update data of the table: \"smb.header_translations\""
    update_smb_header_translations(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_header_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_header_translations_set_input,
        "filter the rows which have to be updated"
        where: smb_header_translations_bool_exp!
    ): smb_header_translations_mutation_response
    "update single row of the table: \"smb.header_translations\""
    update_smb_header_translations_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_header_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_header_translations_set_input,
        pk_columns: smb_header_translations_pk_columns_input!
    ): smb_header_translations
    "update data of the table: \"smb.highlights\""
    update_smb_highlights(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_highlights_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_highlights_set_input,
        "filter the rows which have to be updated"
        where: smb_highlights_bool_exp!
    ): smb_highlights_mutation_response
    "update single row of the table: \"smb.highlights\""
    update_smb_highlights_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_highlights_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_highlights_set_input,
        pk_columns: smb_highlights_pk_columns_input!
    ): smb_highlights
    "update data of the table: \"smb.ignoreable_keys\""
    update_smb_ignoreable_keys(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_ignoreable_keys_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_ignoreable_keys_set_input,
        "filter the rows which have to be updated"
        where: smb_ignoreable_keys_bool_exp!
    ): smb_ignoreable_keys_mutation_response
    "update single row of the table: \"smb.ignoreable_keys\""
    update_smb_ignoreable_keys_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_ignoreable_keys_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_ignoreable_keys_set_input,
        pk_columns: smb_ignoreable_keys_pk_columns_input!
    ): smb_ignoreable_keys
    "update data of the table: \"smb.intro_slide_translations\""
    update_smb_intro_slide_translations(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_slide_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_slide_translations_set_input,
        "filter the rows which have to be updated"
        where: smb_intro_slide_translations_bool_exp!
    ): smb_intro_slide_translations_mutation_response
    "update single row of the table: \"smb.intro_slide_translations\""
    update_smb_intro_slide_translations_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_slide_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_slide_translations_set_input,
        pk_columns: smb_intro_slide_translations_pk_columns_input!
    ): smb_intro_slide_translations
    "update data of the table: \"smb.intro_slides\""
    update_smb_intro_slides(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_slides_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_slides_set_input,
        "filter the rows which have to be updated"
        where: smb_intro_slides_bool_exp!
    ): smb_intro_slides_mutation_response
    "update single row of the table: \"smb.intro_slides\""
    update_smb_intro_slides_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_slides_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_slides_set_input,
        pk_columns: smb_intro_slides_pk_columns_input!
    ): smb_intro_slides
    "update data of the table: \"smb.intro_text_module_translations\""
    update_smb_intro_text_module_translations(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_text_module_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_text_module_translations_set_input,
        "filter the rows which have to be updated"
        where: smb_intro_text_module_translations_bool_exp!
    ): smb_intro_text_module_translations_mutation_response
    "update single row of the table: \"smb.intro_text_module_translations\""
    update_smb_intro_text_module_translations_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_text_module_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_text_module_translations_set_input,
        pk_columns: smb_intro_text_module_translations_pk_columns_input!
    ): smb_intro_text_module_translations
    "update data of the table: \"smb.intro_text_module_type\""
    update_smb_intro_text_module_type(
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_text_module_type_set_input,
        "filter the rows which have to be updated"
        where: smb_intro_text_module_type_bool_exp!
    ): smb_intro_text_module_type_mutation_response
    "update single row of the table: \"smb.intro_text_module_type\""
    update_smb_intro_text_module_type_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_text_module_type_set_input,
        pk_columns: smb_intro_text_module_type_pk_columns_input!
    ): smb_intro_text_module_type
    "update data of the table: \"smb.intro_text_modules\""
    update_smb_intro_text_modules(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_text_modules_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_text_modules_set_input,
        "filter the rows which have to be updated"
        where: smb_intro_text_modules_bool_exp!
    ): smb_intro_text_modules_mutation_response
    "update single row of the table: \"smb.intro_text_modules\""
    update_smb_intro_text_modules_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_intro_text_modules_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_intro_text_modules_set_input,
        pk_columns: smb_intro_text_modules_pk_columns_input!
    ): smb_intro_text_modules
    "update data of the table: \"smb.language\""
    update_smb_language(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_language_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_language_set_input,
        "filter the rows which have to be updated"
        where: smb_language_bool_exp!
    ): smb_language_mutation_response
    "update single row of the table: \"smb.language\""
    update_smb_language_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_language_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_language_set_input,
        pk_columns: smb_language_pk_columns_input!
    ): smb_language
    "update data of the table: \"smb.licenses\""
    update_smb_licenses(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_licenses_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_licenses_set_input,
        "filter the rows which have to be updated"
        where: smb_licenses_bool_exp!
    ): smb_licenses_mutation_response
    "update single row of the table: \"smb.licenses\""
    update_smb_licenses_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_licenses_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_licenses_set_input,
        pk_columns: smb_licenses_pk_columns_input!
    ): smb_licenses
    "update data of the table: \"smb.licenses_translation\""
    update_smb_licenses_translation(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_licenses_translation_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_licenses_translation_set_input,
        "filter the rows which have to be updated"
        where: smb_licenses_translation_bool_exp!
    ): smb_licenses_translation_mutation_response
    "update single row of the table: \"smb.licenses_translation\""
    update_smb_licenses_translation_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_licenses_translation_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_licenses_translation_set_input,
        pk_columns: smb_licenses_translation_pk_columns_input!
    ): smb_licenses_translation
    "update data of the table: \"smb.objects\""
    update_smb_objects(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_objects_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_objects_set_input,
        "filter the rows which have to be updated"
        where: smb_objects_bool_exp!
    ): smb_objects_mutation_response
    "update single row of the table: \"smb.objects\""
    update_smb_objects_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_objects_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_objects_set_input,
        pk_columns: smb_objects_pk_columns_input!
    ): smb_objects
    "update data of the table: \"smb.org_unit\""
    update_smb_org_unit(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_org_unit_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_org_unit_set_input,
        "filter the rows which have to be updated"
        where: smb_org_unit_bool_exp!
    ): smb_org_unit_mutation_response
    "update single row of the table: \"smb.org_unit\""
    update_smb_org_unit_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_org_unit_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_org_unit_set_input,
        pk_columns: smb_org_unit_pk_columns_input!
    ): smb_org_unit
    "update data of the table: \"smb.sync_cycle_type\""
    update_smb_sync_cycle_type(
        "sets the columns of the filtered rows to the given values"
        _set: smb_sync_cycle_type_set_input,
        "filter the rows which have to be updated"
        where: smb_sync_cycle_type_bool_exp!
    ): smb_sync_cycle_type_mutation_response
    "update single row of the table: \"smb.sync_cycle_type\""
    update_smb_sync_cycle_type_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: smb_sync_cycle_type_set_input,
        pk_columns: smb_sync_cycle_type_pk_columns_input!
    ): smb_sync_cycle_type
    "update data of the table: \"smb.sync_cycles\""
    update_smb_sync_cycles(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_sync_cycles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_sync_cycles_set_input,
        "filter the rows which have to be updated"
        where: smb_sync_cycles_bool_exp!
    ): smb_sync_cycles_mutation_response
    "update single row of the table: \"smb.sync_cycles\""
    update_smb_sync_cycles_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_sync_cycles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_sync_cycles_set_input,
        pk_columns: smb_sync_cycles_pk_columns_input!
    ): smb_sync_cycles
    "update data of the table: \"smb.topics\""
    update_smb_topics(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_topics_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_topics_set_input,
        "filter the rows which have to be updated"
        where: smb_topics_bool_exp!
    ): smb_topics_mutation_response
    "update single row of the table: \"smb.topics\""
    update_smb_topics_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_topics_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_topics_set_input,
        pk_columns: smb_topics_pk_columns_input!
    ): smb_topics
    "update data of the table: \"smb.topics_objects\""
    update_smb_topics_objects(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_topics_objects_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_topics_objects_set_input,
        "filter the rows which have to be updated"
        where: smb_topics_objects_bool_exp!
    ): smb_topics_objects_mutation_response
    "update single row of the table: \"smb.topics_objects\""
    update_smb_topics_objects_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_topics_objects_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_topics_objects_set_input,
        pk_columns: smb_topics_objects_pk_columns_input!
    ): smb_topics_objects
    "update data of the table: \"smb.topics_translations\""
    update_smb_topics_translations(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_topics_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_topics_translations_set_input,
        "filter the rows which have to be updated"
        where: smb_topics_translations_bool_exp!
    ): smb_topics_translations_mutation_response
    "update single row of the table: \"smb.topics_translations\""
    update_smb_topics_translations_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_topics_translations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_topics_translations_set_input,
        pk_columns: smb_topics_translations_pk_columns_input!
    ): smb_topics_translations
    "update data of the table: \"smb.tours\""
    update_smb_tours(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_set_input,
        "filter the rows which have to be updated"
        where: smb_tours_bool_exp!
    ): smb_tours_mutation_response
    "update single row of the table: \"smb.tours\""
    update_smb_tours_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_set_input,
        pk_columns: smb_tours_pk_columns_input!
    ): smb_tours
    "update data of the table: \"smb.tours_objects\""
    update_smb_tours_objects(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_objects_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_objects_set_input,
        "filter the rows which have to be updated"
        where: smb_tours_objects_bool_exp!
    ): smb_tours_objects_mutation_response
    "update single row of the table: \"smb.tours_objects\""
    update_smb_tours_objects_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_objects_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_objects_set_input,
        pk_columns: smb_tours_objects_pk_columns_input!
    ): smb_tours_objects
    "update data of the table: \"smb.tours_objects_translation\""
    update_smb_tours_objects_translation(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_objects_translation_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_objects_translation_set_input,
        "filter the rows which have to be updated"
        where: smb_tours_objects_translation_bool_exp!
    ): smb_tours_objects_translation_mutation_response
    "update single row of the table: \"smb.tours_objects_translation\""
    update_smb_tours_objects_translation_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_objects_translation_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_objects_translation_set_input,
        pk_columns: smb_tours_objects_translation_pk_columns_input!
    ): smb_tours_objects_translation
    "update data of the table: \"smb.tours_translation\""
    update_smb_tours_translation(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_translation_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_translation_set_input,
        "filter the rows which have to be updated"
        where: smb_tours_translation_bool_exp!
    ): smb_tours_translation_mutation_response
    "update single row of the table: \"smb.tours_translation\""
    update_smb_tours_translation_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_tours_translation_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_tours_translation_set_input,
        pk_columns: smb_tours_translation_pk_columns_input!
    ): smb_tours_translation
    "update data of the table: \"smb.user\""
    update_smb_user(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_user_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_user_set_input,
        "filter the rows which have to be updated"
        where: smb_user_bool_exp!
    ): smb_user_mutation_response
    "update single row of the table: \"smb.user\""
    update_smb_user_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_user_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_user_set_input,
        pk_columns: smb_user_pk_columns_input!
    ): smb_user
    "update data of the table: \"smb.user_role\""
    update_smb_user_role(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_user_role_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_user_role_set_input,
        "filter the rows which have to be updated"
        where: smb_user_role_bool_exp!
    ): smb_user_role_mutation_response
    "update single row of the table: \"smb.user_role\""
    update_smb_user_role_by_pk(
        "increments the integer columns with given value of the filtered values"
        _inc: smb_user_role_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: smb_user_role_set_input,
        pk_columns: smb_user_role_pk_columns_input!
    ): smb_user_role
}

"query root"
type query_root {
    "fetch data from the table: \"smb.attachments\""
    smb_attachments(
        "distinct select on columns"
        distinct_on: [smb_attachments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attachments_order_by!],
        "filter the rows returned"
        where: smb_attachments_bool_exp
    ): [smb_attachments!]!
    "fetch aggregated fields from the table: \"smb.attachments\""
    smb_attachments_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attachments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attachments_order_by!],
        "filter the rows returned"
        where: smb_attachments_bool_exp
    ): smb_attachments_aggregate!
    "fetch data from the table: \"smb.attachments\" using primary key columns"
    smb_attachments_by_pk(id: bigint!): smb_attachments
    "execute function \"smb.attribute_search_suggestions\" which returns \"smb.search_suggestions\""
    smb_attribute_search_suggestions(
        "input parameters for function \"smb.attribute_search_suggestions\""
        args: smb_attribute_search_suggestions_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): [smb_search_suggestions!]!
    "execute function \"smb.attribute_search_suggestions\" and query aggregates on result of table type \"smb.search_suggestions\""
    smb_attribute_search_suggestions_aggregate(
        "input parameters for function \"smb.attribute_search_suggestions\""
        args: smb_attribute_search_suggestions_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): smb_search_suggestions_aggregate!
    "fetch data from the table: \"smb.attribute_translations\""
    smb_attribute_translations(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): [smb_attribute_translations!]!
    "fetch aggregated fields from the table: \"smb.attribute_translations\""
    smb_attribute_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): smb_attribute_translations_aggregate!
    "fetch data from the table: \"smb.attribute_translations\" using primary key columns"
    smb_attribute_translations_by_pk(id: bigint!): smb_attribute_translations
    "fetch data from the table: \"smb.attributes\""
    smb_attributes(
        "distinct select on columns"
        distinct_on: [smb_attributes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attributes_order_by!],
        "filter the rows returned"
        where: smb_attributes_bool_exp
    ): [smb_attributes!]!
    "fetch aggregated fields from the table: \"smb.attributes\""
    smb_attributes_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attributes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attributes_order_by!],
        "filter the rows returned"
        where: smb_attributes_bool_exp
    ): smb_attributes_aggregate!
    "fetch data from the table: \"smb.attributes\" using primary key columns"
    smb_attributes_by_pk(key: String!): smb_attributes
    "execute function \"smb.autocomplete_search\" which returns \"smb.search_suggestions\""
    smb_autocomplete_search(
        "input parameters for function \"smb.autocomplete_search\""
        args: smb_autocomplete_search_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): [smb_search_suggestions!]!
    "execute function \"smb.autocomplete_search\" and query aggregates on result of table type \"smb.search_suggestions\""
    smb_autocomplete_search_aggregate(
        "input parameters for function \"smb.autocomplete_search\""
        args: smb_autocomplete_search_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): smb_search_suggestions_aggregate!
    "execute function \"smb.filter_objects\" which returns \"smb.objects\""
    smb_filter_objects(
        "input parameters for function \"smb.filter_objects\""
        args: smb_filter_objects_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "execute function \"smb.filter_objects\" and query aggregates on result of table type \"smb.objects\""
    smb_filter_objects_aggregate(
        "input parameters for function \"smb.filter_objects\""
        args: smb_filter_objects_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "fetch data from the table: \"smb.header\""
    smb_header(
        "distinct select on columns"
        distinct_on: [smb_header_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_order_by!],
        "filter the rows returned"
        where: smb_header_bool_exp
    ): [smb_header!]!
    "fetch aggregated fields from the table: \"smb.header\""
    smb_header_aggregate(
        "distinct select on columns"
        distinct_on: [smb_header_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_order_by!],
        "filter the rows returned"
        where: smb_header_bool_exp
    ): smb_header_aggregate!
    "fetch data from the table: \"smb.header\" using primary key columns"
    smb_header_by_pk(id: bigint!): smb_header
    "fetch data from the table: \"smb.header_translations\""
    smb_header_translations(
        "distinct select on columns"
        distinct_on: [smb_header_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_translations_order_by!],
        "filter the rows returned"
        where: smb_header_translations_bool_exp
    ): [smb_header_translations!]!
    "fetch aggregated fields from the table: \"smb.header_translations\""
    smb_header_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_header_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_translations_order_by!],
        "filter the rows returned"
        where: smb_header_translations_bool_exp
    ): smb_header_translations_aggregate!
    "fetch data from the table: \"smb.header_translations\" using primary key columns"
    smb_header_translations_by_pk(id: bigint!): smb_header_translations
    "fetch data from the table: \"smb.highlights\""
    smb_highlights(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): [smb_highlights!]!
    "fetch aggregated fields from the table: \"smb.highlights\""
    smb_highlights_aggregate(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): smb_highlights_aggregate!
    "fetch data from the table: \"smb.highlights\" using primary key columns"
    smb_highlights_by_pk(id: bigint!): smb_highlights
    "fetch data from the table: \"smb.ignoreable_keys\""
    smb_ignoreable_keys(
        "distinct select on columns"
        distinct_on: [smb_ignoreable_keys_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_ignoreable_keys_order_by!],
        "filter the rows returned"
        where: smb_ignoreable_keys_bool_exp
    ): [smb_ignoreable_keys!]!
    "fetch aggregated fields from the table: \"smb.ignoreable_keys\""
    smb_ignoreable_keys_aggregate(
        "distinct select on columns"
        distinct_on: [smb_ignoreable_keys_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_ignoreable_keys_order_by!],
        "filter the rows returned"
        where: smb_ignoreable_keys_bool_exp
    ): smb_ignoreable_keys_aggregate!
    "fetch data from the table: \"smb.ignoreable_keys\" using primary key columns"
    smb_ignoreable_keys_by_pk(id: bigint!): smb_ignoreable_keys
    "fetch data from the table: \"smb.intro_slide_translations\""
    smb_intro_slide_translations(
        "distinct select on columns"
        distinct_on: [smb_intro_slide_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slide_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_slide_translations_bool_exp
    ): [smb_intro_slide_translations!]!
    "fetch aggregated fields from the table: \"smb.intro_slide_translations\""
    smb_intro_slide_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_slide_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slide_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_slide_translations_bool_exp
    ): smb_intro_slide_translations_aggregate!
    "fetch data from the table: \"smb.intro_slide_translations\" using primary key columns"
    smb_intro_slide_translations_by_pk(id: bigint!): smb_intro_slide_translations
    "fetch data from the table: \"smb.intro_slides\""
    smb_intro_slides(
        "distinct select on columns"
        distinct_on: [smb_intro_slides_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slides_order_by!],
        "filter the rows returned"
        where: smb_intro_slides_bool_exp
    ): [smb_intro_slides!]!
    "fetch aggregated fields from the table: \"smb.intro_slides\""
    smb_intro_slides_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_slides_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slides_order_by!],
        "filter the rows returned"
        where: smb_intro_slides_bool_exp
    ): smb_intro_slides_aggregate!
    "fetch data from the table: \"smb.intro_slides\" using primary key columns"
    smb_intro_slides_by_pk(id: bigint!): smb_intro_slides
    "fetch data from the table: \"smb.intro_text_module_translations\""
    smb_intro_text_module_translations(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_translations_bool_exp
    ): [smb_intro_text_module_translations!]!
    "fetch aggregated fields from the table: \"smb.intro_text_module_translations\""
    smb_intro_text_module_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_translations_bool_exp
    ): smb_intro_text_module_translations_aggregate!
    "fetch data from the table: \"smb.intro_text_module_translations\" using primary key columns"
    smb_intro_text_module_translations_by_pk(id: bigint!): smb_intro_text_module_translations
    "fetch data from the table: \"smb.intro_text_module_type\""
    smb_intro_text_module_type(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_type_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_type_bool_exp
    ): [smb_intro_text_module_type!]!
    "fetch aggregated fields from the table: \"smb.intro_text_module_type\""
    smb_intro_text_module_type_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_type_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_type_bool_exp
    ): smb_intro_text_module_type_aggregate!
    "fetch data from the table: \"smb.intro_text_module_type\" using primary key columns"
    smb_intro_text_module_type_by_pk(value: String!): smb_intro_text_module_type
    "fetch data from the table: \"smb.intro_text_modules\""
    smb_intro_text_modules(
        "distinct select on columns"
        distinct_on: [smb_intro_text_modules_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_modules_order_by!],
        "filter the rows returned"
        where: smb_intro_text_modules_bool_exp
    ): [smb_intro_text_modules!]!
    "fetch aggregated fields from the table: \"smb.intro_text_modules\""
    smb_intro_text_modules_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_modules_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_modules_order_by!],
        "filter the rows returned"
        where: smb_intro_text_modules_bool_exp
    ): smb_intro_text_modules_aggregate!
    "fetch data from the table: \"smb.intro_text_modules\" using primary key columns"
    smb_intro_text_modules_by_pk(id: bigint!): smb_intro_text_modules
    "fetch data from the table: \"smb.language\""
    smb_language(
        "distinct select on columns"
        distinct_on: [smb_language_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_language_order_by!],
        "filter the rows returned"
        where: smb_language_bool_exp
    ): [smb_language!]!
    "fetch aggregated fields from the table: \"smb.language\""
    smb_language_aggregate(
        "distinct select on columns"
        distinct_on: [smb_language_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_language_order_by!],
        "filter the rows returned"
        where: smb_language_bool_exp
    ): smb_language_aggregate!
    "fetch data from the table: \"smb.language\" using primary key columns"
    smb_language_by_pk(id: bigint!): smb_language
    "fetch data from the table: \"smb.licenses\""
    smb_licenses(
        "distinct select on columns"
        distinct_on: [smb_licenses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_order_by!],
        "filter the rows returned"
        where: smb_licenses_bool_exp
    ): [smb_licenses!]!
    "fetch aggregated fields from the table: \"smb.licenses\""
    smb_licenses_aggregate(
        "distinct select on columns"
        distinct_on: [smb_licenses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_order_by!],
        "filter the rows returned"
        where: smb_licenses_bool_exp
    ): smb_licenses_aggregate!
    "fetch data from the table: \"smb.licenses\" using primary key columns"
    smb_licenses_by_pk(id: bigint!): smb_licenses
    "fetch data from the table: \"smb.licenses_translation\""
    smb_licenses_translation(
        "distinct select on columns"
        distinct_on: [smb_licenses_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_translation_order_by!],
        "filter the rows returned"
        where: smb_licenses_translation_bool_exp
    ): [smb_licenses_translation!]!
    "fetch aggregated fields from the table: \"smb.licenses_translation\""
    smb_licenses_translation_aggregate(
        "distinct select on columns"
        distinct_on: [smb_licenses_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_translation_order_by!],
        "filter the rows returned"
        where: smb_licenses_translation_bool_exp
    ): smb_licenses_translation_aggregate!
    "fetch data from the table: \"smb.licenses_translation\" using primary key columns"
    smb_licenses_translation_by_pk(id: bigint!): smb_licenses_translation
    "fetch data from the table: \"smb.objects\""
    smb_objects(
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "fetch aggregated fields from the table: \"smb.objects\""
    smb_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "fetch data from the table: \"smb.objects\" using primary key columns"
    smb_objects_by_pk(id: bigint!): smb_objects
    "fetch data from the table: \"smb.org_unit\""
    smb_org_unit(
        "distinct select on columns"
        distinct_on: [smb_org_unit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_org_unit_order_by!],
        "filter the rows returned"
        where: smb_org_unit_bool_exp
    ): [smb_org_unit!]!
    "fetch aggregated fields from the table: \"smb.org_unit\""
    smb_org_unit_aggregate(
        "distinct select on columns"
        distinct_on: [smb_org_unit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_org_unit_order_by!],
        "filter the rows returned"
        where: smb_org_unit_bool_exp
    ): smb_org_unit_aggregate!
    "fetch data from the table: \"smb.org_unit\" using primary key columns"
    smb_org_unit_by_pk(id: bigint!): smb_org_unit
    "execute function \"smb.search_object\" which returns \"smb.objects\""
    smb_search_object(
        "input parameters for function \"smb.search_object\""
        args: smb_search_object_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "execute function \"smb.search_object\" and query aggregates on result of table type \"smb.objects\""
    smb_search_object_aggregate(
        "input parameters for function \"smb.search_object\""
        args: smb_search_object_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "execute function \"smb.search_object_aggregate\" and query aggregates on result of table type \"smb.objects\""
    smb_search_object_aggregate_aggregate(
        "input parameters for function \"smb.search_object_aggregate\""
        args: smb_search_object_aggregate_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "execute function \"smb.search_object_combined\" which returns \"smb.objects\""
    smb_search_object_combined(
        "input parameters for function \"smb.search_object_combined\""
        args: smb_search_object_combined_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "execute function \"smb.search_object_combined\" and query aggregates on result of table type \"smb.objects\""
    smb_search_object_combined_aggregate(
        "input parameters for function \"smb.search_object_combined\""
        args: smb_search_object_combined_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "fetch data from the table: \"smb.search_suggestions\""
    smb_search_suggestions(
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): [smb_search_suggestions!]!
    "fetch aggregated fields from the table: \"smb.search_suggestions\""
    smb_search_suggestions_aggregate(
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): smb_search_suggestions_aggregate!
    "fetch data from the table: \"smb.sync_cycle_type\""
    smb_sync_cycle_type(
        "distinct select on columns"
        distinct_on: [smb_sync_cycle_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycle_type_order_by!],
        "filter the rows returned"
        where: smb_sync_cycle_type_bool_exp
    ): [smb_sync_cycle_type!]!
    "fetch aggregated fields from the table: \"smb.sync_cycle_type\""
    smb_sync_cycle_type_aggregate(
        "distinct select on columns"
        distinct_on: [smb_sync_cycle_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycle_type_order_by!],
        "filter the rows returned"
        where: smb_sync_cycle_type_bool_exp
    ): smb_sync_cycle_type_aggregate!
    "fetch data from the table: \"smb.sync_cycle_type\" using primary key columns"
    smb_sync_cycle_type_by_pk(value: String!): smb_sync_cycle_type
    "fetch data from the table: \"smb.sync_cycles\""
    smb_sync_cycles(
        "distinct select on columns"
        distinct_on: [smb_sync_cycles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycles_order_by!],
        "filter the rows returned"
        where: smb_sync_cycles_bool_exp
    ): [smb_sync_cycles!]!
    "fetch aggregated fields from the table: \"smb.sync_cycles\""
    smb_sync_cycles_aggregate(
        "distinct select on columns"
        distinct_on: [smb_sync_cycles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycles_order_by!],
        "filter the rows returned"
        where: smb_sync_cycles_bool_exp
    ): smb_sync_cycles_aggregate!
    "fetch data from the table: \"smb.sync_cycles\" using primary key columns"
    smb_sync_cycles_by_pk(id: bigint!): smb_sync_cycles
    "fetch data from the table: \"smb.topics\""
    smb_topics(
        "distinct select on columns"
        distinct_on: [smb_topics_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_order_by!],
        "filter the rows returned"
        where: smb_topics_bool_exp
    ): [smb_topics!]!
    "fetch aggregated fields from the table: \"smb.topics\""
    smb_topics_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_order_by!],
        "filter the rows returned"
        where: smb_topics_bool_exp
    ): smb_topics_aggregate!
    "fetch data from the table: \"smb.topics\" using primary key columns"
    smb_topics_by_pk(id: bigint!): smb_topics
    "fetch data from the table: \"smb.topics_objects\""
    smb_topics_objects(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): [smb_topics_objects!]!
    "fetch aggregated fields from the table: \"smb.topics_objects\""
    smb_topics_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): smb_topics_objects_aggregate!
    "fetch data from the table: \"smb.topics_objects\" using primary key columns"
    smb_topics_objects_by_pk(id: bigint!): smb_topics_objects
    "fetch data from the table: \"smb.topics_translations\""
    smb_topics_translations(
        "distinct select on columns"
        distinct_on: [smb_topics_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_translations_order_by!],
        "filter the rows returned"
        where: smb_topics_translations_bool_exp
    ): [smb_topics_translations!]!
    "fetch aggregated fields from the table: \"smb.topics_translations\""
    smb_topics_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_translations_order_by!],
        "filter the rows returned"
        where: smb_topics_translations_bool_exp
    ): smb_topics_translations_aggregate!
    "fetch data from the table: \"smb.topics_translations\" using primary key columns"
    smb_topics_translations_by_pk(id: bigint!): smb_topics_translations
    "fetch data from the table: \"smb.tours\""
    smb_tours(
        "distinct select on columns"
        distinct_on: [smb_tours_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_order_by!],
        "filter the rows returned"
        where: smb_tours_bool_exp
    ): [smb_tours!]!
    "fetch aggregated fields from the table: \"smb.tours\""
    smb_tours_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_order_by!],
        "filter the rows returned"
        where: smb_tours_bool_exp
    ): smb_tours_aggregate!
    "fetch data from the table: \"smb.tours\" using primary key columns"
    smb_tours_by_pk(id: bigint!): smb_tours
    "fetch data from the table: \"smb.tours_objects\""
    smb_tours_objects(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): [smb_tours_objects!]!
    "fetch aggregated fields from the table: \"smb.tours_objects\""
    smb_tours_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): smb_tours_objects_aggregate!
    "fetch data from the table: \"smb.tours_objects\" using primary key columns"
    smb_tours_objects_by_pk(id: bigint!): smb_tours_objects
    "fetch data from the table: \"smb.tours_objects_translation\""
    smb_tours_objects_translation(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_translation_bool_exp
    ): [smb_tours_objects_translation!]!
    "fetch aggregated fields from the table: \"smb.tours_objects_translation\""
    smb_tours_objects_translation_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_translation_bool_exp
    ): smb_tours_objects_translation_aggregate!
    "fetch data from the table: \"smb.tours_objects_translation\" using primary key columns"
    smb_tours_objects_translation_by_pk(id: bigint!): smb_tours_objects_translation
    "fetch data from the table: \"smb.tours_translation\""
    smb_tours_translation(
        "distinct select on columns"
        distinct_on: [smb_tours_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_translation_bool_exp
    ): [smb_tours_translation!]!
    "fetch aggregated fields from the table: \"smb.tours_translation\""
    smb_tours_translation_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_translation_bool_exp
    ): smb_tours_translation_aggregate!
    "fetch data from the table: \"smb.tours_translation\" using primary key columns"
    smb_tours_translation_by_pk(id: bigint!): smb_tours_translation
    "fetch data from the table: \"smb.user\""
    smb_user(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): [smb_user!]!
    "fetch aggregated fields from the table: \"smb.user\""
    smb_user_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): smb_user_aggregate!
    "fetch data from the table: \"smb.user\" using primary key columns"
    smb_user_by_pk(id: uuid!): smb_user
    "fetch data from the table: \"smb.user_role\""
    smb_user_role(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): [smb_user_role!]!
    "fetch aggregated fields from the table: \"smb.user_role\""
    smb_user_role_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): smb_user_role_aggregate!
    "fetch data from the table: \"smb.user_role\" using primary key columns"
    smb_user_role_by_pk(id: bigint!): smb_user_role
}

"columns and relationships of \"smb.attachments\""
type smb_attachments {
    attachment: String!
    id: bigint!
    "An object relationship"
    object: smb_objects!
    object_id: bigint!
    primary: Boolean
}

"aggregated selection of \"smb.attachments\""
type smb_attachments_aggregate {
    aggregate: smb_attachments_aggregate_fields
    nodes: [smb_attachments!]!
}

"aggregate fields of \"smb.attachments\""
type smb_attachments_aggregate_fields {
    avg: smb_attachments_avg_fields
    count(columns: [smb_attachments_select_column!], distinct: Boolean): Int
    max: smb_attachments_max_fields
    min: smb_attachments_min_fields
    stddev: smb_attachments_stddev_fields
    stddev_pop: smb_attachments_stddev_pop_fields
    stddev_samp: smb_attachments_stddev_samp_fields
    sum: smb_attachments_sum_fields
    var_pop: smb_attachments_var_pop_fields
    var_samp: smb_attachments_var_samp_fields
    variance: smb_attachments_variance_fields
}

"aggregate avg on columns"
type smb_attachments_avg_fields {
    id: Float
    object_id: Float
}

"aggregate max on columns"
type smb_attachments_max_fields {
    attachment: String
    id: bigint
    object_id: bigint
}

"aggregate min on columns"
type smb_attachments_min_fields {
    attachment: String
    id: bigint
    object_id: bigint
}

"response of any mutation on the table \"smb.attachments\""
type smb_attachments_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_attachments!]!
}

"aggregate stddev on columns"
type smb_attachments_stddev_fields {
    id: Float
    object_id: Float
}

"aggregate stddev_pop on columns"
type smb_attachments_stddev_pop_fields {
    id: Float
    object_id: Float
}

"aggregate stddev_samp on columns"
type smb_attachments_stddev_samp_fields {
    id: Float
    object_id: Float
}

"aggregate sum on columns"
type smb_attachments_sum_fields {
    id: bigint
    object_id: bigint
}

"aggregate var_pop on columns"
type smb_attachments_var_pop_fields {
    id: Float
    object_id: Float
}

"aggregate var_samp on columns"
type smb_attachments_var_samp_fields {
    id: Float
    object_id: Float
}

"aggregate variance on columns"
type smb_attachments_variance_fields {
    id: Float
    object_id: Float
}

"columns and relationships of \"smb.attribute_translations\""
type smb_attribute_translations {
    "An object relationship"
    attribute: smb_attributes!
    attribute_key: String!
    fq_key: String!
    id: bigint!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    object_id: bigint!
    value: String
}

"aggregated selection of \"smb.attribute_translations\""
type smb_attribute_translations_aggregate {
    aggregate: smb_attribute_translations_aggregate_fields
    nodes: [smb_attribute_translations!]!
}

"aggregate fields of \"smb.attribute_translations\""
type smb_attribute_translations_aggregate_fields {
    avg: smb_attribute_translations_avg_fields
    count(columns: [smb_attribute_translations_select_column!], distinct: Boolean): Int
    max: smb_attribute_translations_max_fields
    min: smb_attribute_translations_min_fields
    stddev: smb_attribute_translations_stddev_fields
    stddev_pop: smb_attribute_translations_stddev_pop_fields
    stddev_samp: smb_attribute_translations_stddev_samp_fields
    sum: smb_attribute_translations_sum_fields
    var_pop: smb_attribute_translations_var_pop_fields
    var_samp: smb_attribute_translations_var_samp_fields
    variance: smb_attribute_translations_variance_fields
}

"aggregate avg on columns"
type smb_attribute_translations_avg_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"aggregate max on columns"
type smb_attribute_translations_max_fields {
    attribute_key: String
    fq_key: String
    id: bigint
    language_id: bigint
    object_id: bigint
    value: String
}

"aggregate min on columns"
type smb_attribute_translations_min_fields {
    attribute_key: String
    fq_key: String
    id: bigint
    language_id: bigint
    object_id: bigint
    value: String
}

"response of any mutation on the table \"smb.attribute_translations\""
type smb_attribute_translations_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_attribute_translations!]!
}

"aggregate stddev on columns"
type smb_attribute_translations_stddev_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"aggregate stddev_pop on columns"
type smb_attribute_translations_stddev_pop_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"aggregate stddev_samp on columns"
type smb_attribute_translations_stddev_samp_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"aggregate sum on columns"
type smb_attribute_translations_sum_fields {
    id: bigint
    language_id: bigint
    object_id: bigint
}

"aggregate var_pop on columns"
type smb_attribute_translations_var_pop_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"aggregate var_samp on columns"
type smb_attribute_translations_var_samp_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"aggregate variance on columns"
type smb_attribute_translations_variance_fields {
    id: Float
    language_id: Float
    object_id: Float
}

"columns and relationships of \"smb.attributes\""
type smb_attributes {
    "An array relationship"
    attribute_translations(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): [smb_attribute_translations!]!
    "An aggregated array relationship"
    attribute_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): smb_attribute_translations_aggregate!
    autocomplete: Boolean
    datatype: String!
    key: String!
    mapping: String
    relevant: Boolean
}

"aggregated selection of \"smb.attributes\""
type smb_attributes_aggregate {
    aggregate: smb_attributes_aggregate_fields
    nodes: [smb_attributes!]!
}

"aggregate fields of \"smb.attributes\""
type smb_attributes_aggregate_fields {
    count(columns: [smb_attributes_select_column!], distinct: Boolean): Int
    max: smb_attributes_max_fields
    min: smb_attributes_min_fields
}

"aggregate max on columns"
type smb_attributes_max_fields {
    datatype: String
    key: String
    mapping: String
}

"aggregate min on columns"
type smb_attributes_min_fields {
    datatype: String
    key: String
    mapping: String
}

"response of any mutation on the table \"smb.attributes\""
type smb_attributes_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_attributes!]!
}

"columns and relationships of \"smb.header\""
type smb_header {
    color: String!
    drawer_color: String!
    "An array relationship"
    header_translations(
        "distinct select on columns"
        distinct_on: [smb_header_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_translations_order_by!],
        "filter the rows returned"
        where: smb_header_translations_bool_exp
    ): [smb_header_translations!]!
    "An aggregated array relationship"
    header_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_header_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_translations_order_by!],
        "filter the rows returned"
        where: smb_header_translations_bool_exp
    ): smb_header_translations_aggregate!
    href: String
    id: bigint!
}

"aggregated selection of \"smb.header\""
type smb_header_aggregate {
    aggregate: smb_header_aggregate_fields
    nodes: [smb_header!]!
}

"aggregate fields of \"smb.header\""
type smb_header_aggregate_fields {
    avg: smb_header_avg_fields
    count(columns: [smb_header_select_column!], distinct: Boolean): Int
    max: smb_header_max_fields
    min: smb_header_min_fields
    stddev: smb_header_stddev_fields
    stddev_pop: smb_header_stddev_pop_fields
    stddev_samp: smb_header_stddev_samp_fields
    sum: smb_header_sum_fields
    var_pop: smb_header_var_pop_fields
    var_samp: smb_header_var_samp_fields
    variance: smb_header_variance_fields
}

"aggregate avg on columns"
type smb_header_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_header_max_fields {
    color: String
    drawer_color: String
    href: String
    id: bigint
}

"aggregate min on columns"
type smb_header_min_fields {
    color: String
    drawer_color: String
    href: String
    id: bigint
}

"response of any mutation on the table \"smb.header\""
type smb_header_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_header!]!
}

"aggregate stddev on columns"
type smb_header_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_header_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_header_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_header_sum_fields {
    id: bigint
}

"columns and relationships of \"smb.header_translations\""
type smb_header_translations {
    "An object relationship"
    header: smb_header!
    header_id: bigint!
    id: bigint!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    subtitle: String!
    title: String!
}

"aggregated selection of \"smb.header_translations\""
type smb_header_translations_aggregate {
    aggregate: smb_header_translations_aggregate_fields
    nodes: [smb_header_translations!]!
}

"aggregate fields of \"smb.header_translations\""
type smb_header_translations_aggregate_fields {
    avg: smb_header_translations_avg_fields
    count(columns: [smb_header_translations_select_column!], distinct: Boolean): Int
    max: smb_header_translations_max_fields
    min: smb_header_translations_min_fields
    stddev: smb_header_translations_stddev_fields
    stddev_pop: smb_header_translations_stddev_pop_fields
    stddev_samp: smb_header_translations_stddev_samp_fields
    sum: smb_header_translations_sum_fields
    var_pop: smb_header_translations_var_pop_fields
    var_samp: smb_header_translations_var_samp_fields
    variance: smb_header_translations_variance_fields
}

"aggregate avg on columns"
type smb_header_translations_avg_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate max on columns"
type smb_header_translations_max_fields {
    header_id: bigint
    id: bigint
    language_id: bigint
    subtitle: String
    title: String
}

"aggregate min on columns"
type smb_header_translations_min_fields {
    header_id: bigint
    id: bigint
    language_id: bigint
    subtitle: String
    title: String
}

"response of any mutation on the table \"smb.header_translations\""
type smb_header_translations_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_header_translations!]!
}

"aggregate stddev on columns"
type smb_header_translations_stddev_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate stddev_pop on columns"
type smb_header_translations_stddev_pop_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate stddev_samp on columns"
type smb_header_translations_stddev_samp_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate sum on columns"
type smb_header_translations_sum_fields {
    header_id: bigint
    id: bigint
    language_id: bigint
}

"aggregate var_pop on columns"
type smb_header_translations_var_pop_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate var_samp on columns"
type smb_header_translations_var_samp_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate variance on columns"
type smb_header_translations_variance_fields {
    header_id: Float
    id: Float
    language_id: Float
}

"aggregate var_pop on columns"
type smb_header_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_header_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_header_variance_fields {
    id: Float
}

"columns and relationships of \"smb.highlights\""
type smb_highlights {
    id: bigint!
    "An object relationship"
    object: smb_objects!
    object_id: bigint!
    "An object relationship"
    org_unit: smb_org_unit!
    org_unit_id: bigint!
}

"aggregated selection of \"smb.highlights\""
type smb_highlights_aggregate {
    aggregate: smb_highlights_aggregate_fields
    nodes: [smb_highlights!]!
}

"aggregate fields of \"smb.highlights\""
type smb_highlights_aggregate_fields {
    avg: smb_highlights_avg_fields
    count(columns: [smb_highlights_select_column!], distinct: Boolean): Int
    max: smb_highlights_max_fields
    min: smb_highlights_min_fields
    stddev: smb_highlights_stddev_fields
    stddev_pop: smb_highlights_stddev_pop_fields
    stddev_samp: smb_highlights_stddev_samp_fields
    sum: smb_highlights_sum_fields
    var_pop: smb_highlights_var_pop_fields
    var_samp: smb_highlights_var_samp_fields
    variance: smb_highlights_variance_fields
}

"aggregate avg on columns"
type smb_highlights_avg_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"aggregate max on columns"
type smb_highlights_max_fields {
    id: bigint
    object_id: bigint
    org_unit_id: bigint
}

"aggregate min on columns"
type smb_highlights_min_fields {
    id: bigint
    object_id: bigint
    org_unit_id: bigint
}

"response of any mutation on the table \"smb.highlights\""
type smb_highlights_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_highlights!]!
}

"aggregate stddev on columns"
type smb_highlights_stddev_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"aggregate stddev_pop on columns"
type smb_highlights_stddev_pop_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"aggregate stddev_samp on columns"
type smb_highlights_stddev_samp_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"aggregate sum on columns"
type smb_highlights_sum_fields {
    id: bigint
    object_id: bigint
    org_unit_id: bigint
}

"aggregate var_pop on columns"
type smb_highlights_var_pop_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"aggregate var_samp on columns"
type smb_highlights_var_samp_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"aggregate variance on columns"
type smb_highlights_variance_fields {
    id: Float
    object_id: Float
    org_unit_id: Float
}

"""

Keys that should be ignored by import from the mds.


columns and relationships of "smb.ignoreable_keys"
"""
type smb_ignoreable_keys {
    id: bigint!
    key: String!
}

"aggregated selection of \"smb.ignoreable_keys\""
type smb_ignoreable_keys_aggregate {
    aggregate: smb_ignoreable_keys_aggregate_fields
    nodes: [smb_ignoreable_keys!]!
}

"aggregate fields of \"smb.ignoreable_keys\""
type smb_ignoreable_keys_aggregate_fields {
    avg: smb_ignoreable_keys_avg_fields
    count(columns: [smb_ignoreable_keys_select_column!], distinct: Boolean): Int
    max: smb_ignoreable_keys_max_fields
    min: smb_ignoreable_keys_min_fields
    stddev: smb_ignoreable_keys_stddev_fields
    stddev_pop: smb_ignoreable_keys_stddev_pop_fields
    stddev_samp: smb_ignoreable_keys_stddev_samp_fields
    sum: smb_ignoreable_keys_sum_fields
    var_pop: smb_ignoreable_keys_var_pop_fields
    var_samp: smb_ignoreable_keys_var_samp_fields
    variance: smb_ignoreable_keys_variance_fields
}

"aggregate avg on columns"
type smb_ignoreable_keys_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_ignoreable_keys_max_fields {
    id: bigint
    key: String
}

"aggregate min on columns"
type smb_ignoreable_keys_min_fields {
    id: bigint
    key: String
}

"response of any mutation on the table \"smb.ignoreable_keys\""
type smb_ignoreable_keys_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_ignoreable_keys!]!
}

"aggregate stddev on columns"
type smb_ignoreable_keys_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_ignoreable_keys_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_ignoreable_keys_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_ignoreable_keys_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_ignoreable_keys_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_ignoreable_keys_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_ignoreable_keys_variance_fields {
    id: Float
}

"columns and relationships of \"smb.intro_slide_translations\""
type smb_intro_slide_translations {
    id: bigint!
    "An object relationship"
    intro_slide: smb_intro_slides!
    intro_slide_id: Int!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    title: String!
}

"aggregated selection of \"smb.intro_slide_translations\""
type smb_intro_slide_translations_aggregate {
    aggregate: smb_intro_slide_translations_aggregate_fields
    nodes: [smb_intro_slide_translations!]!
}

"aggregate fields of \"smb.intro_slide_translations\""
type smb_intro_slide_translations_aggregate_fields {
    avg: smb_intro_slide_translations_avg_fields
    count(columns: [smb_intro_slide_translations_select_column!], distinct: Boolean): Int
    max: smb_intro_slide_translations_max_fields
    min: smb_intro_slide_translations_min_fields
    stddev: smb_intro_slide_translations_stddev_fields
    stddev_pop: smb_intro_slide_translations_stddev_pop_fields
    stddev_samp: smb_intro_slide_translations_stddev_samp_fields
    sum: smb_intro_slide_translations_sum_fields
    var_pop: smb_intro_slide_translations_var_pop_fields
    var_samp: smb_intro_slide_translations_var_samp_fields
    variance: smb_intro_slide_translations_variance_fields
}

"aggregate avg on columns"
type smb_intro_slide_translations_avg_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"aggregate max on columns"
type smb_intro_slide_translations_max_fields {
    id: bigint
    intro_slide_id: Int
    language_id: bigint
    title: String
}

"aggregate min on columns"
type smb_intro_slide_translations_min_fields {
    id: bigint
    intro_slide_id: Int
    language_id: bigint
    title: String
}

"response of any mutation on the table \"smb.intro_slide_translations\""
type smb_intro_slide_translations_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_intro_slide_translations!]!
}

"aggregate stddev on columns"
type smb_intro_slide_translations_stddev_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"aggregate stddev_pop on columns"
type smb_intro_slide_translations_stddev_pop_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"aggregate stddev_samp on columns"
type smb_intro_slide_translations_stddev_samp_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"aggregate sum on columns"
type smb_intro_slide_translations_sum_fields {
    id: bigint
    intro_slide_id: Int
    language_id: bigint
}

"aggregate var_pop on columns"
type smb_intro_slide_translations_var_pop_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"aggregate var_samp on columns"
type smb_intro_slide_translations_var_samp_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"aggregate variance on columns"
type smb_intro_slide_translations_variance_fields {
    id: Float
    intro_slide_id: Float
    language_id: Float
}

"columns and relationships of \"smb.intro_slides\""
type smb_intro_slides {
    id: bigint!
    image: String!
    "An array relationship"
    intro_slide_translations(
        "distinct select on columns"
        distinct_on: [smb_intro_slide_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slide_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_slide_translations_bool_exp
    ): [smb_intro_slide_translations!]!
    "An aggregated array relationship"
    intro_slide_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_slide_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slide_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_slide_translations_bool_exp
    ): smb_intro_slide_translations_aggregate!
}

"aggregated selection of \"smb.intro_slides\""
type smb_intro_slides_aggregate {
    aggregate: smb_intro_slides_aggregate_fields
    nodes: [smb_intro_slides!]!
}

"aggregate fields of \"smb.intro_slides\""
type smb_intro_slides_aggregate_fields {
    avg: smb_intro_slides_avg_fields
    count(columns: [smb_intro_slides_select_column!], distinct: Boolean): Int
    max: smb_intro_slides_max_fields
    min: smb_intro_slides_min_fields
    stddev: smb_intro_slides_stddev_fields
    stddev_pop: smb_intro_slides_stddev_pop_fields
    stddev_samp: smb_intro_slides_stddev_samp_fields
    sum: smb_intro_slides_sum_fields
    var_pop: smb_intro_slides_var_pop_fields
    var_samp: smb_intro_slides_var_samp_fields
    variance: smb_intro_slides_variance_fields
}

"aggregate avg on columns"
type smb_intro_slides_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_intro_slides_max_fields {
    id: bigint
    image: String
}

"aggregate min on columns"
type smb_intro_slides_min_fields {
    id: bigint
    image: String
}

"response of any mutation on the table \"smb.intro_slides\""
type smb_intro_slides_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_intro_slides!]!
}

"aggregate stddev on columns"
type smb_intro_slides_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_intro_slides_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_intro_slides_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_intro_slides_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_intro_slides_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_intro_slides_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_intro_slides_variance_fields {
    id: Float
}

"columns and relationships of \"smb.intro_text_module_translations\""
type smb_intro_text_module_translations {
    content: String!
    id: bigint!
    "An object relationship"
    intro_text_module: smb_intro_text_modules!
    intro_text_module_id: Int!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    link_caption: String!
    subtitle: String!
    title: String!
}

"aggregated selection of \"smb.intro_text_module_translations\""
type smb_intro_text_module_translations_aggregate {
    aggregate: smb_intro_text_module_translations_aggregate_fields
    nodes: [smb_intro_text_module_translations!]!
}

"aggregate fields of \"smb.intro_text_module_translations\""
type smb_intro_text_module_translations_aggregate_fields {
    avg: smb_intro_text_module_translations_avg_fields
    count(columns: [smb_intro_text_module_translations_select_column!], distinct: Boolean): Int
    max: smb_intro_text_module_translations_max_fields
    min: smb_intro_text_module_translations_min_fields
    stddev: smb_intro_text_module_translations_stddev_fields
    stddev_pop: smb_intro_text_module_translations_stddev_pop_fields
    stddev_samp: smb_intro_text_module_translations_stddev_samp_fields
    sum: smb_intro_text_module_translations_sum_fields
    var_pop: smb_intro_text_module_translations_var_pop_fields
    var_samp: smb_intro_text_module_translations_var_samp_fields
    variance: smb_intro_text_module_translations_variance_fields
}

"aggregate avg on columns"
type smb_intro_text_module_translations_avg_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"aggregate max on columns"
type smb_intro_text_module_translations_max_fields {
    content: String
    id: bigint
    intro_text_module_id: Int
    language_id: bigint
    link_caption: String
    subtitle: String
    title: String
}

"aggregate min on columns"
type smb_intro_text_module_translations_min_fields {
    content: String
    id: bigint
    intro_text_module_id: Int
    language_id: bigint
    link_caption: String
    subtitle: String
    title: String
}

"response of any mutation on the table \"smb.intro_text_module_translations\""
type smb_intro_text_module_translations_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_intro_text_module_translations!]!
}

"aggregate stddev on columns"
type smb_intro_text_module_translations_stddev_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"aggregate stddev_pop on columns"
type smb_intro_text_module_translations_stddev_pop_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"aggregate stddev_samp on columns"
type smb_intro_text_module_translations_stddev_samp_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"aggregate sum on columns"
type smb_intro_text_module_translations_sum_fields {
    id: bigint
    intro_text_module_id: Int
    language_id: bigint
}

"aggregate var_pop on columns"
type smb_intro_text_module_translations_var_pop_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"aggregate var_samp on columns"
type smb_intro_text_module_translations_var_samp_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"aggregate variance on columns"
type smb_intro_text_module_translations_variance_fields {
    id: Float
    intro_text_module_id: Float
    language_id: Float
}

"columns and relationships of \"smb.intro_text_module_type\""
type smb_intro_text_module_type {
    comment: String!
    "An array relationship"
    intro_text_modules(
        "distinct select on columns"
        distinct_on: [smb_intro_text_modules_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_modules_order_by!],
        "filter the rows returned"
        where: smb_intro_text_modules_bool_exp
    ): [smb_intro_text_modules!]!
    "An aggregated array relationship"
    intro_text_modules_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_modules_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_modules_order_by!],
        "filter the rows returned"
        where: smb_intro_text_modules_bool_exp
    ): smb_intro_text_modules_aggregate!
    value: String!
}

"aggregated selection of \"smb.intro_text_module_type\""
type smb_intro_text_module_type_aggregate {
    aggregate: smb_intro_text_module_type_aggregate_fields
    nodes: [smb_intro_text_module_type!]!
}

"aggregate fields of \"smb.intro_text_module_type\""
type smb_intro_text_module_type_aggregate_fields {
    count(columns: [smb_intro_text_module_type_select_column!], distinct: Boolean): Int
    max: smb_intro_text_module_type_max_fields
    min: smb_intro_text_module_type_min_fields
}

"aggregate max on columns"
type smb_intro_text_module_type_max_fields {
    comment: String
    value: String
}

"aggregate min on columns"
type smb_intro_text_module_type_min_fields {
    comment: String
    value: String
}

"response of any mutation on the table \"smb.intro_text_module_type\""
type smb_intro_text_module_type_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_intro_text_module_type!]!
}

"columns and relationships of \"smb.intro_text_modules\""
type smb_intro_text_modules {
    id: bigint!
    "An array relationship"
    intro_text_module_translations(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_translations_bool_exp
    ): [smb_intro_text_module_translations!]!
    "An aggregated array relationship"
    intro_text_module_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_translations_bool_exp
    ): smb_intro_text_module_translations_aggregate!
    "An object relationship"
    intro_text_module_type: smb_intro_text_module_type!
    link: String
    module_background_color: String!
    module_type: smb_intro_text_module_type_enum!
    text_area_color: String!
    text_color: String!
    title_color: String!
}

"aggregated selection of \"smb.intro_text_modules\""
type smb_intro_text_modules_aggregate {
    aggregate: smb_intro_text_modules_aggregate_fields
    nodes: [smb_intro_text_modules!]!
}

"aggregate fields of \"smb.intro_text_modules\""
type smb_intro_text_modules_aggregate_fields {
    avg: smb_intro_text_modules_avg_fields
    count(columns: [smb_intro_text_modules_select_column!], distinct: Boolean): Int
    max: smb_intro_text_modules_max_fields
    min: smb_intro_text_modules_min_fields
    stddev: smb_intro_text_modules_stddev_fields
    stddev_pop: smb_intro_text_modules_stddev_pop_fields
    stddev_samp: smb_intro_text_modules_stddev_samp_fields
    sum: smb_intro_text_modules_sum_fields
    var_pop: smb_intro_text_modules_var_pop_fields
    var_samp: smb_intro_text_modules_var_samp_fields
    variance: smb_intro_text_modules_variance_fields
}

"aggregate avg on columns"
type smb_intro_text_modules_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_intro_text_modules_max_fields {
    id: bigint
    link: String
    module_background_color: String
    text_area_color: String
    text_color: String
    title_color: String
}

"aggregate min on columns"
type smb_intro_text_modules_min_fields {
    id: bigint
    link: String
    module_background_color: String
    text_area_color: String
    text_color: String
    title_color: String
}

"response of any mutation on the table \"smb.intro_text_modules\""
type smb_intro_text_modules_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_intro_text_modules!]!
}

"aggregate stddev on columns"
type smb_intro_text_modules_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_intro_text_modules_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_intro_text_modules_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_intro_text_modules_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_intro_text_modules_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_intro_text_modules_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_intro_text_modules_variance_fields {
    id: Float
}

"columns and relationships of \"smb.language\""
type smb_language {
    id: bigint!
    lang: String!
}

"aggregated selection of \"smb.language\""
type smb_language_aggregate {
    aggregate: smb_language_aggregate_fields
    nodes: [smb_language!]!
}

"aggregate fields of \"smb.language\""
type smb_language_aggregate_fields {
    avg: smb_language_avg_fields
    count(columns: [smb_language_select_column!], distinct: Boolean): Int
    max: smb_language_max_fields
    min: smb_language_min_fields
    stddev: smb_language_stddev_fields
    stddev_pop: smb_language_stddev_pop_fields
    stddev_samp: smb_language_stddev_samp_fields
    sum: smb_language_sum_fields
    var_pop: smb_language_var_pop_fields
    var_samp: smb_language_var_samp_fields
    variance: smb_language_variance_fields
}

"aggregate avg on columns"
type smb_language_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_language_max_fields {
    id: bigint
    lang: String
}

"aggregate min on columns"
type smb_language_min_fields {
    id: bigint
    lang: String
}

"response of any mutation on the table \"smb.language\""
type smb_language_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_language!]!
}

"aggregate stddev on columns"
type smb_language_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_language_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_language_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_language_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_language_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_language_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_language_variance_fields {
    id: Float
}

"columns and relationships of \"smb.licenses\""
type smb_licenses {
    id: bigint!
    key: String!
    "An array relationship"
    licenses_translations(
        "distinct select on columns"
        distinct_on: [smb_licenses_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_translation_order_by!],
        "filter the rows returned"
        where: smb_licenses_translation_bool_exp
    ): [smb_licenses_translation!]!
    "An aggregated array relationship"
    licenses_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_licenses_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_translation_order_by!],
        "filter the rows returned"
        where: smb_licenses_translation_bool_exp
    ): smb_licenses_translation_aggregate!
}

"aggregated selection of \"smb.licenses\""
type smb_licenses_aggregate {
    aggregate: smb_licenses_aggregate_fields
    nodes: [smb_licenses!]!
}

"aggregate fields of \"smb.licenses\""
type smb_licenses_aggregate_fields {
    avg: smb_licenses_avg_fields
    count(columns: [smb_licenses_select_column!], distinct: Boolean): Int
    max: smb_licenses_max_fields
    min: smb_licenses_min_fields
    stddev: smb_licenses_stddev_fields
    stddev_pop: smb_licenses_stddev_pop_fields
    stddev_samp: smb_licenses_stddev_samp_fields
    sum: smb_licenses_sum_fields
    var_pop: smb_licenses_var_pop_fields
    var_samp: smb_licenses_var_samp_fields
    variance: smb_licenses_variance_fields
}

"aggregate avg on columns"
type smb_licenses_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_licenses_max_fields {
    id: bigint
    key: String
}

"aggregate min on columns"
type smb_licenses_min_fields {
    id: bigint
    key: String
}

"response of any mutation on the table \"smb.licenses\""
type smb_licenses_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_licenses!]!
}

"aggregate stddev on columns"
type smb_licenses_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_licenses_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_licenses_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_licenses_sum_fields {
    id: bigint
}

"columns and relationships of \"smb.licenses_translation\""
type smb_licenses_translation {
    content: String!
    id: bigint!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    "An object relationship"
    license: smb_licenses!
    license_id: bigint!
}

"aggregated selection of \"smb.licenses_translation\""
type smb_licenses_translation_aggregate {
    aggregate: smb_licenses_translation_aggregate_fields
    nodes: [smb_licenses_translation!]!
}

"aggregate fields of \"smb.licenses_translation\""
type smb_licenses_translation_aggregate_fields {
    avg: smb_licenses_translation_avg_fields
    count(columns: [smb_licenses_translation_select_column!], distinct: Boolean): Int
    max: smb_licenses_translation_max_fields
    min: smb_licenses_translation_min_fields
    stddev: smb_licenses_translation_stddev_fields
    stddev_pop: smb_licenses_translation_stddev_pop_fields
    stddev_samp: smb_licenses_translation_stddev_samp_fields
    sum: smb_licenses_translation_sum_fields
    var_pop: smb_licenses_translation_var_pop_fields
    var_samp: smb_licenses_translation_var_samp_fields
    variance: smb_licenses_translation_variance_fields
}

"aggregate avg on columns"
type smb_licenses_translation_avg_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate max on columns"
type smb_licenses_translation_max_fields {
    content: String
    id: bigint
    language_id: bigint
    license_id: bigint
}

"aggregate min on columns"
type smb_licenses_translation_min_fields {
    content: String
    id: bigint
    language_id: bigint
    license_id: bigint
}

"response of any mutation on the table \"smb.licenses_translation\""
type smb_licenses_translation_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_licenses_translation!]!
}

"aggregate stddev on columns"
type smb_licenses_translation_stddev_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate stddev_pop on columns"
type smb_licenses_translation_stddev_pop_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate stddev_samp on columns"
type smb_licenses_translation_stddev_samp_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate sum on columns"
type smb_licenses_translation_sum_fields {
    id: bigint
    language_id: bigint
    license_id: bigint
}

"aggregate var_pop on columns"
type smb_licenses_translation_var_pop_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate var_samp on columns"
type smb_licenses_translation_var_samp_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate variance on columns"
type smb_licenses_translation_variance_fields {
    id: Float
    language_id: Float
    license_id: Float
}

"aggregate var_pop on columns"
type smb_licenses_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_licenses_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_licenses_variance_fields {
    id: Float
}

"""

objects of smb


columns and relationships of "smb.objects"
"""
type smb_objects {
    "An array relationship"
    attachments(
        "distinct select on columns"
        distinct_on: [smb_attachments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attachments_order_by!],
        "filter the rows returned"
        where: smb_attachments_bool_exp
    ): [smb_attachments!]!
    "An aggregated array relationship"
    attachments_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attachments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attachments_order_by!],
        "filter the rows returned"
        where: smb_attachments_bool_exp
    ): smb_attachments_aggregate!
    "An array relationship"
    attribute_translations(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): [smb_attribute_translations!]!
    "An aggregated array relationship"
    attribute_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): smb_attribute_translations_aggregate!
    created_at: timestamptz!
    "An array relationship"
    highlights(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): [smb_highlights!]!
    "An aggregated array relationship"
    highlights_aggregate(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): smb_highlights_aggregate!
    id: bigint!
    mds_id: String!
    "An array relationship"
    topics_objects(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): [smb_topics_objects!]!
    "An aggregated array relationship"
    topics_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): smb_topics_objects_aggregate!
    "An array relationship"
    tours_objects(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): [smb_tours_objects!]!
    "An aggregated array relationship"
    tours_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): smb_tours_objects_aggregate!
    updated_at: timestamptz!
}

"aggregated selection of \"smb.objects\""
type smb_objects_aggregate {
    aggregate: smb_objects_aggregate_fields
    nodes: [smb_objects!]!
}

"aggregate fields of \"smb.objects\""
type smb_objects_aggregate_fields {
    avg: smb_objects_avg_fields
    count(columns: [smb_objects_select_column!], distinct: Boolean): Int
    max: smb_objects_max_fields
    min: smb_objects_min_fields
    stddev: smb_objects_stddev_fields
    stddev_pop: smb_objects_stddev_pop_fields
    stddev_samp: smb_objects_stddev_samp_fields
    sum: smb_objects_sum_fields
    var_pop: smb_objects_var_pop_fields
    var_samp: smb_objects_var_samp_fields
    variance: smb_objects_variance_fields
}

"aggregate avg on columns"
type smb_objects_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_objects_max_fields {
    created_at: timestamptz
    id: bigint
    mds_id: String
    updated_at: timestamptz
}

"aggregate min on columns"
type smb_objects_min_fields {
    created_at: timestamptz
    id: bigint
    mds_id: String
    updated_at: timestamptz
}

"response of any mutation on the table \"smb.objects\""
type smb_objects_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_objects!]!
}

"aggregate stddev on columns"
type smb_objects_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_objects_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_objects_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_objects_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_objects_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_objects_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_objects_variance_fields {
    id: Float
}

"columns and relationships of \"smb.org_unit\""
type smb_org_unit {
    "An array relationship"
    highlights(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): [smb_highlights!]!
    "An aggregated array relationship"
    highlights_aggregate(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): smb_highlights_aggregate!
    id: bigint!
    name: String!
}

"aggregated selection of \"smb.org_unit\""
type smb_org_unit_aggregate {
    aggregate: smb_org_unit_aggregate_fields
    nodes: [smb_org_unit!]!
}

"aggregate fields of \"smb.org_unit\""
type smb_org_unit_aggregate_fields {
    avg: smb_org_unit_avg_fields
    count(columns: [smb_org_unit_select_column!], distinct: Boolean): Int
    max: smb_org_unit_max_fields
    min: smb_org_unit_min_fields
    stddev: smb_org_unit_stddev_fields
    stddev_pop: smb_org_unit_stddev_pop_fields
    stddev_samp: smb_org_unit_stddev_samp_fields
    sum: smb_org_unit_sum_fields
    var_pop: smb_org_unit_var_pop_fields
    var_samp: smb_org_unit_var_samp_fields
    variance: smb_org_unit_variance_fields
}

"aggregate avg on columns"
type smb_org_unit_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_org_unit_max_fields {
    id: bigint
    name: String
}

"aggregate min on columns"
type smb_org_unit_min_fields {
    id: bigint
    name: String
}

"response of any mutation on the table \"smb.org_unit\""
type smb_org_unit_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_org_unit!]!
}

"aggregate stddev on columns"
type smb_org_unit_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_org_unit_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_org_unit_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_org_unit_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_org_unit_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_org_unit_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_org_unit_variance_fields {
    id: Float
}

"columns and relationships of \"smb.search_suggestions\""
type smb_search_suggestions {
    counter: bigint
    lang: String
    value: String
}

"aggregated selection of \"smb.search_suggestions\""
type smb_search_suggestions_aggregate {
    aggregate: smb_search_suggestions_aggregate_fields
    nodes: [smb_search_suggestions!]!
}

"aggregate fields of \"smb.search_suggestions\""
type smb_search_suggestions_aggregate_fields {
    avg: smb_search_suggestions_avg_fields
    count(columns: [smb_search_suggestions_select_column!], distinct: Boolean): Int
    max: smb_search_suggestions_max_fields
    min: smb_search_suggestions_min_fields
    stddev: smb_search_suggestions_stddev_fields
    stddev_pop: smb_search_suggestions_stddev_pop_fields
    stddev_samp: smb_search_suggestions_stddev_samp_fields
    sum: smb_search_suggestions_sum_fields
    var_pop: smb_search_suggestions_var_pop_fields
    var_samp: smb_search_suggestions_var_samp_fields
    variance: smb_search_suggestions_variance_fields
}

"aggregate avg on columns"
type smb_search_suggestions_avg_fields {
    counter: Float
}

"aggregate max on columns"
type smb_search_suggestions_max_fields {
    counter: bigint
    lang: String
    value: String
}

"aggregate min on columns"
type smb_search_suggestions_min_fields {
    counter: bigint
    lang: String
    value: String
}

"aggregate stddev on columns"
type smb_search_suggestions_stddev_fields {
    counter: Float
}

"aggregate stddev_pop on columns"
type smb_search_suggestions_stddev_pop_fields {
    counter: Float
}

"aggregate stddev_samp on columns"
type smb_search_suggestions_stddev_samp_fields {
    counter: Float
}

"aggregate sum on columns"
type smb_search_suggestions_sum_fields {
    counter: bigint
}

"aggregate var_pop on columns"
type smb_search_suggestions_var_pop_fields {
    counter: Float
}

"aggregate var_samp on columns"
type smb_search_suggestions_var_samp_fields {
    counter: Float
}

"aggregate variance on columns"
type smb_search_suggestions_variance_fields {
    counter: Float
}

"columns and relationships of \"smb.sync_cycle_type\""
type smb_sync_cycle_type {
    comment: String
    "An array relationship"
    sync_cycles(
        "distinct select on columns"
        distinct_on: [smb_sync_cycles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycles_order_by!],
        "filter the rows returned"
        where: smb_sync_cycles_bool_exp
    ): [smb_sync_cycles!]!
    "An aggregated array relationship"
    sync_cycles_aggregate(
        "distinct select on columns"
        distinct_on: [smb_sync_cycles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycles_order_by!],
        "filter the rows returned"
        where: smb_sync_cycles_bool_exp
    ): smb_sync_cycles_aggregate!
    value: String!
}

"aggregated selection of \"smb.sync_cycle_type\""
type smb_sync_cycle_type_aggregate {
    aggregate: smb_sync_cycle_type_aggregate_fields
    nodes: [smb_sync_cycle_type!]!
}

"aggregate fields of \"smb.sync_cycle_type\""
type smb_sync_cycle_type_aggregate_fields {
    count(columns: [smb_sync_cycle_type_select_column!], distinct: Boolean): Int
    max: smb_sync_cycle_type_max_fields
    min: smb_sync_cycle_type_min_fields
}

"aggregate max on columns"
type smb_sync_cycle_type_max_fields {
    comment: String
    value: String
}

"aggregate min on columns"
type smb_sync_cycle_type_min_fields {
    comment: String
    value: String
}

"response of any mutation on the table \"smb.sync_cycle_type\""
type smb_sync_cycle_type_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_sync_cycle_type!]!
}

"columns and relationships of \"smb.sync_cycles\""
type smb_sync_cycles {
    debug_information: String!
    id: bigint!
    "An object relationship"
    sync_cycle_type: smb_sync_cycle_type!
    timestamp: timestamptz!
    type: smb_sync_cycle_type_enum!
}

"aggregated selection of \"smb.sync_cycles\""
type smb_sync_cycles_aggregate {
    aggregate: smb_sync_cycles_aggregate_fields
    nodes: [smb_sync_cycles!]!
}

"aggregate fields of \"smb.sync_cycles\""
type smb_sync_cycles_aggregate_fields {
    avg: smb_sync_cycles_avg_fields
    count(columns: [smb_sync_cycles_select_column!], distinct: Boolean): Int
    max: smb_sync_cycles_max_fields
    min: smb_sync_cycles_min_fields
    stddev: smb_sync_cycles_stddev_fields
    stddev_pop: smb_sync_cycles_stddev_pop_fields
    stddev_samp: smb_sync_cycles_stddev_samp_fields
    sum: smb_sync_cycles_sum_fields
    var_pop: smb_sync_cycles_var_pop_fields
    var_samp: smb_sync_cycles_var_samp_fields
    variance: smb_sync_cycles_variance_fields
}

"aggregate avg on columns"
type smb_sync_cycles_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_sync_cycles_max_fields {
    debug_information: String
    id: bigint
    timestamp: timestamptz
}

"aggregate min on columns"
type smb_sync_cycles_min_fields {
    debug_information: String
    id: bigint
    timestamp: timestamptz
}

"response of any mutation on the table \"smb.sync_cycles\""
type smb_sync_cycles_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_sync_cycles!]!
}

"aggregate stddev on columns"
type smb_sync_cycles_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_sync_cycles_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_sync_cycles_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_sync_cycles_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_sync_cycles_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_sync_cycles_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_sync_cycles_variance_fields {
    id: Float
}

"columns and relationships of \"smb.topics\""
type smb_topics {
    has_slide: Boolean!
    id: bigint!
    "An array relationship"
    objects(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): [smb_topics_objects!]!
    "An aggregated array relationship"
    objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): smb_topics_objects_aggregate!
    preview_image: String!
    "An array relationship"
    topics_translations(
        "distinct select on columns"
        distinct_on: [smb_topics_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_translations_order_by!],
        "filter the rows returned"
        where: smb_topics_translations_bool_exp
    ): [smb_topics_translations!]!
    "An aggregated array relationship"
    topics_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_translations_order_by!],
        "filter the rows returned"
        where: smb_topics_translations_bool_exp
    ): smb_topics_translations_aggregate!
}

"aggregated selection of \"smb.topics\""
type smb_topics_aggregate {
    aggregate: smb_topics_aggregate_fields
    nodes: [smb_topics!]!
}

"aggregate fields of \"smb.topics\""
type smb_topics_aggregate_fields {
    avg: smb_topics_avg_fields
    count(columns: [smb_topics_select_column!], distinct: Boolean): Int
    max: smb_topics_max_fields
    min: smb_topics_min_fields
    stddev: smb_topics_stddev_fields
    stddev_pop: smb_topics_stddev_pop_fields
    stddev_samp: smb_topics_stddev_samp_fields
    sum: smb_topics_sum_fields
    var_pop: smb_topics_var_pop_fields
    var_samp: smb_topics_var_samp_fields
    variance: smb_topics_variance_fields
}

"aggregate avg on columns"
type smb_topics_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_topics_max_fields {
    id: bigint
    preview_image: String
}

"aggregate min on columns"
type smb_topics_min_fields {
    id: bigint
    preview_image: String
}

"response of any mutation on the table \"smb.topics\""
type smb_topics_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_topics!]!
}

"columns and relationships of \"smb.topics_objects\""
type smb_topics_objects {
    created_at: timestamptz!
    id: bigint!
    "An object relationship"
    object: smb_objects!
    objects_id: bigint!
    "An object relationship"
    topic: smb_topics!
    topics_id: bigint!
    updated_at: timestamptz!
}

"aggregated selection of \"smb.topics_objects\""
type smb_topics_objects_aggregate {
    aggregate: smb_topics_objects_aggregate_fields
    nodes: [smb_topics_objects!]!
}

"aggregate fields of \"smb.topics_objects\""
type smb_topics_objects_aggregate_fields {
    avg: smb_topics_objects_avg_fields
    count(columns: [smb_topics_objects_select_column!], distinct: Boolean): Int
    max: smb_topics_objects_max_fields
    min: smb_topics_objects_min_fields
    stddev: smb_topics_objects_stddev_fields
    stddev_pop: smb_topics_objects_stddev_pop_fields
    stddev_samp: smb_topics_objects_stddev_samp_fields
    sum: smb_topics_objects_sum_fields
    var_pop: smb_topics_objects_var_pop_fields
    var_samp: smb_topics_objects_var_samp_fields
    variance: smb_topics_objects_variance_fields
}

"aggregate avg on columns"
type smb_topics_objects_avg_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate max on columns"
type smb_topics_objects_max_fields {
    created_at: timestamptz
    id: bigint
    objects_id: bigint
    topics_id: bigint
    updated_at: timestamptz
}

"aggregate min on columns"
type smb_topics_objects_min_fields {
    created_at: timestamptz
    id: bigint
    objects_id: bigint
    topics_id: bigint
    updated_at: timestamptz
}

"response of any mutation on the table \"smb.topics_objects\""
type smb_topics_objects_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_topics_objects!]!
}

"aggregate stddev on columns"
type smb_topics_objects_stddev_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate stddev_pop on columns"
type smb_topics_objects_stddev_pop_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate stddev_samp on columns"
type smb_topics_objects_stddev_samp_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate sum on columns"
type smb_topics_objects_sum_fields {
    id: bigint
    objects_id: bigint
    topics_id: bigint
}

"aggregate var_pop on columns"
type smb_topics_objects_var_pop_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate var_samp on columns"
type smb_topics_objects_var_samp_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate variance on columns"
type smb_topics_objects_variance_fields {
    id: Float
    objects_id: Float
    topics_id: Float
}

"aggregate stddev on columns"
type smb_topics_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_topics_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_topics_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_topics_sum_fields {
    id: bigint
}

"columns and relationships of \"smb.topics_translations\""
type smb_topics_translations {
    description: String
    id: bigint!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    title: String!
    "An object relationship"
    topic: smb_topics!
    topics_id: bigint!
}

"aggregated selection of \"smb.topics_translations\""
type smb_topics_translations_aggregate {
    aggregate: smb_topics_translations_aggregate_fields
    nodes: [smb_topics_translations!]!
}

"aggregate fields of \"smb.topics_translations\""
type smb_topics_translations_aggregate_fields {
    avg: smb_topics_translations_avg_fields
    count(columns: [smb_topics_translations_select_column!], distinct: Boolean): Int
    max: smb_topics_translations_max_fields
    min: smb_topics_translations_min_fields
    stddev: smb_topics_translations_stddev_fields
    stddev_pop: smb_topics_translations_stddev_pop_fields
    stddev_samp: smb_topics_translations_stddev_samp_fields
    sum: smb_topics_translations_sum_fields
    var_pop: smb_topics_translations_var_pop_fields
    var_samp: smb_topics_translations_var_samp_fields
    variance: smb_topics_translations_variance_fields
}

"aggregate avg on columns"
type smb_topics_translations_avg_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate max on columns"
type smb_topics_translations_max_fields {
    description: String
    id: bigint
    language_id: bigint
    title: String
    topics_id: bigint
}

"aggregate min on columns"
type smb_topics_translations_min_fields {
    description: String
    id: bigint
    language_id: bigint
    title: String
    topics_id: bigint
}

"response of any mutation on the table \"smb.topics_translations\""
type smb_topics_translations_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_topics_translations!]!
}

"aggregate stddev on columns"
type smb_topics_translations_stddev_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate stddev_pop on columns"
type smb_topics_translations_stddev_pop_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate stddev_samp on columns"
type smb_topics_translations_stddev_samp_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate sum on columns"
type smb_topics_translations_sum_fields {
    id: bigint
    language_id: bigint
    topics_id: bigint
}

"aggregate var_pop on columns"
type smb_topics_translations_var_pop_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate var_samp on columns"
type smb_topics_translations_var_samp_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate variance on columns"
type smb_topics_translations_variance_fields {
    id: Float
    language_id: Float
    topics_id: Float
}

"aggregate var_pop on columns"
type smb_topics_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_topics_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_topics_variance_fields {
    id: Float
}

"columns and relationships of \"smb.tours\""
type smb_tours {
    id: bigint!
    number: Int!
    preview_image: String!
    "An array relationship"
    tours_objects(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): [smb_tours_objects!]!
    "An aggregated array relationship"
    tours_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): smb_tours_objects_aggregate!
    "An array relationship"
    tours_translations(
        "distinct select on columns"
        distinct_on: [smb_tours_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_translation_bool_exp
    ): [smb_tours_translation!]!
    "An aggregated array relationship"
    tours_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_translation_bool_exp
    ): smb_tours_translation_aggregate!
}

"aggregated selection of \"smb.tours\""
type smb_tours_aggregate {
    aggregate: smb_tours_aggregate_fields
    nodes: [smb_tours!]!
}

"aggregate fields of \"smb.tours\""
type smb_tours_aggregate_fields {
    avg: smb_tours_avg_fields
    count(columns: [smb_tours_select_column!], distinct: Boolean): Int
    max: smb_tours_max_fields
    min: smb_tours_min_fields
    stddev: smb_tours_stddev_fields
    stddev_pop: smb_tours_stddev_pop_fields
    stddev_samp: smb_tours_stddev_samp_fields
    sum: smb_tours_sum_fields
    var_pop: smb_tours_var_pop_fields
    var_samp: smb_tours_var_samp_fields
    variance: smb_tours_variance_fields
}

"aggregate avg on columns"
type smb_tours_avg_fields {
    id: Float
    number: Float
}

"aggregate max on columns"
type smb_tours_max_fields {
    id: bigint
    number: Int
    preview_image: String
}

"aggregate min on columns"
type smb_tours_min_fields {
    id: bigint
    number: Int
    preview_image: String
}

"response of any mutation on the table \"smb.tours\""
type smb_tours_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_tours!]!
}

"columns and relationships of \"smb.tours_objects\""
type smb_tours_objects {
    id: bigint!
    "An object relationship"
    object: smb_objects!
    object_id: bigint!
    sequence: Int!
    "An object relationship"
    tour: smb_tours!
    tour_id: bigint!
    "An array relationship"
    tours_objects_translations(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_translation_bool_exp
    ): [smb_tours_objects_translation!]!
    "An aggregated array relationship"
    tours_objects_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_translation_bool_exp
    ): smb_tours_objects_translation_aggregate!
}

"aggregated selection of \"smb.tours_objects\""
type smb_tours_objects_aggregate {
    aggregate: smb_tours_objects_aggregate_fields
    nodes: [smb_tours_objects!]!
}

"aggregate fields of \"smb.tours_objects\""
type smb_tours_objects_aggregate_fields {
    avg: smb_tours_objects_avg_fields
    count(columns: [smb_tours_objects_select_column!], distinct: Boolean): Int
    max: smb_tours_objects_max_fields
    min: smb_tours_objects_min_fields
    stddev: smb_tours_objects_stddev_fields
    stddev_pop: smb_tours_objects_stddev_pop_fields
    stddev_samp: smb_tours_objects_stddev_samp_fields
    sum: smb_tours_objects_sum_fields
    var_pop: smb_tours_objects_var_pop_fields
    var_samp: smb_tours_objects_var_samp_fields
    variance: smb_tours_objects_variance_fields
}

"aggregate avg on columns"
type smb_tours_objects_avg_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate max on columns"
type smb_tours_objects_max_fields {
    id: bigint
    object_id: bigint
    sequence: Int
    tour_id: bigint
}

"aggregate min on columns"
type smb_tours_objects_min_fields {
    id: bigint
    object_id: bigint
    sequence: Int
    tour_id: bigint
}

"response of any mutation on the table \"smb.tours_objects\""
type smb_tours_objects_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_tours_objects!]!
}

"aggregate stddev on columns"
type smb_tours_objects_stddev_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate stddev_pop on columns"
type smb_tours_objects_stddev_pop_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate stddev_samp on columns"
type smb_tours_objects_stddev_samp_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate sum on columns"
type smb_tours_objects_sum_fields {
    id: bigint
    object_id: bigint
    sequence: Int
    tour_id: bigint
}

"columns and relationships of \"smb.tours_objects_translation\""
type smb_tours_objects_translation {
    abstract: String!
    description: String!
    id: bigint!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    tour_object_id: bigint!
    "An object relationship"
    tours_object: smb_tours_objects!
}

"aggregated selection of \"smb.tours_objects_translation\""
type smb_tours_objects_translation_aggregate {
    aggregate: smb_tours_objects_translation_aggregate_fields
    nodes: [smb_tours_objects_translation!]!
}

"aggregate fields of \"smb.tours_objects_translation\""
type smb_tours_objects_translation_aggregate_fields {
    avg: smb_tours_objects_translation_avg_fields
    count(columns: [smb_tours_objects_translation_select_column!], distinct: Boolean): Int
    max: smb_tours_objects_translation_max_fields
    min: smb_tours_objects_translation_min_fields
    stddev: smb_tours_objects_translation_stddev_fields
    stddev_pop: smb_tours_objects_translation_stddev_pop_fields
    stddev_samp: smb_tours_objects_translation_stddev_samp_fields
    sum: smb_tours_objects_translation_sum_fields
    var_pop: smb_tours_objects_translation_var_pop_fields
    var_samp: smb_tours_objects_translation_var_samp_fields
    variance: smb_tours_objects_translation_variance_fields
}

"aggregate avg on columns"
type smb_tours_objects_translation_avg_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate max on columns"
type smb_tours_objects_translation_max_fields {
    abstract: String
    description: String
    id: bigint
    language_id: bigint
    tour_object_id: bigint
}

"aggregate min on columns"
type smb_tours_objects_translation_min_fields {
    abstract: String
    description: String
    id: bigint
    language_id: bigint
    tour_object_id: bigint
}

"response of any mutation on the table \"smb.tours_objects_translation\""
type smb_tours_objects_translation_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_tours_objects_translation!]!
}

"aggregate stddev on columns"
type smb_tours_objects_translation_stddev_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate stddev_pop on columns"
type smb_tours_objects_translation_stddev_pop_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate stddev_samp on columns"
type smb_tours_objects_translation_stddev_samp_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate sum on columns"
type smb_tours_objects_translation_sum_fields {
    id: bigint
    language_id: bigint
    tour_object_id: bigint
}

"aggregate var_pop on columns"
type smb_tours_objects_translation_var_pop_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate var_samp on columns"
type smb_tours_objects_translation_var_samp_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate variance on columns"
type smb_tours_objects_translation_variance_fields {
    id: Float
    language_id: Float
    tour_object_id: Float
}

"aggregate var_pop on columns"
type smb_tours_objects_var_pop_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate var_samp on columns"
type smb_tours_objects_var_samp_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate variance on columns"
type smb_tours_objects_variance_fields {
    id: Float
    object_id: Float
    sequence: Float
    tour_id: Float
}

"aggregate stddev on columns"
type smb_tours_stddev_fields {
    id: Float
    number: Float
}

"aggregate stddev_pop on columns"
type smb_tours_stddev_pop_fields {
    id: Float
    number: Float
}

"aggregate stddev_samp on columns"
type smb_tours_stddev_samp_fields {
    id: Float
    number: Float
}

"aggregate sum on columns"
type smb_tours_sum_fields {
    id: bigint
    number: Int
}

"columns and relationships of \"smb.tours_translation\""
type smb_tours_translation {
    abstract: String!
    description: String!
    id: bigint!
    "An object relationship"
    language: smb_language!
    language_id: bigint!
    subtitle: String!
    title: String!
    "An object relationship"
    tour: smb_tours!
    tour_id: bigint!
}

"aggregated selection of \"smb.tours_translation\""
type smb_tours_translation_aggregate {
    aggregate: smb_tours_translation_aggregate_fields
    nodes: [smb_tours_translation!]!
}

"aggregate fields of \"smb.tours_translation\""
type smb_tours_translation_aggregate_fields {
    avg: smb_tours_translation_avg_fields
    count(columns: [smb_tours_translation_select_column!], distinct: Boolean): Int
    max: smb_tours_translation_max_fields
    min: smb_tours_translation_min_fields
    stddev: smb_tours_translation_stddev_fields
    stddev_pop: smb_tours_translation_stddev_pop_fields
    stddev_samp: smb_tours_translation_stddev_samp_fields
    sum: smb_tours_translation_sum_fields
    var_pop: smb_tours_translation_var_pop_fields
    var_samp: smb_tours_translation_var_samp_fields
    variance: smb_tours_translation_variance_fields
}

"aggregate avg on columns"
type smb_tours_translation_avg_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate max on columns"
type smb_tours_translation_max_fields {
    abstract: String
    description: String
    id: bigint
    language_id: bigint
    subtitle: String
    title: String
    tour_id: bigint
}

"aggregate min on columns"
type smb_tours_translation_min_fields {
    abstract: String
    description: String
    id: bigint
    language_id: bigint
    subtitle: String
    title: String
    tour_id: bigint
}

"response of any mutation on the table \"smb.tours_translation\""
type smb_tours_translation_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_tours_translation!]!
}

"aggregate stddev on columns"
type smb_tours_translation_stddev_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate stddev_pop on columns"
type smb_tours_translation_stddev_pop_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate stddev_samp on columns"
type smb_tours_translation_stddev_samp_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate sum on columns"
type smb_tours_translation_sum_fields {
    id: bigint
    language_id: bigint
    tour_id: bigint
}

"aggregate var_pop on columns"
type smb_tours_translation_var_pop_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate var_samp on columns"
type smb_tours_translation_var_samp_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate variance on columns"
type smb_tours_translation_variance_fields {
    id: Float
    language_id: Float
    tour_id: Float
}

"aggregate var_pop on columns"
type smb_tours_var_pop_fields {
    id: Float
    number: Float
}

"aggregate var_samp on columns"
type smb_tours_var_samp_fields {
    id: Float
    number: Float
}

"aggregate variance on columns"
type smb_tours_variance_fields {
    id: Float
    number: Float
}

"columns and relationships of \"smb.user\""
type smb_user {
    email: String!
    id: uuid!
    password: String!
    role_id: Int
    "An object relationship"
    user_role: smb_user_role
}

"aggregated selection of \"smb.user\""
type smb_user_aggregate {
    aggregate: smb_user_aggregate_fields
    nodes: [smb_user!]!
}

"aggregate fields of \"smb.user\""
type smb_user_aggregate_fields {
    avg: smb_user_avg_fields
    count(columns: [smb_user_select_column!], distinct: Boolean): Int
    max: smb_user_max_fields
    min: smb_user_min_fields
    stddev: smb_user_stddev_fields
    stddev_pop: smb_user_stddev_pop_fields
    stddev_samp: smb_user_stddev_samp_fields
    sum: smb_user_sum_fields
    var_pop: smb_user_var_pop_fields
    var_samp: smb_user_var_samp_fields
    variance: smb_user_variance_fields
}

"aggregate avg on columns"
type smb_user_avg_fields {
    role_id: Float
}

"aggregate max on columns"
type smb_user_max_fields {
    email: String
    id: uuid
    password: String
    role_id: Int
}

"aggregate min on columns"
type smb_user_min_fields {
    email: String
    id: uuid
    password: String
    role_id: Int
}

"response of any mutation on the table \"smb.user\""
type smb_user_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_user!]!
}

"columns and relationships of \"smb.user_role\""
type smb_user_role {
    id: bigint!
    role: String!
}

"aggregated selection of \"smb.user_role\""
type smb_user_role_aggregate {
    aggregate: smb_user_role_aggregate_fields
    nodes: [smb_user_role!]!
}

"aggregate fields of \"smb.user_role\""
type smb_user_role_aggregate_fields {
    avg: smb_user_role_avg_fields
    count(columns: [smb_user_role_select_column!], distinct: Boolean): Int
    max: smb_user_role_max_fields
    min: smb_user_role_min_fields
    stddev: smb_user_role_stddev_fields
    stddev_pop: smb_user_role_stddev_pop_fields
    stddev_samp: smb_user_role_stddev_samp_fields
    sum: smb_user_role_sum_fields
    var_pop: smb_user_role_var_pop_fields
    var_samp: smb_user_role_var_samp_fields
    variance: smb_user_role_variance_fields
}

"aggregate avg on columns"
type smb_user_role_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_user_role_max_fields {
    id: bigint
    role: String
}

"aggregate min on columns"
type smb_user_role_min_fields {
    id: bigint
    role: String
}

"response of any mutation on the table \"smb.user_role\""
type smb_user_role_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [smb_user_role!]!
}

"aggregate stddev on columns"
type smb_user_role_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_user_role_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_user_role_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_user_role_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_user_role_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_user_role_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_user_role_variance_fields {
    id: Float
}

"aggregate stddev on columns"
type smb_user_stddev_fields {
    role_id: Float
}

"aggregate stddev_pop on columns"
type smb_user_stddev_pop_fields {
    role_id: Float
}

"aggregate stddev_samp on columns"
type smb_user_stddev_samp_fields {
    role_id: Float
}

"aggregate sum on columns"
type smb_user_sum_fields {
    role_id: Int
}

"aggregate var_pop on columns"
type smb_user_var_pop_fields {
    role_id: Float
}

"aggregate var_samp on columns"
type smb_user_var_samp_fields {
    role_id: Float
}

"aggregate variance on columns"
type smb_user_variance_fields {
    role_id: Float
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"smb.attachments\""
    smb_attachments(
        "distinct select on columns"
        distinct_on: [smb_attachments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attachments_order_by!],
        "filter the rows returned"
        where: smb_attachments_bool_exp
    ): [smb_attachments!]!
    "fetch aggregated fields from the table: \"smb.attachments\""
    smb_attachments_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attachments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attachments_order_by!],
        "filter the rows returned"
        where: smb_attachments_bool_exp
    ): smb_attachments_aggregate!
    "fetch data from the table: \"smb.attachments\" using primary key columns"
    smb_attachments_by_pk(id: bigint!): smb_attachments
    "execute function \"smb.attribute_search_suggestions\" which returns \"smb.search_suggestions\""
    smb_attribute_search_suggestions(
        "input parameters for function \"smb.attribute_search_suggestions\""
        args: smb_attribute_search_suggestions_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): [smb_search_suggestions!]!
    "execute function \"smb.attribute_search_suggestions\" and query aggregates on result of table type \"smb.search_suggestions\""
    smb_attribute_search_suggestions_aggregate(
        "input parameters for function \"smb.attribute_search_suggestions\""
        args: smb_attribute_search_suggestions_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): smb_search_suggestions_aggregate!
    "fetch data from the table: \"smb.attribute_translations\""
    smb_attribute_translations(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): [smb_attribute_translations!]!
    "fetch aggregated fields from the table: \"smb.attribute_translations\""
    smb_attribute_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attribute_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attribute_translations_order_by!],
        "filter the rows returned"
        where: smb_attribute_translations_bool_exp
    ): smb_attribute_translations_aggregate!
    "fetch data from the table: \"smb.attribute_translations\" using primary key columns"
    smb_attribute_translations_by_pk(id: bigint!): smb_attribute_translations
    "fetch data from the table: \"smb.attributes\""
    smb_attributes(
        "distinct select on columns"
        distinct_on: [smb_attributes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attributes_order_by!],
        "filter the rows returned"
        where: smb_attributes_bool_exp
    ): [smb_attributes!]!
    "fetch aggregated fields from the table: \"smb.attributes\""
    smb_attributes_aggregate(
        "distinct select on columns"
        distinct_on: [smb_attributes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_attributes_order_by!],
        "filter the rows returned"
        where: smb_attributes_bool_exp
    ): smb_attributes_aggregate!
    "fetch data from the table: \"smb.attributes\" using primary key columns"
    smb_attributes_by_pk(key: String!): smb_attributes
    "execute function \"smb.autocomplete_search\" which returns \"smb.search_suggestions\""
    smb_autocomplete_search(
        "input parameters for function \"smb.autocomplete_search\""
        args: smb_autocomplete_search_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): [smb_search_suggestions!]!
    "execute function \"smb.autocomplete_search\" and query aggregates on result of table type \"smb.search_suggestions\""
    smb_autocomplete_search_aggregate(
        "input parameters for function \"smb.autocomplete_search\""
        args: smb_autocomplete_search_args!,
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): smb_search_suggestions_aggregate!
    "execute function \"smb.filter_objects\" which returns \"smb.objects\""
    smb_filter_objects(
        "input parameters for function \"smb.filter_objects\""
        args: smb_filter_objects_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "execute function \"smb.filter_objects\" and query aggregates on result of table type \"smb.objects\""
    smb_filter_objects_aggregate(
        "input parameters for function \"smb.filter_objects\""
        args: smb_filter_objects_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "fetch data from the table: \"smb.header\""
    smb_header(
        "distinct select on columns"
        distinct_on: [smb_header_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_order_by!],
        "filter the rows returned"
        where: smb_header_bool_exp
    ): [smb_header!]!
    "fetch aggregated fields from the table: \"smb.header\""
    smb_header_aggregate(
        "distinct select on columns"
        distinct_on: [smb_header_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_order_by!],
        "filter the rows returned"
        where: smb_header_bool_exp
    ): smb_header_aggregate!
    "fetch data from the table: \"smb.header\" using primary key columns"
    smb_header_by_pk(id: bigint!): smb_header
    "fetch data from the table: \"smb.header_translations\""
    smb_header_translations(
        "distinct select on columns"
        distinct_on: [smb_header_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_translations_order_by!],
        "filter the rows returned"
        where: smb_header_translations_bool_exp
    ): [smb_header_translations!]!
    "fetch aggregated fields from the table: \"smb.header_translations\""
    smb_header_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_header_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_header_translations_order_by!],
        "filter the rows returned"
        where: smb_header_translations_bool_exp
    ): smb_header_translations_aggregate!
    "fetch data from the table: \"smb.header_translations\" using primary key columns"
    smb_header_translations_by_pk(id: bigint!): smb_header_translations
    "fetch data from the table: \"smb.highlights\""
    smb_highlights(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): [smb_highlights!]!
    "fetch aggregated fields from the table: \"smb.highlights\""
    smb_highlights_aggregate(
        "distinct select on columns"
        distinct_on: [smb_highlights_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_highlights_order_by!],
        "filter the rows returned"
        where: smb_highlights_bool_exp
    ): smb_highlights_aggregate!
    "fetch data from the table: \"smb.highlights\" using primary key columns"
    smb_highlights_by_pk(id: bigint!): smb_highlights
    "fetch data from the table: \"smb.ignoreable_keys\""
    smb_ignoreable_keys(
        "distinct select on columns"
        distinct_on: [smb_ignoreable_keys_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_ignoreable_keys_order_by!],
        "filter the rows returned"
        where: smb_ignoreable_keys_bool_exp
    ): [smb_ignoreable_keys!]!
    "fetch aggregated fields from the table: \"smb.ignoreable_keys\""
    smb_ignoreable_keys_aggregate(
        "distinct select on columns"
        distinct_on: [smb_ignoreable_keys_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_ignoreable_keys_order_by!],
        "filter the rows returned"
        where: smb_ignoreable_keys_bool_exp
    ): smb_ignoreable_keys_aggregate!
    "fetch data from the table: \"smb.ignoreable_keys\" using primary key columns"
    smb_ignoreable_keys_by_pk(id: bigint!): smb_ignoreable_keys
    "fetch data from the table: \"smb.intro_slide_translations\""
    smb_intro_slide_translations(
        "distinct select on columns"
        distinct_on: [smb_intro_slide_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slide_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_slide_translations_bool_exp
    ): [smb_intro_slide_translations!]!
    "fetch aggregated fields from the table: \"smb.intro_slide_translations\""
    smb_intro_slide_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_slide_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slide_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_slide_translations_bool_exp
    ): smb_intro_slide_translations_aggregate!
    "fetch data from the table: \"smb.intro_slide_translations\" using primary key columns"
    smb_intro_slide_translations_by_pk(id: bigint!): smb_intro_slide_translations
    "fetch data from the table: \"smb.intro_slides\""
    smb_intro_slides(
        "distinct select on columns"
        distinct_on: [smb_intro_slides_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slides_order_by!],
        "filter the rows returned"
        where: smb_intro_slides_bool_exp
    ): [smb_intro_slides!]!
    "fetch aggregated fields from the table: \"smb.intro_slides\""
    smb_intro_slides_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_slides_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_slides_order_by!],
        "filter the rows returned"
        where: smb_intro_slides_bool_exp
    ): smb_intro_slides_aggregate!
    "fetch data from the table: \"smb.intro_slides\" using primary key columns"
    smb_intro_slides_by_pk(id: bigint!): smb_intro_slides
    "fetch data from the table: \"smb.intro_text_module_translations\""
    smb_intro_text_module_translations(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_translations_bool_exp
    ): [smb_intro_text_module_translations!]!
    "fetch aggregated fields from the table: \"smb.intro_text_module_translations\""
    smb_intro_text_module_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_translations_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_translations_bool_exp
    ): smb_intro_text_module_translations_aggregate!
    "fetch data from the table: \"smb.intro_text_module_translations\" using primary key columns"
    smb_intro_text_module_translations_by_pk(id: bigint!): smb_intro_text_module_translations
    "fetch data from the table: \"smb.intro_text_module_type\""
    smb_intro_text_module_type(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_type_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_type_bool_exp
    ): [smb_intro_text_module_type!]!
    "fetch aggregated fields from the table: \"smb.intro_text_module_type\""
    smb_intro_text_module_type_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_module_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_module_type_order_by!],
        "filter the rows returned"
        where: smb_intro_text_module_type_bool_exp
    ): smb_intro_text_module_type_aggregate!
    "fetch data from the table: \"smb.intro_text_module_type\" using primary key columns"
    smb_intro_text_module_type_by_pk(value: String!): smb_intro_text_module_type
    "fetch data from the table: \"smb.intro_text_modules\""
    smb_intro_text_modules(
        "distinct select on columns"
        distinct_on: [smb_intro_text_modules_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_modules_order_by!],
        "filter the rows returned"
        where: smb_intro_text_modules_bool_exp
    ): [smb_intro_text_modules!]!
    "fetch aggregated fields from the table: \"smb.intro_text_modules\""
    smb_intro_text_modules_aggregate(
        "distinct select on columns"
        distinct_on: [smb_intro_text_modules_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_intro_text_modules_order_by!],
        "filter the rows returned"
        where: smb_intro_text_modules_bool_exp
    ): smb_intro_text_modules_aggregate!
    "fetch data from the table: \"smb.intro_text_modules\" using primary key columns"
    smb_intro_text_modules_by_pk(id: bigint!): smb_intro_text_modules
    "fetch data from the table: \"smb.language\""
    smb_language(
        "distinct select on columns"
        distinct_on: [smb_language_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_language_order_by!],
        "filter the rows returned"
        where: smb_language_bool_exp
    ): [smb_language!]!
    "fetch aggregated fields from the table: \"smb.language\""
    smb_language_aggregate(
        "distinct select on columns"
        distinct_on: [smb_language_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_language_order_by!],
        "filter the rows returned"
        where: smb_language_bool_exp
    ): smb_language_aggregate!
    "fetch data from the table: \"smb.language\" using primary key columns"
    smb_language_by_pk(id: bigint!): smb_language
    "fetch data from the table: \"smb.licenses\""
    smb_licenses(
        "distinct select on columns"
        distinct_on: [smb_licenses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_order_by!],
        "filter the rows returned"
        where: smb_licenses_bool_exp
    ): [smb_licenses!]!
    "fetch aggregated fields from the table: \"smb.licenses\""
    smb_licenses_aggregate(
        "distinct select on columns"
        distinct_on: [smb_licenses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_order_by!],
        "filter the rows returned"
        where: smb_licenses_bool_exp
    ): smb_licenses_aggregate!
    "fetch data from the table: \"smb.licenses\" using primary key columns"
    smb_licenses_by_pk(id: bigint!): smb_licenses
    "fetch data from the table: \"smb.licenses_translation\""
    smb_licenses_translation(
        "distinct select on columns"
        distinct_on: [smb_licenses_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_translation_order_by!],
        "filter the rows returned"
        where: smb_licenses_translation_bool_exp
    ): [smb_licenses_translation!]!
    "fetch aggregated fields from the table: \"smb.licenses_translation\""
    smb_licenses_translation_aggregate(
        "distinct select on columns"
        distinct_on: [smb_licenses_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_licenses_translation_order_by!],
        "filter the rows returned"
        where: smb_licenses_translation_bool_exp
    ): smb_licenses_translation_aggregate!
    "fetch data from the table: \"smb.licenses_translation\" using primary key columns"
    smb_licenses_translation_by_pk(id: bigint!): smb_licenses_translation
    "fetch data from the table: \"smb.objects\""
    smb_objects(
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "fetch aggregated fields from the table: \"smb.objects\""
    smb_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "fetch data from the table: \"smb.objects\" using primary key columns"
    smb_objects_by_pk(id: bigint!): smb_objects
    "fetch data from the table: \"smb.org_unit\""
    smb_org_unit(
        "distinct select on columns"
        distinct_on: [smb_org_unit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_org_unit_order_by!],
        "filter the rows returned"
        where: smb_org_unit_bool_exp
    ): [smb_org_unit!]!
    "fetch aggregated fields from the table: \"smb.org_unit\""
    smb_org_unit_aggregate(
        "distinct select on columns"
        distinct_on: [smb_org_unit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_org_unit_order_by!],
        "filter the rows returned"
        where: smb_org_unit_bool_exp
    ): smb_org_unit_aggregate!
    "fetch data from the table: \"smb.org_unit\" using primary key columns"
    smb_org_unit_by_pk(id: bigint!): smb_org_unit
    "execute function \"smb.search_object\" which returns \"smb.objects\""
    smb_search_object(
        "input parameters for function \"smb.search_object\""
        args: smb_search_object_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "execute function \"smb.search_object\" and query aggregates on result of table type \"smb.objects\""
    smb_search_object_aggregate(
        "input parameters for function \"smb.search_object\""
        args: smb_search_object_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "execute function \"smb.search_object_aggregate\" and query aggregates on result of table type \"smb.objects\""
    smb_search_object_aggregate_aggregate(
        "input parameters for function \"smb.search_object_aggregate\""
        args: smb_search_object_aggregate_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "execute function \"smb.search_object_combined\" which returns \"smb.objects\""
    smb_search_object_combined(
        "input parameters for function \"smb.search_object_combined\""
        args: smb_search_object_combined_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): [smb_objects!]!
    "execute function \"smb.search_object_combined\" and query aggregates on result of table type \"smb.objects\""
    smb_search_object_combined_aggregate(
        "input parameters for function \"smb.search_object_combined\""
        args: smb_search_object_combined_args!,
        "distinct select on columns"
        distinct_on: [smb_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_objects_order_by!],
        "filter the rows returned"
        where: smb_objects_bool_exp
    ): smb_objects_aggregate!
    "fetch data from the table: \"smb.search_suggestions\""
    smb_search_suggestions(
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): [smb_search_suggestions!]!
    "fetch aggregated fields from the table: \"smb.search_suggestions\""
    smb_search_suggestions_aggregate(
        "distinct select on columns"
        distinct_on: [smb_search_suggestions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_search_suggestions_order_by!],
        "filter the rows returned"
        where: smb_search_suggestions_bool_exp
    ): smb_search_suggestions_aggregate!
    "fetch data from the table: \"smb.sync_cycle_type\""
    smb_sync_cycle_type(
        "distinct select on columns"
        distinct_on: [smb_sync_cycle_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycle_type_order_by!],
        "filter the rows returned"
        where: smb_sync_cycle_type_bool_exp
    ): [smb_sync_cycle_type!]!
    "fetch aggregated fields from the table: \"smb.sync_cycle_type\""
    smb_sync_cycle_type_aggregate(
        "distinct select on columns"
        distinct_on: [smb_sync_cycle_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycle_type_order_by!],
        "filter the rows returned"
        where: smb_sync_cycle_type_bool_exp
    ): smb_sync_cycle_type_aggregate!
    "fetch data from the table: \"smb.sync_cycle_type\" using primary key columns"
    smb_sync_cycle_type_by_pk(value: String!): smb_sync_cycle_type
    "fetch data from the table: \"smb.sync_cycles\""
    smb_sync_cycles(
        "distinct select on columns"
        distinct_on: [smb_sync_cycles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycles_order_by!],
        "filter the rows returned"
        where: smb_sync_cycles_bool_exp
    ): [smb_sync_cycles!]!
    "fetch aggregated fields from the table: \"smb.sync_cycles\""
    smb_sync_cycles_aggregate(
        "distinct select on columns"
        distinct_on: [smb_sync_cycles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_sync_cycles_order_by!],
        "filter the rows returned"
        where: smb_sync_cycles_bool_exp
    ): smb_sync_cycles_aggregate!
    "fetch data from the table: \"smb.sync_cycles\" using primary key columns"
    smb_sync_cycles_by_pk(id: bigint!): smb_sync_cycles
    "fetch data from the table: \"smb.topics\""
    smb_topics(
        "distinct select on columns"
        distinct_on: [smb_topics_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_order_by!],
        "filter the rows returned"
        where: smb_topics_bool_exp
    ): [smb_topics!]!
    "fetch aggregated fields from the table: \"smb.topics\""
    smb_topics_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_order_by!],
        "filter the rows returned"
        where: smb_topics_bool_exp
    ): smb_topics_aggregate!
    "fetch data from the table: \"smb.topics\" using primary key columns"
    smb_topics_by_pk(id: bigint!): smb_topics
    "fetch data from the table: \"smb.topics_objects\""
    smb_topics_objects(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): [smb_topics_objects!]!
    "fetch aggregated fields from the table: \"smb.topics_objects\""
    smb_topics_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_objects_order_by!],
        "filter the rows returned"
        where: smb_topics_objects_bool_exp
    ): smb_topics_objects_aggregate!
    "fetch data from the table: \"smb.topics_objects\" using primary key columns"
    smb_topics_objects_by_pk(id: bigint!): smb_topics_objects
    "fetch data from the table: \"smb.topics_translations\""
    smb_topics_translations(
        "distinct select on columns"
        distinct_on: [smb_topics_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_translations_order_by!],
        "filter the rows returned"
        where: smb_topics_translations_bool_exp
    ): [smb_topics_translations!]!
    "fetch aggregated fields from the table: \"smb.topics_translations\""
    smb_topics_translations_aggregate(
        "distinct select on columns"
        distinct_on: [smb_topics_translations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_topics_translations_order_by!],
        "filter the rows returned"
        where: smb_topics_translations_bool_exp
    ): smb_topics_translations_aggregate!
    "fetch data from the table: \"smb.topics_translations\" using primary key columns"
    smb_topics_translations_by_pk(id: bigint!): smb_topics_translations
    "fetch data from the table: \"smb.tours\""
    smb_tours(
        "distinct select on columns"
        distinct_on: [smb_tours_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_order_by!],
        "filter the rows returned"
        where: smb_tours_bool_exp
    ): [smb_tours!]!
    "fetch aggregated fields from the table: \"smb.tours\""
    smb_tours_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_order_by!],
        "filter the rows returned"
        where: smb_tours_bool_exp
    ): smb_tours_aggregate!
    "fetch data from the table: \"smb.tours\" using primary key columns"
    smb_tours_by_pk(id: bigint!): smb_tours
    "fetch data from the table: \"smb.tours_objects\""
    smb_tours_objects(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): [smb_tours_objects!]!
    "fetch aggregated fields from the table: \"smb.tours_objects\""
    smb_tours_objects_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_bool_exp
    ): smb_tours_objects_aggregate!
    "fetch data from the table: \"smb.tours_objects\" using primary key columns"
    smb_tours_objects_by_pk(id: bigint!): smb_tours_objects
    "fetch data from the table: \"smb.tours_objects_translation\""
    smb_tours_objects_translation(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_translation_bool_exp
    ): [smb_tours_objects_translation!]!
    "fetch aggregated fields from the table: \"smb.tours_objects_translation\""
    smb_tours_objects_translation_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_objects_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_objects_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_objects_translation_bool_exp
    ): smb_tours_objects_translation_aggregate!
    "fetch data from the table: \"smb.tours_objects_translation\" using primary key columns"
    smb_tours_objects_translation_by_pk(id: bigint!): smb_tours_objects_translation
    "fetch data from the table: \"smb.tours_translation\""
    smb_tours_translation(
        "distinct select on columns"
        distinct_on: [smb_tours_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_translation_bool_exp
    ): [smb_tours_translation!]!
    "fetch aggregated fields from the table: \"smb.tours_translation\""
    smb_tours_translation_aggregate(
        "distinct select on columns"
        distinct_on: [smb_tours_translation_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_tours_translation_order_by!],
        "filter the rows returned"
        where: smb_tours_translation_bool_exp
    ): smb_tours_translation_aggregate!
    "fetch data from the table: \"smb.tours_translation\" using primary key columns"
    smb_tours_translation_by_pk(id: bigint!): smb_tours_translation
    "fetch data from the table: \"smb.user\""
    smb_user(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): [smb_user!]!
    "fetch aggregated fields from the table: \"smb.user\""
    smb_user_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): smb_user_aggregate!
    "fetch data from the table: \"smb.user\" using primary key columns"
    smb_user_by_pk(id: uuid!): smb_user
    "fetch data from the table: \"smb.user_role\""
    smb_user_role(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): [smb_user_role!]!
    "fetch aggregated fields from the table: \"smb.user_role\""
    smb_user_role_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): smb_user_role_aggregate!
    "fetch data from the table: \"smb.user_role\" using primary key columns"
    smb_user_role_by_pk(id: bigint!): smb_user_role
}

"column ordering options"
enum order_by {
    "in the ascending order, nulls last"
    asc
    "in the ascending order, nulls first"
    asc_nulls_first
    "in the ascending order, nulls last"
    asc_nulls_last
    "in the descending order, nulls first"
    desc
    "in the descending order, nulls first"
    desc_nulls_first
    "in the descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"smb.attachments\""
enum smb_attachments_constraint {
    "unique or primary key constraint"
    attachments_attachment_key
    "unique or primary key constraint"
    attachments_pkey
}

"select columns of table \"smb.attachments\""
enum smb_attachments_select_column {
    "column name"
    attachment
    "column name"
    id
    "column name"
    object_id
    "column name"
    primary
}

"update columns of table \"smb.attachments\""
enum smb_attachments_update_column {
    "column name"
    attachment
    "column name"
    id
    "column name"
    object_id
    "column name"
    primary
}

"unique or primary key constraints on table \"smb.attribute_translations\""
enum smb_attribute_translations_constraint {
    "unique or primary key constraint"
    attribute_translations_pkey
}

"select columns of table \"smb.attribute_translations\""
enum smb_attribute_translations_select_column {
    "column name"
    attribute_key
    "column name"
    fq_key
    "column name"
    id
    "column name"
    language_id
    "column name"
    object_id
    "column name"
    value
}

"update columns of table \"smb.attribute_translations\""
enum smb_attribute_translations_update_column {
    "column name"
    attribute_key
    "column name"
    fq_key
    "column name"
    id
    "column name"
    language_id
    "column name"
    object_id
    "column name"
    value
}

"unique or primary key constraints on table \"smb.attributes\""
enum smb_attributes_constraint {
    "unique or primary key constraint"
    attributes_pkey
}

"select columns of table \"smb.attributes\""
enum smb_attributes_select_column {
    "column name"
    autocomplete
    "column name"
    datatype
    "column name"
    key
    "column name"
    mapping
    "column name"
    relevant
}

"update columns of table \"smb.attributes\""
enum smb_attributes_update_column {
    "column name"
    autocomplete
    "column name"
    datatype
    "column name"
    key
    "column name"
    mapping
    "column name"
    relevant
}

"unique or primary key constraints on table \"smb.header\""
enum smb_header_constraint {
    "unique or primary key constraint"
    header_pkey
}

"select columns of table \"smb.header\""
enum smb_header_select_column {
    "column name"
    color
    "column name"
    drawer_color
    "column name"
    href
    "column name"
    id
}

"unique or primary key constraints on table \"smb.header_translations\""
enum smb_header_translations_constraint {
    "unique or primary key constraint"
    header_translations_pkey
}

"select columns of table \"smb.header_translations\""
enum smb_header_translations_select_column {
    "column name"
    header_id
    "column name"
    id
    "column name"
    language_id
    "column name"
    subtitle
    "column name"
    title
}

"update columns of table \"smb.header_translations\""
enum smb_header_translations_update_column {
    "column name"
    header_id
    "column name"
    id
    "column name"
    language_id
    "column name"
    subtitle
    "column name"
    title
}

"update columns of table \"smb.header\""
enum smb_header_update_column {
    "column name"
    color
    "column name"
    drawer_color
    "column name"
    href
    "column name"
    id
}

"unique or primary key constraints on table \"smb.highlights\""
enum smb_highlights_constraint {
    "unique or primary key constraint"
    highlights_pkey
}

"select columns of table \"smb.highlights\""
enum smb_highlights_select_column {
    "column name"
    id
    "column name"
    object_id
    "column name"
    org_unit_id
}

"update columns of table \"smb.highlights\""
enum smb_highlights_update_column {
    "column name"
    id
    "column name"
    object_id
    "column name"
    org_unit_id
}

"unique or primary key constraints on table \"smb.ignoreable_keys\""
enum smb_ignoreable_keys_constraint {
    "unique or primary key constraint"
    ignoreable_keys_key_key
    "unique or primary key constraint"
    ignoreable_keys_pkey
}

"select columns of table \"smb.ignoreable_keys\""
enum smb_ignoreable_keys_select_column {
    "column name"
    id
    "column name"
    key
}

"update columns of table \"smb.ignoreable_keys\""
enum smb_ignoreable_keys_update_column {
    "column name"
    id
    "column name"
    key
}

"unique or primary key constraints on table \"smb.intro_slide_translations\""
enum smb_intro_slide_translations_constraint {
    "unique or primary key constraint"
    intro_slide_translations_pkey
}

"select columns of table \"smb.intro_slide_translations\""
enum smb_intro_slide_translations_select_column {
    "column name"
    id
    "column name"
    intro_slide_id
    "column name"
    language_id
    "column name"
    title
}

"update columns of table \"smb.intro_slide_translations\""
enum smb_intro_slide_translations_update_column {
    "column name"
    id
    "column name"
    intro_slide_id
    "column name"
    language_id
    "column name"
    title
}

"unique or primary key constraints on table \"smb.intro_slides\""
enum smb_intro_slides_constraint {
    "unique or primary key constraint"
    intro_slides_pkey
}

"select columns of table \"smb.intro_slides\""
enum smb_intro_slides_select_column {
    "column name"
    id
    "column name"
    image
}

"update columns of table \"smb.intro_slides\""
enum smb_intro_slides_update_column {
    "column name"
    id
    "column name"
    image
}

"unique or primary key constraints on table \"smb.intro_text_module_translations\""
enum smb_intro_text_module_translations_constraint {
    "unique or primary key constraint"
    intro_text_module_translations_pkey
}

"select columns of table \"smb.intro_text_module_translations\""
enum smb_intro_text_module_translations_select_column {
    "column name"
    content
    "column name"
    id
    "column name"
    intro_text_module_id
    "column name"
    language_id
    "column name"
    link_caption
    "column name"
    subtitle
    "column name"
    title
}

"update columns of table \"smb.intro_text_module_translations\""
enum smb_intro_text_module_translations_update_column {
    "column name"
    content
    "column name"
    id
    "column name"
    intro_text_module_id
    "column name"
    language_id
    "column name"
    link_caption
    "column name"
    subtitle
    "column name"
    title
}

"unique or primary key constraints on table \"smb.intro_text_module_type\""
enum smb_intro_text_module_type_constraint {
    "unique or primary key constraint"
    intro_text_module_type_pkey
}

enum smb_intro_text_module_type_enum {
    "Module for guide platform."
    GUIDE
    "Module for research platform."
    RESEARCH
    "Simple text module."
    TEXT
    "Module for topic platform."
    TOPIC
}

"select columns of table \"smb.intro_text_module_type\""
enum smb_intro_text_module_type_select_column {
    "column name"
    comment
    "column name"
    value
}

"update columns of table \"smb.intro_text_module_type\""
enum smb_intro_text_module_type_update_column {
    "column name"
    comment
    "column name"
    value
}

"unique or primary key constraints on table \"smb.intro_text_modules\""
enum smb_intro_text_modules_constraint {
    "unique or primary key constraint"
    intro_text_modules_pkey
}

"select columns of table \"smb.intro_text_modules\""
enum smb_intro_text_modules_select_column {
    "column name"
    id
    "column name"
    link
    "column name"
    module_background_color
    "column name"
    module_type
    "column name"
    text_area_color
    "column name"
    text_color
    "column name"
    title_color
}

"update columns of table \"smb.intro_text_modules\""
enum smb_intro_text_modules_update_column {
    "column name"
    id
    "column name"
    link
    "column name"
    module_background_color
    "column name"
    module_type
    "column name"
    text_area_color
    "column name"
    text_color
    "column name"
    title_color
}

"unique or primary key constraints on table \"smb.language\""
enum smb_language_constraint {
    "unique or primary key constraint"
    language_lang_key
    "unique or primary key constraint"
    language_pkey
}

"select columns of table \"smb.language\""
enum smb_language_select_column {
    "column name"
    id
    "column name"
    lang
}

"update columns of table \"smb.language\""
enum smb_language_update_column {
    "column name"
    id
    "column name"
    lang
}

"unique or primary key constraints on table \"smb.licenses\""
enum smb_licenses_constraint {
    "unique or primary key constraint"
    licenses_key_key
    "unique or primary key constraint"
    licenses_pkey
}

"select columns of table \"smb.licenses\""
enum smb_licenses_select_column {
    "column name"
    id
    "column name"
    key
}

"unique or primary key constraints on table \"smb.licenses_translation\""
enum smb_licenses_translation_constraint {
    "unique or primary key constraint"
    licenses_translation_pkey
}

"select columns of table \"smb.licenses_translation\""
enum smb_licenses_translation_select_column {
    "column name"
    content
    "column name"
    id
    "column name"
    language_id
    "column name"
    license_id
}

"update columns of table \"smb.licenses_translation\""
enum smb_licenses_translation_update_column {
    "column name"
    content
    "column name"
    id
    "column name"
    language_id
    "column name"
    license_id
}

"update columns of table \"smb.licenses\""
enum smb_licenses_update_column {
    "column name"
    id
    "column name"
    key
}

"unique or primary key constraints on table \"smb.objects\""
enum smb_objects_constraint {
    "unique or primary key constraint"
    objects_mds_id_key
    "unique or primary key constraint"
    objects_pkey
}

"select columns of table \"smb.objects\""
enum smb_objects_select_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    mds_id
    "column name"
    updated_at
}

"update columns of table \"smb.objects\""
enum smb_objects_update_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    mds_id
    "column name"
    updated_at
}

"unique or primary key constraints on table \"smb.org_unit\""
enum smb_org_unit_constraint {
    "unique or primary key constraint"
    org_unit_name_key
    "unique or primary key constraint"
    org_unit_pkey
}

"select columns of table \"smb.org_unit\""
enum smb_org_unit_select_column {
    "column name"
    id
    "column name"
    name
}

"update columns of table \"smb.org_unit\""
enum smb_org_unit_update_column {
    "column name"
    id
    "column name"
    name
}

"select columns of table \"smb.search_suggestions\""
enum smb_search_suggestions_select_column {
    "column name"
    counter
    "column name"
    lang
    "column name"
    value
}

"unique or primary key constraints on table \"smb.sync_cycle_type\""
enum smb_sync_cycle_type_constraint {
    "unique or primary key constraint"
    isync_cycle_type_pkey
}

enum smb_sync_cycle_type_enum {
    "removing objects moved to trashbin"
    DELETIONS
    "highlights update based on object-groups"
    HIGHLIGHTS
    "incremental update based on last-modified filter"
    INCREMENTAL
    "manually triggered sync"
    MANUAL
}

"select columns of table \"smb.sync_cycle_type\""
enum smb_sync_cycle_type_select_column {
    "column name"
    comment
    "column name"
    value
}

"update columns of table \"smb.sync_cycle_type\""
enum smb_sync_cycle_type_update_column {
    "column name"
    comment
    "column name"
    value
}

"unique or primary key constraints on table \"smb.sync_cycles\""
enum smb_sync_cycles_constraint {
    "unique or primary key constraint"
    sync_cycles_pkey
}

"select columns of table \"smb.sync_cycles\""
enum smb_sync_cycles_select_column {
    "column name"
    debug_information
    "column name"
    id
    "column name"
    timestamp
    "column name"
    type
}

"update columns of table \"smb.sync_cycles\""
enum smb_sync_cycles_update_column {
    "column name"
    debug_information
    "column name"
    id
    "column name"
    timestamp
    "column name"
    type
}

"unique or primary key constraints on table \"smb.topics\""
enum smb_topics_constraint {
    "unique or primary key constraint"
    topics_pkey
}

"unique or primary key constraints on table \"smb.topics_objects\""
enum smb_topics_objects_constraint {
    "unique or primary key constraint"
    topics_objects_pkey
}

"select columns of table \"smb.topics_objects\""
enum smb_topics_objects_select_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    objects_id
    "column name"
    topics_id
    "column name"
    updated_at
}

"update columns of table \"smb.topics_objects\""
enum smb_topics_objects_update_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    objects_id
    "column name"
    topics_id
    "column name"
    updated_at
}

"select columns of table \"smb.topics\""
enum smb_topics_select_column {
    "column name"
    has_slide
    "column name"
    id
    "column name"
    preview_image
}

"unique or primary key constraints on table \"smb.topics_translations\""
enum smb_topics_translations_constraint {
    "unique or primary key constraint"
    topics_translations_pkey
}

"select columns of table \"smb.topics_translations\""
enum smb_topics_translations_select_column {
    "column name"
    description
    "column name"
    id
    "column name"
    language_id
    "column name"
    title
    "column name"
    topics_id
}

"update columns of table \"smb.topics_translations\""
enum smb_topics_translations_update_column {
    "column name"
    description
    "column name"
    id
    "column name"
    language_id
    "column name"
    title
    "column name"
    topics_id
}

"update columns of table \"smb.topics\""
enum smb_topics_update_column {
    "column name"
    has_slide
    "column name"
    id
    "column name"
    preview_image
}

"unique or primary key constraints on table \"smb.tours\""
enum smb_tours_constraint {
    "unique or primary key constraint"
    tours_pkey
}

"unique or primary key constraints on table \"smb.tours_objects\""
enum smb_tours_objects_constraint {
    "unique or primary key constraint"
    tours_objects_pkey
}

"select columns of table \"smb.tours_objects\""
enum smb_tours_objects_select_column {
    "column name"
    id
    "column name"
    object_id
    "column name"
    sequence
    "column name"
    tour_id
}

"unique or primary key constraints on table \"smb.tours_objects_translation\""
enum smb_tours_objects_translation_constraint {
    "unique or primary key constraint"
    tours_objects_translation_pkey
}

"select columns of table \"smb.tours_objects_translation\""
enum smb_tours_objects_translation_select_column {
    "column name"
    abstract
    "column name"
    description
    "column name"
    id
    "column name"
    language_id
    "column name"
    tour_object_id
}

"update columns of table \"smb.tours_objects_translation\""
enum smb_tours_objects_translation_update_column {
    "column name"
    abstract
    "column name"
    description
    "column name"
    id
    "column name"
    language_id
    "column name"
    tour_object_id
}

"update columns of table \"smb.tours_objects\""
enum smb_tours_objects_update_column {
    "column name"
    id
    "column name"
    object_id
    "column name"
    sequence
    "column name"
    tour_id
}

"select columns of table \"smb.tours\""
enum smb_tours_select_column {
    "column name"
    id
    "column name"
    number
    "column name"
    preview_image
}

"unique or primary key constraints on table \"smb.tours_translation\""
enum smb_tours_translation_constraint {
    "unique or primary key constraint"
    tours_translation_pkey
}

"select columns of table \"smb.tours_translation\""
enum smb_tours_translation_select_column {
    "column name"
    abstract
    "column name"
    description
    "column name"
    id
    "column name"
    language_id
    "column name"
    subtitle
    "column name"
    title
    "column name"
    tour_id
}

"update columns of table \"smb.tours_translation\""
enum smb_tours_translation_update_column {
    "column name"
    abstract
    "column name"
    description
    "column name"
    id
    "column name"
    language_id
    "column name"
    subtitle
    "column name"
    title
    "column name"
    tour_id
}

"update columns of table \"smb.tours\""
enum smb_tours_update_column {
    "column name"
    id
    "column name"
    number
    "column name"
    preview_image
}

"unique or primary key constraints on table \"smb.user\""
enum smb_user_constraint {
    "unique or primary key constraint"
    user_email_key
    "unique or primary key constraint"
    user_pkey
}

"unique or primary key constraints on table \"smb.user_role\""
enum smb_user_role_constraint {
    "unique or primary key constraint"
    user_role_pkey
    "unique or primary key constraint"
    user_role_role_key
}

"select columns of table \"smb.user_role\""
enum smb_user_role_select_column {
    "column name"
    id
    "column name"
    role
}

"update columns of table \"smb.user_role\""
enum smb_user_role_update_column {
    "column name"
    id
    "column name"
    role
}

"select columns of table \"smb.user\""
enum smb_user_select_column {
    "column name"
    email
    "column name"
    id
    "column name"
    password
    "column name"
    role_id
}

"update columns of table \"smb.user\""
enum smb_user_update_column {
    "column name"
    email
    "column name"
    id
    "column name"
    password
    "column name"
    role_id
}

"expression to compare columns of type Boolean. All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"expression to compare columns of type bigint. All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"order by aggregate values of table \"smb.attachments\""
input smb_attachments_aggregate_order_by {
    avg: smb_attachments_avg_order_by
    count: order_by
    max: smb_attachments_max_order_by
    min: smb_attachments_min_order_by
    stddev: smb_attachments_stddev_order_by
    stddev_pop: smb_attachments_stddev_pop_order_by
    stddev_samp: smb_attachments_stddev_samp_order_by
    sum: smb_attachments_sum_order_by
    var_pop: smb_attachments_var_pop_order_by
    var_samp: smb_attachments_var_samp_order_by
    variance: smb_attachments_variance_order_by
}

"input type for inserting array relation for remote table \"smb.attachments\""
input smb_attachments_arr_rel_insert_input {
    data: [smb_attachments_insert_input!]!
    on_conflict: smb_attachments_on_conflict
}

"order by avg() on columns of table \"smb.attachments\""
input smb_attachments_avg_order_by {
    id: order_by
    object_id: order_by
}

"Boolean expression to filter rows from the table \"smb.attachments\". All fields are combined with a logical 'AND'."
input smb_attachments_bool_exp {
    _and: [smb_attachments_bool_exp]
    _not: smb_attachments_bool_exp
    _or: [smb_attachments_bool_exp]
    attachment: String_comparison_exp
    id: bigint_comparison_exp
    object: smb_objects_bool_exp
    object_id: bigint_comparison_exp
    primary: Boolean_comparison_exp
}

"input type for incrementing integer column in table \"smb.attachments\""
input smb_attachments_inc_input {
    id: bigint
    object_id: bigint
}

"input type for inserting data into table \"smb.attachments\""
input smb_attachments_insert_input {
    attachment: String
    id: bigint
    object: smb_objects_obj_rel_insert_input
    object_id: bigint
    primary: Boolean
}

"order by max() on columns of table \"smb.attachments\""
input smb_attachments_max_order_by {
    attachment: order_by
    id: order_by
    object_id: order_by
}

"order by min() on columns of table \"smb.attachments\""
input smb_attachments_min_order_by {
    attachment: order_by
    id: order_by
    object_id: order_by
}

"input type for inserting object relation for remote table \"smb.attachments\""
input smb_attachments_obj_rel_insert_input {
    data: smb_attachments_insert_input!
    on_conflict: smb_attachments_on_conflict
}

"on conflict condition type for table \"smb.attachments\""
input smb_attachments_on_conflict {
    constraint: smb_attachments_constraint!
    update_columns: [smb_attachments_update_column!]!
    where: smb_attachments_bool_exp
}

"ordering options when selecting data from \"smb.attachments\""
input smb_attachments_order_by {
    attachment: order_by
    id: order_by
    object: smb_objects_order_by
    object_id: order_by
    primary: order_by
}

"primary key columns input for table: \"smb.attachments\""
input smb_attachments_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.attachments\""
input smb_attachments_set_input {
    attachment: String
    id: bigint
    object_id: bigint
    primary: Boolean
}

"order by stddev() on columns of table \"smb.attachments\""
input smb_attachments_stddev_order_by {
    id: order_by
    object_id: order_by
}

"order by stddev_pop() on columns of table \"smb.attachments\""
input smb_attachments_stddev_pop_order_by {
    id: order_by
    object_id: order_by
}

"order by stddev_samp() on columns of table \"smb.attachments\""
input smb_attachments_stddev_samp_order_by {
    id: order_by
    object_id: order_by
}

"order by sum() on columns of table \"smb.attachments\""
input smb_attachments_sum_order_by {
    id: order_by
    object_id: order_by
}

"order by var_pop() on columns of table \"smb.attachments\""
input smb_attachments_var_pop_order_by {
    id: order_by
    object_id: order_by
}

"order by var_samp() on columns of table \"smb.attachments\""
input smb_attachments_var_samp_order_by {
    id: order_by
    object_id: order_by
}

"order by variance() on columns of table \"smb.attachments\""
input smb_attachments_variance_order_by {
    id: order_by
    object_id: order_by
}

input smb_attribute_search_suggestions_args {
    amount: Int
    attributekey: String
    filterlang: String
    searchterm: String
}

"order by aggregate values of table \"smb.attribute_translations\""
input smb_attribute_translations_aggregate_order_by {
    avg: smb_attribute_translations_avg_order_by
    count: order_by
    max: smb_attribute_translations_max_order_by
    min: smb_attribute_translations_min_order_by
    stddev: smb_attribute_translations_stddev_order_by
    stddev_pop: smb_attribute_translations_stddev_pop_order_by
    stddev_samp: smb_attribute_translations_stddev_samp_order_by
    sum: smb_attribute_translations_sum_order_by
    var_pop: smb_attribute_translations_var_pop_order_by
    var_samp: smb_attribute_translations_var_samp_order_by
    variance: smb_attribute_translations_variance_order_by
}

"input type for inserting array relation for remote table \"smb.attribute_translations\""
input smb_attribute_translations_arr_rel_insert_input {
    data: [smb_attribute_translations_insert_input!]!
    on_conflict: smb_attribute_translations_on_conflict
}

"order by avg() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_avg_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"Boolean expression to filter rows from the table \"smb.attribute_translations\". All fields are combined with a logical 'AND'."
input smb_attribute_translations_bool_exp {
    _and: [smb_attribute_translations_bool_exp]
    _not: smb_attribute_translations_bool_exp
    _or: [smb_attribute_translations_bool_exp]
    attribute: smb_attributes_bool_exp
    attribute_key: String_comparison_exp
    fq_key: String_comparison_exp
    id: bigint_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    object_id: bigint_comparison_exp
    value: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.attribute_translations\""
input smb_attribute_translations_inc_input {
    id: bigint
    language_id: bigint
    object_id: bigint
}

"input type for inserting data into table \"smb.attribute_translations\""
input smb_attribute_translations_insert_input {
    attribute: smb_attributes_obj_rel_insert_input
    attribute_key: String
    fq_key: String
    id: bigint
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    object_id: bigint
    value: String
}

"order by max() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_max_order_by {
    attribute_key: order_by
    fq_key: order_by
    id: order_by
    language_id: order_by
    object_id: order_by
    value: order_by
}

"order by min() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_min_order_by {
    attribute_key: order_by
    fq_key: order_by
    id: order_by
    language_id: order_by
    object_id: order_by
    value: order_by
}

"input type for inserting object relation for remote table \"smb.attribute_translations\""
input smb_attribute_translations_obj_rel_insert_input {
    data: smb_attribute_translations_insert_input!
    on_conflict: smb_attribute_translations_on_conflict
}

"on conflict condition type for table \"smb.attribute_translations\""
input smb_attribute_translations_on_conflict {
    constraint: smb_attribute_translations_constraint!
    update_columns: [smb_attribute_translations_update_column!]!
    where: smb_attribute_translations_bool_exp
}

"ordering options when selecting data from \"smb.attribute_translations\""
input smb_attribute_translations_order_by {
    attribute: smb_attributes_order_by
    attribute_key: order_by
    fq_key: order_by
    id: order_by
    language: smb_language_order_by
    language_id: order_by
    object_id: order_by
    value: order_by
}

"primary key columns input for table: \"smb.attribute_translations\""
input smb_attribute_translations_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.attribute_translations\""
input smb_attribute_translations_set_input {
    attribute_key: String
    fq_key: String
    id: bigint
    language_id: bigint
    object_id: bigint
    value: String
}

"order by stddev() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_stddev_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by stddev_pop() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_stddev_pop_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by stddev_samp() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_stddev_samp_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by sum() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_sum_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by var_pop() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_var_pop_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by var_samp() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_var_samp_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by variance() on columns of table \"smb.attribute_translations\""
input smb_attribute_translations_variance_order_by {
    id: order_by
    language_id: order_by
    object_id: order_by
}

"order by aggregate values of table \"smb.attributes\""
input smb_attributes_aggregate_order_by {
    count: order_by
    max: smb_attributes_max_order_by
    min: smb_attributes_min_order_by
}

"input type for inserting array relation for remote table \"smb.attributes\""
input smb_attributes_arr_rel_insert_input {
    data: [smb_attributes_insert_input!]!
    on_conflict: smb_attributes_on_conflict
}

"Boolean expression to filter rows from the table \"smb.attributes\". All fields are combined with a logical 'AND'."
input smb_attributes_bool_exp {
    _and: [smb_attributes_bool_exp]
    _not: smb_attributes_bool_exp
    _or: [smb_attributes_bool_exp]
    attribute_translations: smb_attribute_translations_bool_exp
    autocomplete: Boolean_comparison_exp
    datatype: String_comparison_exp
    key: String_comparison_exp
    mapping: String_comparison_exp
    relevant: Boolean_comparison_exp
}

"input type for inserting data into table \"smb.attributes\""
input smb_attributes_insert_input {
    attribute_translations: smb_attribute_translations_arr_rel_insert_input
    autocomplete: Boolean
    datatype: String
    key: String
    mapping: String
    relevant: Boolean
}

"order by max() on columns of table \"smb.attributes\""
input smb_attributes_max_order_by {
    datatype: order_by
    key: order_by
    mapping: order_by
}

"order by min() on columns of table \"smb.attributes\""
input smb_attributes_min_order_by {
    datatype: order_by
    key: order_by
    mapping: order_by
}

"input type for inserting object relation for remote table \"smb.attributes\""
input smb_attributes_obj_rel_insert_input {
    data: smb_attributes_insert_input!
    on_conflict: smb_attributes_on_conflict
}

"on conflict condition type for table \"smb.attributes\""
input smb_attributes_on_conflict {
    constraint: smb_attributes_constraint!
    update_columns: [smb_attributes_update_column!]!
    where: smb_attributes_bool_exp
}

"ordering options when selecting data from \"smb.attributes\""
input smb_attributes_order_by {
    attribute_translations_aggregate: smb_attribute_translations_aggregate_order_by
    autocomplete: order_by
    datatype: order_by
    key: order_by
    mapping: order_by
    relevant: order_by
}

"primary key columns input for table: \"smb.attributes\""
input smb_attributes_pk_columns_input {
    key: String!
}

"input type for updating data in table \"smb.attributes\""
input smb_attributes_set_input {
    autocomplete: Boolean
    datatype: String
    key: String
    mapping: String
    relevant: Boolean
}

input smb_autocomplete_search_args {
    attributekeys: _varchar
    attributelimit: Int
    filterlang: String
    searchterm: String
}

input smb_filter_objects_args {
    attachment: Boolean
    exhibited: Boolean
    highlight: Boolean
    qlimit: Int
    qoffset: Int
}

"order by aggregate values of table \"smb.header\""
input smb_header_aggregate_order_by {
    avg: smb_header_avg_order_by
    count: order_by
    max: smb_header_max_order_by
    min: smb_header_min_order_by
    stddev: smb_header_stddev_order_by
    stddev_pop: smb_header_stddev_pop_order_by
    stddev_samp: smb_header_stddev_samp_order_by
    sum: smb_header_sum_order_by
    var_pop: smb_header_var_pop_order_by
    var_samp: smb_header_var_samp_order_by
    variance: smb_header_variance_order_by
}

"input type for inserting array relation for remote table \"smb.header\""
input smb_header_arr_rel_insert_input {
    data: [smb_header_insert_input!]!
    on_conflict: smb_header_on_conflict
}

"order by avg() on columns of table \"smb.header\""
input smb_header_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.header\". All fields are combined with a logical 'AND'."
input smb_header_bool_exp {
    _and: [smb_header_bool_exp]
    _not: smb_header_bool_exp
    _or: [smb_header_bool_exp]
    color: String_comparison_exp
    drawer_color: String_comparison_exp
    header_translations: smb_header_translations_bool_exp
    href: String_comparison_exp
    id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"smb.header\""
input smb_header_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.header\""
input smb_header_insert_input {
    color: String
    drawer_color: String
    header_translations: smb_header_translations_arr_rel_insert_input
    href: String
    id: bigint
}

"order by max() on columns of table \"smb.header\""
input smb_header_max_order_by {
    color: order_by
    drawer_color: order_by
    href: order_by
    id: order_by
}

"order by min() on columns of table \"smb.header\""
input smb_header_min_order_by {
    color: order_by
    drawer_color: order_by
    href: order_by
    id: order_by
}

"input type for inserting object relation for remote table \"smb.header\""
input smb_header_obj_rel_insert_input {
    data: smb_header_insert_input!
    on_conflict: smb_header_on_conflict
}

"on conflict condition type for table \"smb.header\""
input smb_header_on_conflict {
    constraint: smb_header_constraint!
    update_columns: [smb_header_update_column!]!
    where: smb_header_bool_exp
}

"ordering options when selecting data from \"smb.header\""
input smb_header_order_by {
    color: order_by
    drawer_color: order_by
    header_translations_aggregate: smb_header_translations_aggregate_order_by
    href: order_by
    id: order_by
}

"primary key columns input for table: \"smb.header\""
input smb_header_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.header\""
input smb_header_set_input {
    color: String
    drawer_color: String
    href: String
    id: bigint
}

"order by stddev() on columns of table \"smb.header\""
input smb_header_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.header\""
input smb_header_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.header\""
input smb_header_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.header\""
input smb_header_sum_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.header_translations\""
input smb_header_translations_aggregate_order_by {
    avg: smb_header_translations_avg_order_by
    count: order_by
    max: smb_header_translations_max_order_by
    min: smb_header_translations_min_order_by
    stddev: smb_header_translations_stddev_order_by
    stddev_pop: smb_header_translations_stddev_pop_order_by
    stddev_samp: smb_header_translations_stddev_samp_order_by
    sum: smb_header_translations_sum_order_by
    var_pop: smb_header_translations_var_pop_order_by
    var_samp: smb_header_translations_var_samp_order_by
    variance: smb_header_translations_variance_order_by
}

"input type for inserting array relation for remote table \"smb.header_translations\""
input smb_header_translations_arr_rel_insert_input {
    data: [smb_header_translations_insert_input!]!
    on_conflict: smb_header_translations_on_conflict
}

"order by avg() on columns of table \"smb.header_translations\""
input smb_header_translations_avg_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"Boolean expression to filter rows from the table \"smb.header_translations\". All fields are combined with a logical 'AND'."
input smb_header_translations_bool_exp {
    _and: [smb_header_translations_bool_exp]
    _not: smb_header_translations_bool_exp
    _or: [smb_header_translations_bool_exp]
    header: smb_header_bool_exp
    header_id: bigint_comparison_exp
    id: bigint_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    subtitle: String_comparison_exp
    title: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.header_translations\""
input smb_header_translations_inc_input {
    header_id: bigint
    id: bigint
    language_id: bigint
}

"input type for inserting data into table \"smb.header_translations\""
input smb_header_translations_insert_input {
    header: smb_header_obj_rel_insert_input
    header_id: bigint
    id: bigint
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    subtitle: String
    title: String
}

"order by max() on columns of table \"smb.header_translations\""
input smb_header_translations_max_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
    subtitle: order_by
    title: order_by
}

"order by min() on columns of table \"smb.header_translations\""
input smb_header_translations_min_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
    subtitle: order_by
    title: order_by
}

"input type for inserting object relation for remote table \"smb.header_translations\""
input smb_header_translations_obj_rel_insert_input {
    data: smb_header_translations_insert_input!
    on_conflict: smb_header_translations_on_conflict
}

"on conflict condition type for table \"smb.header_translations\""
input smb_header_translations_on_conflict {
    constraint: smb_header_translations_constraint!
    update_columns: [smb_header_translations_update_column!]!
    where: smb_header_translations_bool_exp
}

"ordering options when selecting data from \"smb.header_translations\""
input smb_header_translations_order_by {
    header: smb_header_order_by
    header_id: order_by
    id: order_by
    language: smb_language_order_by
    language_id: order_by
    subtitle: order_by
    title: order_by
}

"primary key columns input for table: \"smb.header_translations\""
input smb_header_translations_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.header_translations\""
input smb_header_translations_set_input {
    header_id: bigint
    id: bigint
    language_id: bigint
    subtitle: String
    title: String
}

"order by stddev() on columns of table \"smb.header_translations\""
input smb_header_translations_stddev_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by stddev_pop() on columns of table \"smb.header_translations\""
input smb_header_translations_stddev_pop_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by stddev_samp() on columns of table \"smb.header_translations\""
input smb_header_translations_stddev_samp_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by sum() on columns of table \"smb.header_translations\""
input smb_header_translations_sum_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by var_pop() on columns of table \"smb.header_translations\""
input smb_header_translations_var_pop_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by var_samp() on columns of table \"smb.header_translations\""
input smb_header_translations_var_samp_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by variance() on columns of table \"smb.header_translations\""
input smb_header_translations_variance_order_by {
    header_id: order_by
    id: order_by
    language_id: order_by
}

"order by var_pop() on columns of table \"smb.header\""
input smb_header_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.header\""
input smb_header_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.header\""
input smb_header_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.highlights\""
input smb_highlights_aggregate_order_by {
    avg: smb_highlights_avg_order_by
    count: order_by
    max: smb_highlights_max_order_by
    min: smb_highlights_min_order_by
    stddev: smb_highlights_stddev_order_by
    stddev_pop: smb_highlights_stddev_pop_order_by
    stddev_samp: smb_highlights_stddev_samp_order_by
    sum: smb_highlights_sum_order_by
    var_pop: smb_highlights_var_pop_order_by
    var_samp: smb_highlights_var_samp_order_by
    variance: smb_highlights_variance_order_by
}

"input type for inserting array relation for remote table \"smb.highlights\""
input smb_highlights_arr_rel_insert_input {
    data: [smb_highlights_insert_input!]!
    on_conflict: smb_highlights_on_conflict
}

"order by avg() on columns of table \"smb.highlights\""
input smb_highlights_avg_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"Boolean expression to filter rows from the table \"smb.highlights\". All fields are combined with a logical 'AND'."
input smb_highlights_bool_exp {
    _and: [smb_highlights_bool_exp]
    _not: smb_highlights_bool_exp
    _or: [smb_highlights_bool_exp]
    id: bigint_comparison_exp
    object: smb_objects_bool_exp
    object_id: bigint_comparison_exp
    org_unit: smb_org_unit_bool_exp
    org_unit_id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"smb.highlights\""
input smb_highlights_inc_input {
    id: bigint
    object_id: bigint
    org_unit_id: bigint
}

"input type for inserting data into table \"smb.highlights\""
input smb_highlights_insert_input {
    id: bigint
    object: smb_objects_obj_rel_insert_input
    object_id: bigint
    org_unit: smb_org_unit_obj_rel_insert_input
    org_unit_id: bigint
}

"order by max() on columns of table \"smb.highlights\""
input smb_highlights_max_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by min() on columns of table \"smb.highlights\""
input smb_highlights_min_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"input type for inserting object relation for remote table \"smb.highlights\""
input smb_highlights_obj_rel_insert_input {
    data: smb_highlights_insert_input!
    on_conflict: smb_highlights_on_conflict
}

"on conflict condition type for table \"smb.highlights\""
input smb_highlights_on_conflict {
    constraint: smb_highlights_constraint!
    update_columns: [smb_highlights_update_column!]!
    where: smb_highlights_bool_exp
}

"ordering options when selecting data from \"smb.highlights\""
input smb_highlights_order_by {
    id: order_by
    object: smb_objects_order_by
    object_id: order_by
    org_unit: smb_org_unit_order_by
    org_unit_id: order_by
}

"primary key columns input for table: \"smb.highlights\""
input smb_highlights_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.highlights\""
input smb_highlights_set_input {
    id: bigint
    object_id: bigint
    org_unit_id: bigint
}

"order by stddev() on columns of table \"smb.highlights\""
input smb_highlights_stddev_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by stddev_pop() on columns of table \"smb.highlights\""
input smb_highlights_stddev_pop_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by stddev_samp() on columns of table \"smb.highlights\""
input smb_highlights_stddev_samp_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by sum() on columns of table \"smb.highlights\""
input smb_highlights_sum_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by var_pop() on columns of table \"smb.highlights\""
input smb_highlights_var_pop_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by var_samp() on columns of table \"smb.highlights\""
input smb_highlights_var_samp_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by variance() on columns of table \"smb.highlights\""
input smb_highlights_variance_order_by {
    id: order_by
    object_id: order_by
    org_unit_id: order_by
}

"order by aggregate values of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_aggregate_order_by {
    avg: smb_ignoreable_keys_avg_order_by
    count: order_by
    max: smb_ignoreable_keys_max_order_by
    min: smb_ignoreable_keys_min_order_by
    stddev: smb_ignoreable_keys_stddev_order_by
    stddev_pop: smb_ignoreable_keys_stddev_pop_order_by
    stddev_samp: smb_ignoreable_keys_stddev_samp_order_by
    sum: smb_ignoreable_keys_sum_order_by
    var_pop: smb_ignoreable_keys_var_pop_order_by
    var_samp: smb_ignoreable_keys_var_samp_order_by
    variance: smb_ignoreable_keys_variance_order_by
}

"input type for inserting array relation for remote table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_arr_rel_insert_input {
    data: [smb_ignoreable_keys_insert_input!]!
    on_conflict: smb_ignoreable_keys_on_conflict
}

"order by avg() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.ignoreable_keys\". All fields are combined with a logical 'AND'."
input smb_ignoreable_keys_bool_exp {
    _and: [smb_ignoreable_keys_bool_exp]
    _not: smb_ignoreable_keys_bool_exp
    _or: [smb_ignoreable_keys_bool_exp]
    id: bigint_comparison_exp
    key: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_insert_input {
    id: bigint
    key: String
}

"order by max() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_max_order_by {
    id: order_by
    key: order_by
}

"order by min() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_min_order_by {
    id: order_by
    key: order_by
}

"input type for inserting object relation for remote table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_obj_rel_insert_input {
    data: smb_ignoreable_keys_insert_input!
    on_conflict: smb_ignoreable_keys_on_conflict
}

"on conflict condition type for table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_on_conflict {
    constraint: smb_ignoreable_keys_constraint!
    update_columns: [smb_ignoreable_keys_update_column!]!
    where: smb_ignoreable_keys_bool_exp
}

"ordering options when selecting data from \"smb.ignoreable_keys\""
input smb_ignoreable_keys_order_by {
    id: order_by
    key: order_by
}

"primary key columns input for table: \"smb.ignoreable_keys\""
input smb_ignoreable_keys_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_set_input {
    id: bigint
    key: String
}

"order by stddev() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.ignoreable_keys\""
input smb_ignoreable_keys_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_aggregate_order_by {
    avg: smb_intro_slide_translations_avg_order_by
    count: order_by
    max: smb_intro_slide_translations_max_order_by
    min: smb_intro_slide_translations_min_order_by
    stddev: smb_intro_slide_translations_stddev_order_by
    stddev_pop: smb_intro_slide_translations_stddev_pop_order_by
    stddev_samp: smb_intro_slide_translations_stddev_samp_order_by
    sum: smb_intro_slide_translations_sum_order_by
    var_pop: smb_intro_slide_translations_var_pop_order_by
    var_samp: smb_intro_slide_translations_var_samp_order_by
    variance: smb_intro_slide_translations_variance_order_by
}

"input type for inserting array relation for remote table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_arr_rel_insert_input {
    data: [smb_intro_slide_translations_insert_input!]!
    on_conflict: smb_intro_slide_translations_on_conflict
}

"order by avg() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_avg_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"Boolean expression to filter rows from the table \"smb.intro_slide_translations\". All fields are combined with a logical 'AND'."
input smb_intro_slide_translations_bool_exp {
    _and: [smb_intro_slide_translations_bool_exp]
    _not: smb_intro_slide_translations_bool_exp
    _or: [smb_intro_slide_translations_bool_exp]
    id: bigint_comparison_exp
    intro_slide: smb_intro_slides_bool_exp
    intro_slide_id: Int_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    title: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_inc_input {
    id: bigint
    intro_slide_id: Int
    language_id: bigint
}

"input type for inserting data into table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_insert_input {
    id: bigint
    intro_slide: smb_intro_slides_obj_rel_insert_input
    intro_slide_id: Int
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    title: String
}

"order by max() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_max_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
    title: order_by
}

"order by min() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_min_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
    title: order_by
}

"input type for inserting object relation for remote table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_obj_rel_insert_input {
    data: smb_intro_slide_translations_insert_input!
    on_conflict: smb_intro_slide_translations_on_conflict
}

"on conflict condition type for table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_on_conflict {
    constraint: smb_intro_slide_translations_constraint!
    update_columns: [smb_intro_slide_translations_update_column!]!
    where: smb_intro_slide_translations_bool_exp
}

"ordering options when selecting data from \"smb.intro_slide_translations\""
input smb_intro_slide_translations_order_by {
    id: order_by
    intro_slide: smb_intro_slides_order_by
    intro_slide_id: order_by
    language: smb_language_order_by
    language_id: order_by
    title: order_by
}

"primary key columns input for table: \"smb.intro_slide_translations\""
input smb_intro_slide_translations_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_set_input {
    id: bigint
    intro_slide_id: Int
    language_id: bigint
    title: String
}

"order by stddev() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_stddev_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by stddev_pop() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_stddev_pop_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by stddev_samp() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_stddev_samp_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by sum() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_sum_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by var_pop() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_var_pop_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by var_samp() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_var_samp_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by variance() on columns of table \"smb.intro_slide_translations\""
input smb_intro_slide_translations_variance_order_by {
    id: order_by
    intro_slide_id: order_by
    language_id: order_by
}

"order by aggregate values of table \"smb.intro_slides\""
input smb_intro_slides_aggregate_order_by {
    avg: smb_intro_slides_avg_order_by
    count: order_by
    max: smb_intro_slides_max_order_by
    min: smb_intro_slides_min_order_by
    stddev: smb_intro_slides_stddev_order_by
    stddev_pop: smb_intro_slides_stddev_pop_order_by
    stddev_samp: smb_intro_slides_stddev_samp_order_by
    sum: smb_intro_slides_sum_order_by
    var_pop: smb_intro_slides_var_pop_order_by
    var_samp: smb_intro_slides_var_samp_order_by
    variance: smb_intro_slides_variance_order_by
}

"input type for inserting array relation for remote table \"smb.intro_slides\""
input smb_intro_slides_arr_rel_insert_input {
    data: [smb_intro_slides_insert_input!]!
    on_conflict: smb_intro_slides_on_conflict
}

"order by avg() on columns of table \"smb.intro_slides\""
input smb_intro_slides_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.intro_slides\". All fields are combined with a logical 'AND'."
input smb_intro_slides_bool_exp {
    _and: [smb_intro_slides_bool_exp]
    _not: smb_intro_slides_bool_exp
    _or: [smb_intro_slides_bool_exp]
    id: bigint_comparison_exp
    image: String_comparison_exp
    intro_slide_translations: smb_intro_slide_translations_bool_exp
}

"input type for incrementing integer column in table \"smb.intro_slides\""
input smb_intro_slides_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.intro_slides\""
input smb_intro_slides_insert_input {
    id: bigint
    image: String
    intro_slide_translations: smb_intro_slide_translations_arr_rel_insert_input
}

"order by max() on columns of table \"smb.intro_slides\""
input smb_intro_slides_max_order_by {
    id: order_by
    image: order_by
}

"order by min() on columns of table \"smb.intro_slides\""
input smb_intro_slides_min_order_by {
    id: order_by
    image: order_by
}

"input type for inserting object relation for remote table \"smb.intro_slides\""
input smb_intro_slides_obj_rel_insert_input {
    data: smb_intro_slides_insert_input!
    on_conflict: smb_intro_slides_on_conflict
}

"on conflict condition type for table \"smb.intro_slides\""
input smb_intro_slides_on_conflict {
    constraint: smb_intro_slides_constraint!
    update_columns: [smb_intro_slides_update_column!]!
    where: smb_intro_slides_bool_exp
}

"ordering options when selecting data from \"smb.intro_slides\""
input smb_intro_slides_order_by {
    id: order_by
    image: order_by
    intro_slide_translations_aggregate: smb_intro_slide_translations_aggregate_order_by
}

"primary key columns input for table: \"smb.intro_slides\""
input smb_intro_slides_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.intro_slides\""
input smb_intro_slides_set_input {
    id: bigint
    image: String
}

"order by stddev() on columns of table \"smb.intro_slides\""
input smb_intro_slides_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.intro_slides\""
input smb_intro_slides_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.intro_slides\""
input smb_intro_slides_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.intro_slides\""
input smb_intro_slides_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.intro_slides\""
input smb_intro_slides_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.intro_slides\""
input smb_intro_slides_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.intro_slides\""
input smb_intro_slides_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_aggregate_order_by {
    avg: smb_intro_text_module_translations_avg_order_by
    count: order_by
    max: smb_intro_text_module_translations_max_order_by
    min: smb_intro_text_module_translations_min_order_by
    stddev: smb_intro_text_module_translations_stddev_order_by
    stddev_pop: smb_intro_text_module_translations_stddev_pop_order_by
    stddev_samp: smb_intro_text_module_translations_stddev_samp_order_by
    sum: smb_intro_text_module_translations_sum_order_by
    var_pop: smb_intro_text_module_translations_var_pop_order_by
    var_samp: smb_intro_text_module_translations_var_samp_order_by
    variance: smb_intro_text_module_translations_variance_order_by
}

"input type for inserting array relation for remote table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_arr_rel_insert_input {
    data: [smb_intro_text_module_translations_insert_input!]!
    on_conflict: smb_intro_text_module_translations_on_conflict
}

"order by avg() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_avg_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"Boolean expression to filter rows from the table \"smb.intro_text_module_translations\". All fields are combined with a logical 'AND'."
input smb_intro_text_module_translations_bool_exp {
    _and: [smb_intro_text_module_translations_bool_exp]
    _not: smb_intro_text_module_translations_bool_exp
    _or: [smb_intro_text_module_translations_bool_exp]
    content: String_comparison_exp
    id: bigint_comparison_exp
    intro_text_module: smb_intro_text_modules_bool_exp
    intro_text_module_id: Int_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    link_caption: String_comparison_exp
    subtitle: String_comparison_exp
    title: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_inc_input {
    id: bigint
    intro_text_module_id: Int
    language_id: bigint
}

"input type for inserting data into table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_insert_input {
    content: String
    id: bigint
    intro_text_module: smb_intro_text_modules_obj_rel_insert_input
    intro_text_module_id: Int
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    link_caption: String
    subtitle: String
    title: String
}

"order by max() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_max_order_by {
    content: order_by
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
    link_caption: order_by
    subtitle: order_by
    title: order_by
}

"order by min() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_min_order_by {
    content: order_by
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
    link_caption: order_by
    subtitle: order_by
    title: order_by
}

"input type for inserting object relation for remote table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_obj_rel_insert_input {
    data: smb_intro_text_module_translations_insert_input!
    on_conflict: smb_intro_text_module_translations_on_conflict
}

"on conflict condition type for table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_on_conflict {
    constraint: smb_intro_text_module_translations_constraint!
    update_columns: [smb_intro_text_module_translations_update_column!]!
    where: smb_intro_text_module_translations_bool_exp
}

"ordering options when selecting data from \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_order_by {
    content: order_by
    id: order_by
    intro_text_module: smb_intro_text_modules_order_by
    intro_text_module_id: order_by
    language: smb_language_order_by
    language_id: order_by
    link_caption: order_by
    subtitle: order_by
    title: order_by
}

"primary key columns input for table: \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_set_input {
    content: String
    id: bigint
    intro_text_module_id: Int
    language_id: bigint
    link_caption: String
    subtitle: String
    title: String
}

"order by stddev() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_stddev_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by stddev_pop() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_stddev_pop_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by stddev_samp() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_stddev_samp_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by sum() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_sum_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by var_pop() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_var_pop_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by var_samp() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_var_samp_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by variance() on columns of table \"smb.intro_text_module_translations\""
input smb_intro_text_module_translations_variance_order_by {
    id: order_by
    intro_text_module_id: order_by
    language_id: order_by
}

"order by aggregate values of table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_aggregate_order_by {
    count: order_by
    max: smb_intro_text_module_type_max_order_by
    min: smb_intro_text_module_type_min_order_by
}

"input type for inserting array relation for remote table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_arr_rel_insert_input {
    data: [smb_intro_text_module_type_insert_input!]!
    on_conflict: smb_intro_text_module_type_on_conflict
}

"Boolean expression to filter rows from the table \"smb.intro_text_module_type\". All fields are combined with a logical 'AND'."
input smb_intro_text_module_type_bool_exp {
    _and: [smb_intro_text_module_type_bool_exp]
    _not: smb_intro_text_module_type_bool_exp
    _or: [smb_intro_text_module_type_bool_exp]
    comment: String_comparison_exp
    intro_text_modules: smb_intro_text_modules_bool_exp
    value: String_comparison_exp
}

"expression to compare columns of type smb_intro_text_module_type_enum. All fields are combined with logical 'AND'."
input smb_intro_text_module_type_enum_comparison_exp {
    _eq: smb_intro_text_module_type_enum
    _in: [smb_intro_text_module_type_enum!]
    _is_null: Boolean
    _neq: smb_intro_text_module_type_enum
    _nin: [smb_intro_text_module_type_enum!]
}

"input type for inserting data into table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_insert_input {
    comment: String
    intro_text_modules: smb_intro_text_modules_arr_rel_insert_input
    value: String
}

"order by max() on columns of table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_max_order_by {
    comment: order_by
    value: order_by
}

"order by min() on columns of table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_min_order_by {
    comment: order_by
    value: order_by
}

"input type for inserting object relation for remote table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_obj_rel_insert_input {
    data: smb_intro_text_module_type_insert_input!
    on_conflict: smb_intro_text_module_type_on_conflict
}

"on conflict condition type for table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_on_conflict {
    constraint: smb_intro_text_module_type_constraint!
    update_columns: [smb_intro_text_module_type_update_column!]!
    where: smb_intro_text_module_type_bool_exp
}

"ordering options when selecting data from \"smb.intro_text_module_type\""
input smb_intro_text_module_type_order_by {
    comment: order_by
    intro_text_modules_aggregate: smb_intro_text_modules_aggregate_order_by
    value: order_by
}

"primary key columns input for table: \"smb.intro_text_module_type\""
input smb_intro_text_module_type_pk_columns_input {
    value: String!
}

"input type for updating data in table \"smb.intro_text_module_type\""
input smb_intro_text_module_type_set_input {
    comment: String
    value: String
}

"order by aggregate values of table \"smb.intro_text_modules\""
input smb_intro_text_modules_aggregate_order_by {
    avg: smb_intro_text_modules_avg_order_by
    count: order_by
    max: smb_intro_text_modules_max_order_by
    min: smb_intro_text_modules_min_order_by
    stddev: smb_intro_text_modules_stddev_order_by
    stddev_pop: smb_intro_text_modules_stddev_pop_order_by
    stddev_samp: smb_intro_text_modules_stddev_samp_order_by
    sum: smb_intro_text_modules_sum_order_by
    var_pop: smb_intro_text_modules_var_pop_order_by
    var_samp: smb_intro_text_modules_var_samp_order_by
    variance: smb_intro_text_modules_variance_order_by
}

"input type for inserting array relation for remote table \"smb.intro_text_modules\""
input smb_intro_text_modules_arr_rel_insert_input {
    data: [smb_intro_text_modules_insert_input!]!
    on_conflict: smb_intro_text_modules_on_conflict
}

"order by avg() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.intro_text_modules\". All fields are combined with a logical 'AND'."
input smb_intro_text_modules_bool_exp {
    _and: [smb_intro_text_modules_bool_exp]
    _not: smb_intro_text_modules_bool_exp
    _or: [smb_intro_text_modules_bool_exp]
    id: bigint_comparison_exp
    intro_text_module_translations: smb_intro_text_module_translations_bool_exp
    intro_text_module_type: smb_intro_text_module_type_bool_exp
    link: String_comparison_exp
    module_background_color: String_comparison_exp
    module_type: smb_intro_text_module_type_enum_comparison_exp
    text_area_color: String_comparison_exp
    text_color: String_comparison_exp
    title_color: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.intro_text_modules\""
input smb_intro_text_modules_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.intro_text_modules\""
input smb_intro_text_modules_insert_input {
    id: bigint
    intro_text_module_translations: smb_intro_text_module_translations_arr_rel_insert_input
    intro_text_module_type: smb_intro_text_module_type_obj_rel_insert_input
    link: String
    module_background_color: String
    module_type: smb_intro_text_module_type_enum
    text_area_color: String
    text_color: String
    title_color: String
}

"order by max() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_max_order_by {
    id: order_by
    link: order_by
    module_background_color: order_by
    text_area_color: order_by
    text_color: order_by
    title_color: order_by
}

"order by min() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_min_order_by {
    id: order_by
    link: order_by
    module_background_color: order_by
    text_area_color: order_by
    text_color: order_by
    title_color: order_by
}

"input type for inserting object relation for remote table \"smb.intro_text_modules\""
input smb_intro_text_modules_obj_rel_insert_input {
    data: smb_intro_text_modules_insert_input!
    on_conflict: smb_intro_text_modules_on_conflict
}

"on conflict condition type for table \"smb.intro_text_modules\""
input smb_intro_text_modules_on_conflict {
    constraint: smb_intro_text_modules_constraint!
    update_columns: [smb_intro_text_modules_update_column!]!
    where: smb_intro_text_modules_bool_exp
}

"ordering options when selecting data from \"smb.intro_text_modules\""
input smb_intro_text_modules_order_by {
    id: order_by
    intro_text_module_translations_aggregate: smb_intro_text_module_translations_aggregate_order_by
    intro_text_module_type: smb_intro_text_module_type_order_by
    link: order_by
    module_background_color: order_by
    module_type: order_by
    text_area_color: order_by
    text_color: order_by
    title_color: order_by
}

"primary key columns input for table: \"smb.intro_text_modules\""
input smb_intro_text_modules_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.intro_text_modules\""
input smb_intro_text_modules_set_input {
    id: bigint
    link: String
    module_background_color: String
    module_type: smb_intro_text_module_type_enum
    text_area_color: String
    text_color: String
    title_color: String
}

"order by stddev() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.intro_text_modules\""
input smb_intro_text_modules_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.language\""
input smb_language_aggregate_order_by {
    avg: smb_language_avg_order_by
    count: order_by
    max: smb_language_max_order_by
    min: smb_language_min_order_by
    stddev: smb_language_stddev_order_by
    stddev_pop: smb_language_stddev_pop_order_by
    stddev_samp: smb_language_stddev_samp_order_by
    sum: smb_language_sum_order_by
    var_pop: smb_language_var_pop_order_by
    var_samp: smb_language_var_samp_order_by
    variance: smb_language_variance_order_by
}

"input type for inserting array relation for remote table \"smb.language\""
input smb_language_arr_rel_insert_input {
    data: [smb_language_insert_input!]!
    on_conflict: smb_language_on_conflict
}

"order by avg() on columns of table \"smb.language\""
input smb_language_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.language\". All fields are combined with a logical 'AND'."
input smb_language_bool_exp {
    _and: [smb_language_bool_exp]
    _not: smb_language_bool_exp
    _or: [smb_language_bool_exp]
    id: bigint_comparison_exp
    lang: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.language\""
input smb_language_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.language\""
input smb_language_insert_input {
    id: bigint
    lang: String
}

"order by max() on columns of table \"smb.language\""
input smb_language_max_order_by {
    id: order_by
    lang: order_by
}

"order by min() on columns of table \"smb.language\""
input smb_language_min_order_by {
    id: order_by
    lang: order_by
}

"input type for inserting object relation for remote table \"smb.language\""
input smb_language_obj_rel_insert_input {
    data: smb_language_insert_input!
    on_conflict: smb_language_on_conflict
}

"on conflict condition type for table \"smb.language\""
input smb_language_on_conflict {
    constraint: smb_language_constraint!
    update_columns: [smb_language_update_column!]!
    where: smb_language_bool_exp
}

"ordering options when selecting data from \"smb.language\""
input smb_language_order_by {
    id: order_by
    lang: order_by
}

"primary key columns input for table: \"smb.language\""
input smb_language_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.language\""
input smb_language_set_input {
    id: bigint
    lang: String
}

"order by stddev() on columns of table \"smb.language\""
input smb_language_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.language\""
input smb_language_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.language\""
input smb_language_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.language\""
input smb_language_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.language\""
input smb_language_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.language\""
input smb_language_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.language\""
input smb_language_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.licenses\""
input smb_licenses_aggregate_order_by {
    avg: smb_licenses_avg_order_by
    count: order_by
    max: smb_licenses_max_order_by
    min: smb_licenses_min_order_by
    stddev: smb_licenses_stddev_order_by
    stddev_pop: smb_licenses_stddev_pop_order_by
    stddev_samp: smb_licenses_stddev_samp_order_by
    sum: smb_licenses_sum_order_by
    var_pop: smb_licenses_var_pop_order_by
    var_samp: smb_licenses_var_samp_order_by
    variance: smb_licenses_variance_order_by
}

"input type for inserting array relation for remote table \"smb.licenses\""
input smb_licenses_arr_rel_insert_input {
    data: [smb_licenses_insert_input!]!
    on_conflict: smb_licenses_on_conflict
}

"order by avg() on columns of table \"smb.licenses\""
input smb_licenses_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.licenses\". All fields are combined with a logical 'AND'."
input smb_licenses_bool_exp {
    _and: [smb_licenses_bool_exp]
    _not: smb_licenses_bool_exp
    _or: [smb_licenses_bool_exp]
    id: bigint_comparison_exp
    key: String_comparison_exp
    licenses_translations: smb_licenses_translation_bool_exp
}

"input type for incrementing integer column in table \"smb.licenses\""
input smb_licenses_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.licenses\""
input smb_licenses_insert_input {
    id: bigint
    key: String
    licenses_translations: smb_licenses_translation_arr_rel_insert_input
}

"order by max() on columns of table \"smb.licenses\""
input smb_licenses_max_order_by {
    id: order_by
    key: order_by
}

"order by min() on columns of table \"smb.licenses\""
input smb_licenses_min_order_by {
    id: order_by
    key: order_by
}

"input type for inserting object relation for remote table \"smb.licenses\""
input smb_licenses_obj_rel_insert_input {
    data: smb_licenses_insert_input!
    on_conflict: smb_licenses_on_conflict
}

"on conflict condition type for table \"smb.licenses\""
input smb_licenses_on_conflict {
    constraint: smb_licenses_constraint!
    update_columns: [smb_licenses_update_column!]!
    where: smb_licenses_bool_exp
}

"ordering options when selecting data from \"smb.licenses\""
input smb_licenses_order_by {
    id: order_by
    key: order_by
    licenses_translations_aggregate: smb_licenses_translation_aggregate_order_by
}

"primary key columns input for table: \"smb.licenses\""
input smb_licenses_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.licenses\""
input smb_licenses_set_input {
    id: bigint
    key: String
}

"order by stddev() on columns of table \"smb.licenses\""
input smb_licenses_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.licenses\""
input smb_licenses_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.licenses\""
input smb_licenses_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.licenses\""
input smb_licenses_sum_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.licenses_translation\""
input smb_licenses_translation_aggregate_order_by {
    avg: smb_licenses_translation_avg_order_by
    count: order_by
    max: smb_licenses_translation_max_order_by
    min: smb_licenses_translation_min_order_by
    stddev: smb_licenses_translation_stddev_order_by
    stddev_pop: smb_licenses_translation_stddev_pop_order_by
    stddev_samp: smb_licenses_translation_stddev_samp_order_by
    sum: smb_licenses_translation_sum_order_by
    var_pop: smb_licenses_translation_var_pop_order_by
    var_samp: smb_licenses_translation_var_samp_order_by
    variance: smb_licenses_translation_variance_order_by
}

"input type for inserting array relation for remote table \"smb.licenses_translation\""
input smb_licenses_translation_arr_rel_insert_input {
    data: [smb_licenses_translation_insert_input!]!
    on_conflict: smb_licenses_translation_on_conflict
}

"order by avg() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_avg_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"Boolean expression to filter rows from the table \"smb.licenses_translation\". All fields are combined with a logical 'AND'."
input smb_licenses_translation_bool_exp {
    _and: [smb_licenses_translation_bool_exp]
    _not: smb_licenses_translation_bool_exp
    _or: [smb_licenses_translation_bool_exp]
    content: String_comparison_exp
    id: bigint_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    license: smb_licenses_bool_exp
    license_id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"smb.licenses_translation\""
input smb_licenses_translation_inc_input {
    id: bigint
    language_id: bigint
    license_id: bigint
}

"input type for inserting data into table \"smb.licenses_translation\""
input smb_licenses_translation_insert_input {
    content: String
    id: bigint
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    license: smb_licenses_obj_rel_insert_input
    license_id: bigint
}

"order by max() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_max_order_by {
    content: order_by
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by min() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_min_order_by {
    content: order_by
    id: order_by
    language_id: order_by
    license_id: order_by
}

"input type for inserting object relation for remote table \"smb.licenses_translation\""
input smb_licenses_translation_obj_rel_insert_input {
    data: smb_licenses_translation_insert_input!
    on_conflict: smb_licenses_translation_on_conflict
}

"on conflict condition type for table \"smb.licenses_translation\""
input smb_licenses_translation_on_conflict {
    constraint: smb_licenses_translation_constraint!
    update_columns: [smb_licenses_translation_update_column!]!
    where: smb_licenses_translation_bool_exp
}

"ordering options when selecting data from \"smb.licenses_translation\""
input smb_licenses_translation_order_by {
    content: order_by
    id: order_by
    language: smb_language_order_by
    language_id: order_by
    license: smb_licenses_order_by
    license_id: order_by
}

"primary key columns input for table: \"smb.licenses_translation\""
input smb_licenses_translation_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.licenses_translation\""
input smb_licenses_translation_set_input {
    content: String
    id: bigint
    language_id: bigint
    license_id: bigint
}

"order by stddev() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_stddev_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by stddev_pop() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_stddev_pop_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by stddev_samp() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_stddev_samp_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by sum() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_sum_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by var_pop() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_var_pop_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by var_samp() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_var_samp_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by variance() on columns of table \"smb.licenses_translation\""
input smb_licenses_translation_variance_order_by {
    id: order_by
    language_id: order_by
    license_id: order_by
}

"order by var_pop() on columns of table \"smb.licenses\""
input smb_licenses_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.licenses\""
input smb_licenses_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.licenses\""
input smb_licenses_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.objects\""
input smb_objects_aggregate_order_by {
    avg: smb_objects_avg_order_by
    count: order_by
    max: smb_objects_max_order_by
    min: smb_objects_min_order_by
    stddev: smb_objects_stddev_order_by
    stddev_pop: smb_objects_stddev_pop_order_by
    stddev_samp: smb_objects_stddev_samp_order_by
    sum: smb_objects_sum_order_by
    var_pop: smb_objects_var_pop_order_by
    var_samp: smb_objects_var_samp_order_by
    variance: smb_objects_variance_order_by
}

"input type for inserting array relation for remote table \"smb.objects\""
input smb_objects_arr_rel_insert_input {
    data: [smb_objects_insert_input!]!
    on_conflict: smb_objects_on_conflict
}

"order by avg() on columns of table \"smb.objects\""
input smb_objects_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.objects\". All fields are combined with a logical 'AND'."
input smb_objects_bool_exp {
    _and: [smb_objects_bool_exp]
    _not: smb_objects_bool_exp
    _or: [smb_objects_bool_exp]
    attachments: smb_attachments_bool_exp
    attribute_translations: smb_attribute_translations_bool_exp
    created_at: timestamptz_comparison_exp
    highlights: smb_highlights_bool_exp
    id: bigint_comparison_exp
    mds_id: String_comparison_exp
    topics_objects: smb_topics_objects_bool_exp
    tours_objects: smb_tours_objects_bool_exp
    updated_at: timestamptz_comparison_exp
}

"input type for incrementing integer column in table \"smb.objects\""
input smb_objects_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.objects\""
input smb_objects_insert_input {
    attachments: smb_attachments_arr_rel_insert_input
    attribute_translations: smb_attribute_translations_arr_rel_insert_input
    created_at: timestamptz
    highlights: smb_highlights_arr_rel_insert_input
    id: bigint
    mds_id: String
    topics_objects: smb_topics_objects_arr_rel_insert_input
    tours_objects: smb_tours_objects_arr_rel_insert_input
    updated_at: timestamptz
}

"order by max() on columns of table \"smb.objects\""
input smb_objects_max_order_by {
    created_at: order_by
    id: order_by
    mds_id: order_by
    updated_at: order_by
}

"order by min() on columns of table \"smb.objects\""
input smb_objects_min_order_by {
    created_at: order_by
    id: order_by
    mds_id: order_by
    updated_at: order_by
}

"input type for inserting object relation for remote table \"smb.objects\""
input smb_objects_obj_rel_insert_input {
    data: smb_objects_insert_input!
    on_conflict: smb_objects_on_conflict
}

"on conflict condition type for table \"smb.objects\""
input smb_objects_on_conflict {
    constraint: smb_objects_constraint!
    update_columns: [smb_objects_update_column!]!
    where: smb_objects_bool_exp
}

"ordering options when selecting data from \"smb.objects\""
input smb_objects_order_by {
    attachments_aggregate: smb_attachments_aggregate_order_by
    attribute_translations_aggregate: smb_attribute_translations_aggregate_order_by
    created_at: order_by
    highlights_aggregate: smb_highlights_aggregate_order_by
    id: order_by
    mds_id: order_by
    topics_objects_aggregate: smb_topics_objects_aggregate_order_by
    tours_objects_aggregate: smb_tours_objects_aggregate_order_by
    updated_at: order_by
}

"primary key columns input for table: \"smb.objects\""
input smb_objects_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.objects\""
input smb_objects_set_input {
    created_at: timestamptz
    id: bigint
    mds_id: String
    updated_at: timestamptz
}

"order by stddev() on columns of table \"smb.objects\""
input smb_objects_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.objects\""
input smb_objects_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.objects\""
input smb_objects_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.objects\""
input smb_objects_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.objects\""
input smb_objects_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.objects\""
input smb_objects_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.objects\""
input smb_objects_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.org_unit\""
input smb_org_unit_aggregate_order_by {
    avg: smb_org_unit_avg_order_by
    count: order_by
    max: smb_org_unit_max_order_by
    min: smb_org_unit_min_order_by
    stddev: smb_org_unit_stddev_order_by
    stddev_pop: smb_org_unit_stddev_pop_order_by
    stddev_samp: smb_org_unit_stddev_samp_order_by
    sum: smb_org_unit_sum_order_by
    var_pop: smb_org_unit_var_pop_order_by
    var_samp: smb_org_unit_var_samp_order_by
    variance: smb_org_unit_variance_order_by
}

"input type for inserting array relation for remote table \"smb.org_unit\""
input smb_org_unit_arr_rel_insert_input {
    data: [smb_org_unit_insert_input!]!
    on_conflict: smb_org_unit_on_conflict
}

"order by avg() on columns of table \"smb.org_unit\""
input smb_org_unit_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.org_unit\". All fields are combined with a logical 'AND'."
input smb_org_unit_bool_exp {
    _and: [smb_org_unit_bool_exp]
    _not: smb_org_unit_bool_exp
    _or: [smb_org_unit_bool_exp]
    highlights: smb_highlights_bool_exp
    id: bigint_comparison_exp
    name: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.org_unit\""
input smb_org_unit_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.org_unit\""
input smb_org_unit_insert_input {
    highlights: smb_highlights_arr_rel_insert_input
    id: bigint
    name: String
}

"order by max() on columns of table \"smb.org_unit\""
input smb_org_unit_max_order_by {
    id: order_by
    name: order_by
}

"order by min() on columns of table \"smb.org_unit\""
input smb_org_unit_min_order_by {
    id: order_by
    name: order_by
}

"input type for inserting object relation for remote table \"smb.org_unit\""
input smb_org_unit_obj_rel_insert_input {
    data: smb_org_unit_insert_input!
    on_conflict: smb_org_unit_on_conflict
}

"on conflict condition type for table \"smb.org_unit\""
input smb_org_unit_on_conflict {
    constraint: smb_org_unit_constraint!
    update_columns: [smb_org_unit_update_column!]!
    where: smb_org_unit_bool_exp
}

"ordering options when selecting data from \"smb.org_unit\""
input smb_org_unit_order_by {
    highlights_aggregate: smb_highlights_aggregate_order_by
    id: order_by
    name: order_by
}

"primary key columns input for table: \"smb.org_unit\""
input smb_org_unit_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.org_unit\""
input smb_org_unit_set_input {
    id: bigint
    name: String
}

"order by stddev() on columns of table \"smb.org_unit\""
input smb_org_unit_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.org_unit\""
input smb_org_unit_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.org_unit\""
input smb_org_unit_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.org_unit\""
input smb_org_unit_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.org_unit\""
input smb_org_unit_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.org_unit\""
input smb_org_unit_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.org_unit\""
input smb_org_unit_variance_order_by {
    id: order_by
}

input smb_search_object_aggregate_args {
    attachment: Boolean
    attributekeys: _varchar
    filterlang: String
    highlight: Boolean
    searchterm: String
}

input smb_search_object_args {
    attachment: Boolean
    attributekeys: _varchar
    filterlang: String
    highlight: Boolean
    objectlimit: Int
    objectoffset: Int
    searchterm: String
}

input smb_search_object_combined_args {
    and_search_values: _search_tuple
    attachment: Boolean
    attributekeys: _varchar
    filterlang: String
    highlight: Boolean
    not_search_values: _search_tuple
    or_search_values: _search_tuple
    searchterm: String
}

"order by aggregate values of table \"smb.search_suggestions\""
input smb_search_suggestions_aggregate_order_by {
    avg: smb_search_suggestions_avg_order_by
    count: order_by
    max: smb_search_suggestions_max_order_by
    min: smb_search_suggestions_min_order_by
    stddev: smb_search_suggestions_stddev_order_by
    stddev_pop: smb_search_suggestions_stddev_pop_order_by
    stddev_samp: smb_search_suggestions_stddev_samp_order_by
    sum: smb_search_suggestions_sum_order_by
    var_pop: smb_search_suggestions_var_pop_order_by
    var_samp: smb_search_suggestions_var_samp_order_by
    variance: smb_search_suggestions_variance_order_by
}

"order by avg() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_avg_order_by {
    counter: order_by
}

"Boolean expression to filter rows from the table \"smb.search_suggestions\". All fields are combined with a logical 'AND'."
input smb_search_suggestions_bool_exp {
    _and: [smb_search_suggestions_bool_exp]
    _not: smb_search_suggestions_bool_exp
    _or: [smb_search_suggestions_bool_exp]
    counter: bigint_comparison_exp
    lang: String_comparison_exp
    value: String_comparison_exp
}

"order by max() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_max_order_by {
    counter: order_by
    lang: order_by
    value: order_by
}

"order by min() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_min_order_by {
    counter: order_by
    lang: order_by
    value: order_by
}

"ordering options when selecting data from \"smb.search_suggestions\""
input smb_search_suggestions_order_by {
    counter: order_by
    lang: order_by
    value: order_by
}

"order by stddev() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_stddev_order_by {
    counter: order_by
}

"order by stddev_pop() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_stddev_pop_order_by {
    counter: order_by
}

"order by stddev_samp() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_stddev_samp_order_by {
    counter: order_by
}

"order by sum() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_sum_order_by {
    counter: order_by
}

"order by var_pop() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_var_pop_order_by {
    counter: order_by
}

"order by var_samp() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_var_samp_order_by {
    counter: order_by
}

"order by variance() on columns of table \"smb.search_suggestions\""
input smb_search_suggestions_variance_order_by {
    counter: order_by
}

"order by aggregate values of table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_aggregate_order_by {
    count: order_by
    max: smb_sync_cycle_type_max_order_by
    min: smb_sync_cycle_type_min_order_by
}

"input type for inserting array relation for remote table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_arr_rel_insert_input {
    data: [smb_sync_cycle_type_insert_input!]!
    on_conflict: smb_sync_cycle_type_on_conflict
}

"Boolean expression to filter rows from the table \"smb.sync_cycle_type\". All fields are combined with a logical 'AND'."
input smb_sync_cycle_type_bool_exp {
    _and: [smb_sync_cycle_type_bool_exp]
    _not: smb_sync_cycle_type_bool_exp
    _or: [smb_sync_cycle_type_bool_exp]
    comment: String_comparison_exp
    sync_cycles: smb_sync_cycles_bool_exp
    value: String_comparison_exp
}

"expression to compare columns of type smb_sync_cycle_type_enum. All fields are combined with logical 'AND'."
input smb_sync_cycle_type_enum_comparison_exp {
    _eq: smb_sync_cycle_type_enum
    _in: [smb_sync_cycle_type_enum!]
    _is_null: Boolean
    _neq: smb_sync_cycle_type_enum
    _nin: [smb_sync_cycle_type_enum!]
}

"input type for inserting data into table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_insert_input {
    comment: String
    sync_cycles: smb_sync_cycles_arr_rel_insert_input
    value: String
}

"order by max() on columns of table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_max_order_by {
    comment: order_by
    value: order_by
}

"order by min() on columns of table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_min_order_by {
    comment: order_by
    value: order_by
}

"input type for inserting object relation for remote table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_obj_rel_insert_input {
    data: smb_sync_cycle_type_insert_input!
    on_conflict: smb_sync_cycle_type_on_conflict
}

"on conflict condition type for table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_on_conflict {
    constraint: smb_sync_cycle_type_constraint!
    update_columns: [smb_sync_cycle_type_update_column!]!
    where: smb_sync_cycle_type_bool_exp
}

"ordering options when selecting data from \"smb.sync_cycle_type\""
input smb_sync_cycle_type_order_by {
    comment: order_by
    sync_cycles_aggregate: smb_sync_cycles_aggregate_order_by
    value: order_by
}

"primary key columns input for table: \"smb.sync_cycle_type\""
input smb_sync_cycle_type_pk_columns_input {
    value: String!
}

"input type for updating data in table \"smb.sync_cycle_type\""
input smb_sync_cycle_type_set_input {
    comment: String
    value: String
}

"order by aggregate values of table \"smb.sync_cycles\""
input smb_sync_cycles_aggregate_order_by {
    avg: smb_sync_cycles_avg_order_by
    count: order_by
    max: smb_sync_cycles_max_order_by
    min: smb_sync_cycles_min_order_by
    stddev: smb_sync_cycles_stddev_order_by
    stddev_pop: smb_sync_cycles_stddev_pop_order_by
    stddev_samp: smb_sync_cycles_stddev_samp_order_by
    sum: smb_sync_cycles_sum_order_by
    var_pop: smb_sync_cycles_var_pop_order_by
    var_samp: smb_sync_cycles_var_samp_order_by
    variance: smb_sync_cycles_variance_order_by
}

"input type for inserting array relation for remote table \"smb.sync_cycles\""
input smb_sync_cycles_arr_rel_insert_input {
    data: [smb_sync_cycles_insert_input!]!
    on_conflict: smb_sync_cycles_on_conflict
}

"order by avg() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.sync_cycles\". All fields are combined with a logical 'AND'."
input smb_sync_cycles_bool_exp {
    _and: [smb_sync_cycles_bool_exp]
    _not: smb_sync_cycles_bool_exp
    _or: [smb_sync_cycles_bool_exp]
    debug_information: String_comparison_exp
    id: bigint_comparison_exp
    sync_cycle_type: smb_sync_cycle_type_bool_exp
    timestamp: timestamptz_comparison_exp
    type: smb_sync_cycle_type_enum_comparison_exp
}

"input type for incrementing integer column in table \"smb.sync_cycles\""
input smb_sync_cycles_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.sync_cycles\""
input smb_sync_cycles_insert_input {
    debug_information: String
    id: bigint
    sync_cycle_type: smb_sync_cycle_type_obj_rel_insert_input
    timestamp: timestamptz
    type: smb_sync_cycle_type_enum
}

"order by max() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_max_order_by {
    debug_information: order_by
    id: order_by
    timestamp: order_by
}

"order by min() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_min_order_by {
    debug_information: order_by
    id: order_by
    timestamp: order_by
}

"input type for inserting object relation for remote table \"smb.sync_cycles\""
input smb_sync_cycles_obj_rel_insert_input {
    data: smb_sync_cycles_insert_input!
    on_conflict: smb_sync_cycles_on_conflict
}

"on conflict condition type for table \"smb.sync_cycles\""
input smb_sync_cycles_on_conflict {
    constraint: smb_sync_cycles_constraint!
    update_columns: [smb_sync_cycles_update_column!]!
    where: smb_sync_cycles_bool_exp
}

"ordering options when selecting data from \"smb.sync_cycles\""
input smb_sync_cycles_order_by {
    debug_information: order_by
    id: order_by
    sync_cycle_type: smb_sync_cycle_type_order_by
    timestamp: order_by
    type: order_by
}

"primary key columns input for table: \"smb.sync_cycles\""
input smb_sync_cycles_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.sync_cycles\""
input smb_sync_cycles_set_input {
    debug_information: String
    id: bigint
    timestamp: timestamptz
    type: smb_sync_cycle_type_enum
}

"order by stddev() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.sync_cycles\""
input smb_sync_cycles_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.topics\""
input smb_topics_aggregate_order_by {
    avg: smb_topics_avg_order_by
    count: order_by
    max: smb_topics_max_order_by
    min: smb_topics_min_order_by
    stddev: smb_topics_stddev_order_by
    stddev_pop: smb_topics_stddev_pop_order_by
    stddev_samp: smb_topics_stddev_samp_order_by
    sum: smb_topics_sum_order_by
    var_pop: smb_topics_var_pop_order_by
    var_samp: smb_topics_var_samp_order_by
    variance: smb_topics_variance_order_by
}

"input type for inserting array relation for remote table \"smb.topics\""
input smb_topics_arr_rel_insert_input {
    data: [smb_topics_insert_input!]!
    on_conflict: smb_topics_on_conflict
}

"order by avg() on columns of table \"smb.topics\""
input smb_topics_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.topics\". All fields are combined with a logical 'AND'."
input smb_topics_bool_exp {
    _and: [smb_topics_bool_exp]
    _not: smb_topics_bool_exp
    _or: [smb_topics_bool_exp]
    has_slide: Boolean_comparison_exp
    id: bigint_comparison_exp
    objects: smb_topics_objects_bool_exp
    preview_image: String_comparison_exp
    topics_translations: smb_topics_translations_bool_exp
}

"input type for incrementing integer column in table \"smb.topics\""
input smb_topics_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.topics\""
input smb_topics_insert_input {
    has_slide: Boolean
    id: bigint
    objects: smb_topics_objects_arr_rel_insert_input
    preview_image: String
    topics_translations: smb_topics_translations_arr_rel_insert_input
}

"order by max() on columns of table \"smb.topics\""
input smb_topics_max_order_by {
    id: order_by
    preview_image: order_by
}

"order by min() on columns of table \"smb.topics\""
input smb_topics_min_order_by {
    id: order_by
    preview_image: order_by
}

"input type for inserting object relation for remote table \"smb.topics\""
input smb_topics_obj_rel_insert_input {
    data: smb_topics_insert_input!
    on_conflict: smb_topics_on_conflict
}

"order by aggregate values of table \"smb.topics_objects\""
input smb_topics_objects_aggregate_order_by {
    avg: smb_topics_objects_avg_order_by
    count: order_by
    max: smb_topics_objects_max_order_by
    min: smb_topics_objects_min_order_by
    stddev: smb_topics_objects_stddev_order_by
    stddev_pop: smb_topics_objects_stddev_pop_order_by
    stddev_samp: smb_topics_objects_stddev_samp_order_by
    sum: smb_topics_objects_sum_order_by
    var_pop: smb_topics_objects_var_pop_order_by
    var_samp: smb_topics_objects_var_samp_order_by
    variance: smb_topics_objects_variance_order_by
}

"input type for inserting array relation for remote table \"smb.topics_objects\""
input smb_topics_objects_arr_rel_insert_input {
    data: [smb_topics_objects_insert_input!]!
    on_conflict: smb_topics_objects_on_conflict
}

"order by avg() on columns of table \"smb.topics_objects\""
input smb_topics_objects_avg_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"Boolean expression to filter rows from the table \"smb.topics_objects\". All fields are combined with a logical 'AND'."
input smb_topics_objects_bool_exp {
    _and: [smb_topics_objects_bool_exp]
    _not: smb_topics_objects_bool_exp
    _or: [smb_topics_objects_bool_exp]
    created_at: timestamptz_comparison_exp
    id: bigint_comparison_exp
    object: smb_objects_bool_exp
    objects_id: bigint_comparison_exp
    topic: smb_topics_bool_exp
    topics_id: bigint_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"input type for incrementing integer column in table \"smb.topics_objects\""
input smb_topics_objects_inc_input {
    id: bigint
    objects_id: bigint
    topics_id: bigint
}

"input type for inserting data into table \"smb.topics_objects\""
input smb_topics_objects_insert_input {
    created_at: timestamptz
    id: bigint
    object: smb_objects_obj_rel_insert_input
    objects_id: bigint
    topic: smb_topics_obj_rel_insert_input
    topics_id: bigint
    updated_at: timestamptz
}

"order by max() on columns of table \"smb.topics_objects\""
input smb_topics_objects_max_order_by {
    created_at: order_by
    id: order_by
    objects_id: order_by
    topics_id: order_by
    updated_at: order_by
}

"order by min() on columns of table \"smb.topics_objects\""
input smb_topics_objects_min_order_by {
    created_at: order_by
    id: order_by
    objects_id: order_by
    topics_id: order_by
    updated_at: order_by
}

"input type for inserting object relation for remote table \"smb.topics_objects\""
input smb_topics_objects_obj_rel_insert_input {
    data: smb_topics_objects_insert_input!
    on_conflict: smb_topics_objects_on_conflict
}

"on conflict condition type for table \"smb.topics_objects\""
input smb_topics_objects_on_conflict {
    constraint: smb_topics_objects_constraint!
    update_columns: [smb_topics_objects_update_column!]!
    where: smb_topics_objects_bool_exp
}

"ordering options when selecting data from \"smb.topics_objects\""
input smb_topics_objects_order_by {
    created_at: order_by
    id: order_by
    object: smb_objects_order_by
    objects_id: order_by
    topic: smb_topics_order_by
    topics_id: order_by
    updated_at: order_by
}

"primary key columns input for table: \"smb.topics_objects\""
input smb_topics_objects_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.topics_objects\""
input smb_topics_objects_set_input {
    created_at: timestamptz
    id: bigint
    objects_id: bigint
    topics_id: bigint
    updated_at: timestamptz
}

"order by stddev() on columns of table \"smb.topics_objects\""
input smb_topics_objects_stddev_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"order by stddev_pop() on columns of table \"smb.topics_objects\""
input smb_topics_objects_stddev_pop_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"order by stddev_samp() on columns of table \"smb.topics_objects\""
input smb_topics_objects_stddev_samp_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"order by sum() on columns of table \"smb.topics_objects\""
input smb_topics_objects_sum_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"order by var_pop() on columns of table \"smb.topics_objects\""
input smb_topics_objects_var_pop_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"order by var_samp() on columns of table \"smb.topics_objects\""
input smb_topics_objects_var_samp_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"order by variance() on columns of table \"smb.topics_objects\""
input smb_topics_objects_variance_order_by {
    id: order_by
    objects_id: order_by
    topics_id: order_by
}

"on conflict condition type for table \"smb.topics\""
input smb_topics_on_conflict {
    constraint: smb_topics_constraint!
    update_columns: [smb_topics_update_column!]!
    where: smb_topics_bool_exp
}

"ordering options when selecting data from \"smb.topics\""
input smb_topics_order_by {
    has_slide: order_by
    id: order_by
    objects_aggregate: smb_topics_objects_aggregate_order_by
    preview_image: order_by
    topics_translations_aggregate: smb_topics_translations_aggregate_order_by
}

"primary key columns input for table: \"smb.topics\""
input smb_topics_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.topics\""
input smb_topics_set_input {
    has_slide: Boolean
    id: bigint
    preview_image: String
}

"order by stddev() on columns of table \"smb.topics\""
input smb_topics_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.topics\""
input smb_topics_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.topics\""
input smb_topics_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.topics\""
input smb_topics_sum_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.topics_translations\""
input smb_topics_translations_aggregate_order_by {
    avg: smb_topics_translations_avg_order_by
    count: order_by
    max: smb_topics_translations_max_order_by
    min: smb_topics_translations_min_order_by
    stddev: smb_topics_translations_stddev_order_by
    stddev_pop: smb_topics_translations_stddev_pop_order_by
    stddev_samp: smb_topics_translations_stddev_samp_order_by
    sum: smb_topics_translations_sum_order_by
    var_pop: smb_topics_translations_var_pop_order_by
    var_samp: smb_topics_translations_var_samp_order_by
    variance: smb_topics_translations_variance_order_by
}

"input type for inserting array relation for remote table \"smb.topics_translations\""
input smb_topics_translations_arr_rel_insert_input {
    data: [smb_topics_translations_insert_input!]!
    on_conflict: smb_topics_translations_on_conflict
}

"order by avg() on columns of table \"smb.topics_translations\""
input smb_topics_translations_avg_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"Boolean expression to filter rows from the table \"smb.topics_translations\". All fields are combined with a logical 'AND'."
input smb_topics_translations_bool_exp {
    _and: [smb_topics_translations_bool_exp]
    _not: smb_topics_translations_bool_exp
    _or: [smb_topics_translations_bool_exp]
    description: String_comparison_exp
    id: bigint_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    title: String_comparison_exp
    topic: smb_topics_bool_exp
    topics_id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"smb.topics_translations\""
input smb_topics_translations_inc_input {
    id: bigint
    language_id: bigint
    topics_id: bigint
}

"input type for inserting data into table \"smb.topics_translations\""
input smb_topics_translations_insert_input {
    description: String
    id: bigint
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    title: String
    topic: smb_topics_obj_rel_insert_input
    topics_id: bigint
}

"order by max() on columns of table \"smb.topics_translations\""
input smb_topics_translations_max_order_by {
    description: order_by
    id: order_by
    language_id: order_by
    title: order_by
    topics_id: order_by
}

"order by min() on columns of table \"smb.topics_translations\""
input smb_topics_translations_min_order_by {
    description: order_by
    id: order_by
    language_id: order_by
    title: order_by
    topics_id: order_by
}

"input type for inserting object relation for remote table \"smb.topics_translations\""
input smb_topics_translations_obj_rel_insert_input {
    data: smb_topics_translations_insert_input!
    on_conflict: smb_topics_translations_on_conflict
}

"on conflict condition type for table \"smb.topics_translations\""
input smb_topics_translations_on_conflict {
    constraint: smb_topics_translations_constraint!
    update_columns: [smb_topics_translations_update_column!]!
    where: smb_topics_translations_bool_exp
}

"ordering options when selecting data from \"smb.topics_translations\""
input smb_topics_translations_order_by {
    description: order_by
    id: order_by
    language: smb_language_order_by
    language_id: order_by
    title: order_by
    topic: smb_topics_order_by
    topics_id: order_by
}

"primary key columns input for table: \"smb.topics_translations\""
input smb_topics_translations_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.topics_translations\""
input smb_topics_translations_set_input {
    description: String
    id: bigint
    language_id: bigint
    title: String
    topics_id: bigint
}

"order by stddev() on columns of table \"smb.topics_translations\""
input smb_topics_translations_stddev_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by stddev_pop() on columns of table \"smb.topics_translations\""
input smb_topics_translations_stddev_pop_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by stddev_samp() on columns of table \"smb.topics_translations\""
input smb_topics_translations_stddev_samp_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by sum() on columns of table \"smb.topics_translations\""
input smb_topics_translations_sum_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by var_pop() on columns of table \"smb.topics_translations\""
input smb_topics_translations_var_pop_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by var_samp() on columns of table \"smb.topics_translations\""
input smb_topics_translations_var_samp_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by variance() on columns of table \"smb.topics_translations\""
input smb_topics_translations_variance_order_by {
    id: order_by
    language_id: order_by
    topics_id: order_by
}

"order by var_pop() on columns of table \"smb.topics\""
input smb_topics_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.topics\""
input smb_topics_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.topics\""
input smb_topics_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"smb.tours\""
input smb_tours_aggregate_order_by {
    avg: smb_tours_avg_order_by
    count: order_by
    max: smb_tours_max_order_by
    min: smb_tours_min_order_by
    stddev: smb_tours_stddev_order_by
    stddev_pop: smb_tours_stddev_pop_order_by
    stddev_samp: smb_tours_stddev_samp_order_by
    sum: smb_tours_sum_order_by
    var_pop: smb_tours_var_pop_order_by
    var_samp: smb_tours_var_samp_order_by
    variance: smb_tours_variance_order_by
}

"input type for inserting array relation for remote table \"smb.tours\""
input smb_tours_arr_rel_insert_input {
    data: [smb_tours_insert_input!]!
    on_conflict: smb_tours_on_conflict
}

"order by avg() on columns of table \"smb.tours\""
input smb_tours_avg_order_by {
    id: order_by
    number: order_by
}

"Boolean expression to filter rows from the table \"smb.tours\". All fields are combined with a logical 'AND'."
input smb_tours_bool_exp {
    _and: [smb_tours_bool_exp]
    _not: smb_tours_bool_exp
    _or: [smb_tours_bool_exp]
    id: bigint_comparison_exp
    number: Int_comparison_exp
    preview_image: String_comparison_exp
    tours_objects: smb_tours_objects_bool_exp
    tours_translations: smb_tours_translation_bool_exp
}

"input type for incrementing integer column in table \"smb.tours\""
input smb_tours_inc_input {
    id: bigint
    number: Int
}

"input type for inserting data into table \"smb.tours\""
input smb_tours_insert_input {
    id: bigint
    number: Int
    preview_image: String
    tours_objects: smb_tours_objects_arr_rel_insert_input
    tours_translations: smb_tours_translation_arr_rel_insert_input
}

"order by max() on columns of table \"smb.tours\""
input smb_tours_max_order_by {
    id: order_by
    number: order_by
    preview_image: order_by
}

"order by min() on columns of table \"smb.tours\""
input smb_tours_min_order_by {
    id: order_by
    number: order_by
    preview_image: order_by
}

"input type for inserting object relation for remote table \"smb.tours\""
input smb_tours_obj_rel_insert_input {
    data: smb_tours_insert_input!
    on_conflict: smb_tours_on_conflict
}

"order by aggregate values of table \"smb.tours_objects\""
input smb_tours_objects_aggregate_order_by {
    avg: smb_tours_objects_avg_order_by
    count: order_by
    max: smb_tours_objects_max_order_by
    min: smb_tours_objects_min_order_by
    stddev: smb_tours_objects_stddev_order_by
    stddev_pop: smb_tours_objects_stddev_pop_order_by
    stddev_samp: smb_tours_objects_stddev_samp_order_by
    sum: smb_tours_objects_sum_order_by
    var_pop: smb_tours_objects_var_pop_order_by
    var_samp: smb_tours_objects_var_samp_order_by
    variance: smb_tours_objects_variance_order_by
}

"input type for inserting array relation for remote table \"smb.tours_objects\""
input smb_tours_objects_arr_rel_insert_input {
    data: [smb_tours_objects_insert_input!]!
    on_conflict: smb_tours_objects_on_conflict
}

"order by avg() on columns of table \"smb.tours_objects\""
input smb_tours_objects_avg_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"Boolean expression to filter rows from the table \"smb.tours_objects\". All fields are combined with a logical 'AND'."
input smb_tours_objects_bool_exp {
    _and: [smb_tours_objects_bool_exp]
    _not: smb_tours_objects_bool_exp
    _or: [smb_tours_objects_bool_exp]
    id: bigint_comparison_exp
    object: smb_objects_bool_exp
    object_id: bigint_comparison_exp
    sequence: Int_comparison_exp
    tour: smb_tours_bool_exp
    tour_id: bigint_comparison_exp
    tours_objects_translations: smb_tours_objects_translation_bool_exp
}

"input type for incrementing integer column in table \"smb.tours_objects\""
input smb_tours_objects_inc_input {
    id: bigint
    object_id: bigint
    sequence: Int
    tour_id: bigint
}

"input type for inserting data into table \"smb.tours_objects\""
input smb_tours_objects_insert_input {
    id: bigint
    object: smb_objects_obj_rel_insert_input
    object_id: bigint
    sequence: Int
    tour: smb_tours_obj_rel_insert_input
    tour_id: bigint
    tours_objects_translations: smb_tours_objects_translation_arr_rel_insert_input
}

"order by max() on columns of table \"smb.tours_objects\""
input smb_tours_objects_max_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by min() on columns of table \"smb.tours_objects\""
input smb_tours_objects_min_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"input type for inserting object relation for remote table \"smb.tours_objects\""
input smb_tours_objects_obj_rel_insert_input {
    data: smb_tours_objects_insert_input!
    on_conflict: smb_tours_objects_on_conflict
}

"on conflict condition type for table \"smb.tours_objects\""
input smb_tours_objects_on_conflict {
    constraint: smb_tours_objects_constraint!
    update_columns: [smb_tours_objects_update_column!]!
    where: smb_tours_objects_bool_exp
}

"ordering options when selecting data from \"smb.tours_objects\""
input smb_tours_objects_order_by {
    id: order_by
    object: smb_objects_order_by
    object_id: order_by
    sequence: order_by
    tour: smb_tours_order_by
    tour_id: order_by
    tours_objects_translations_aggregate: smb_tours_objects_translation_aggregate_order_by
}

"primary key columns input for table: \"smb.tours_objects\""
input smb_tours_objects_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.tours_objects\""
input smb_tours_objects_set_input {
    id: bigint
    object_id: bigint
    sequence: Int
    tour_id: bigint
}

"order by stddev() on columns of table \"smb.tours_objects\""
input smb_tours_objects_stddev_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by stddev_pop() on columns of table \"smb.tours_objects\""
input smb_tours_objects_stddev_pop_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by stddev_samp() on columns of table \"smb.tours_objects\""
input smb_tours_objects_stddev_samp_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by sum() on columns of table \"smb.tours_objects\""
input smb_tours_objects_sum_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by aggregate values of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_aggregate_order_by {
    avg: smb_tours_objects_translation_avg_order_by
    count: order_by
    max: smb_tours_objects_translation_max_order_by
    min: smb_tours_objects_translation_min_order_by
    stddev: smb_tours_objects_translation_stddev_order_by
    stddev_pop: smb_tours_objects_translation_stddev_pop_order_by
    stddev_samp: smb_tours_objects_translation_stddev_samp_order_by
    sum: smb_tours_objects_translation_sum_order_by
    var_pop: smb_tours_objects_translation_var_pop_order_by
    var_samp: smb_tours_objects_translation_var_samp_order_by
    variance: smb_tours_objects_translation_variance_order_by
}

"input type for inserting array relation for remote table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_arr_rel_insert_input {
    data: [smb_tours_objects_translation_insert_input!]!
    on_conflict: smb_tours_objects_translation_on_conflict
}

"order by avg() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_avg_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"Boolean expression to filter rows from the table \"smb.tours_objects_translation\". All fields are combined with a logical 'AND'."
input smb_tours_objects_translation_bool_exp {
    _and: [smb_tours_objects_translation_bool_exp]
    _not: smb_tours_objects_translation_bool_exp
    _or: [smb_tours_objects_translation_bool_exp]
    abstract: String_comparison_exp
    description: String_comparison_exp
    id: bigint_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    tour_object_id: bigint_comparison_exp
    tours_object: smb_tours_objects_bool_exp
}

"input type for incrementing integer column in table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_inc_input {
    id: bigint
    language_id: bigint
    tour_object_id: bigint
}

"input type for inserting data into table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_insert_input {
    abstract: String
    description: String
    id: bigint
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    tour_object_id: bigint
    tours_object: smb_tours_objects_obj_rel_insert_input
}

"order by max() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_max_order_by {
    abstract: order_by
    description: order_by
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by min() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_min_order_by {
    abstract: order_by
    description: order_by
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"input type for inserting object relation for remote table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_obj_rel_insert_input {
    data: smb_tours_objects_translation_insert_input!
    on_conflict: smb_tours_objects_translation_on_conflict
}

"on conflict condition type for table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_on_conflict {
    constraint: smb_tours_objects_translation_constraint!
    update_columns: [smb_tours_objects_translation_update_column!]!
    where: smb_tours_objects_translation_bool_exp
}

"ordering options when selecting data from \"smb.tours_objects_translation\""
input smb_tours_objects_translation_order_by {
    abstract: order_by
    description: order_by
    id: order_by
    language: smb_language_order_by
    language_id: order_by
    tour_object_id: order_by
    tours_object: smb_tours_objects_order_by
}

"primary key columns input for table: \"smb.tours_objects_translation\""
input smb_tours_objects_translation_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_set_input {
    abstract: String
    description: String
    id: bigint
    language_id: bigint
    tour_object_id: bigint
}

"order by stddev() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_stddev_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by stddev_pop() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_stddev_pop_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by stddev_samp() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_stddev_samp_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by sum() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_sum_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by var_pop() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_var_pop_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by var_samp() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_var_samp_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by variance() on columns of table \"smb.tours_objects_translation\""
input smb_tours_objects_translation_variance_order_by {
    id: order_by
    language_id: order_by
    tour_object_id: order_by
}

"order by var_pop() on columns of table \"smb.tours_objects\""
input smb_tours_objects_var_pop_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by var_samp() on columns of table \"smb.tours_objects\""
input smb_tours_objects_var_samp_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"order by variance() on columns of table \"smb.tours_objects\""
input smb_tours_objects_variance_order_by {
    id: order_by
    object_id: order_by
    sequence: order_by
    tour_id: order_by
}

"on conflict condition type for table \"smb.tours\""
input smb_tours_on_conflict {
    constraint: smb_tours_constraint!
    update_columns: [smb_tours_update_column!]!
    where: smb_tours_bool_exp
}

"ordering options when selecting data from \"smb.tours\""
input smb_tours_order_by {
    id: order_by
    number: order_by
    preview_image: order_by
    tours_objects_aggregate: smb_tours_objects_aggregate_order_by
    tours_translations_aggregate: smb_tours_translation_aggregate_order_by
}

"primary key columns input for table: \"smb.tours\""
input smb_tours_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.tours\""
input smb_tours_set_input {
    id: bigint
    number: Int
    preview_image: String
}

"order by stddev() on columns of table \"smb.tours\""
input smb_tours_stddev_order_by {
    id: order_by
    number: order_by
}

"order by stddev_pop() on columns of table \"smb.tours\""
input smb_tours_stddev_pop_order_by {
    id: order_by
    number: order_by
}

"order by stddev_samp() on columns of table \"smb.tours\""
input smb_tours_stddev_samp_order_by {
    id: order_by
    number: order_by
}

"order by sum() on columns of table \"smb.tours\""
input smb_tours_sum_order_by {
    id: order_by
    number: order_by
}

"order by aggregate values of table \"smb.tours_translation\""
input smb_tours_translation_aggregate_order_by {
    avg: smb_tours_translation_avg_order_by
    count: order_by
    max: smb_tours_translation_max_order_by
    min: smb_tours_translation_min_order_by
    stddev: smb_tours_translation_stddev_order_by
    stddev_pop: smb_tours_translation_stddev_pop_order_by
    stddev_samp: smb_tours_translation_stddev_samp_order_by
    sum: smb_tours_translation_sum_order_by
    var_pop: smb_tours_translation_var_pop_order_by
    var_samp: smb_tours_translation_var_samp_order_by
    variance: smb_tours_translation_variance_order_by
}

"input type for inserting array relation for remote table \"smb.tours_translation\""
input smb_tours_translation_arr_rel_insert_input {
    data: [smb_tours_translation_insert_input!]!
    on_conflict: smb_tours_translation_on_conflict
}

"order by avg() on columns of table \"smb.tours_translation\""
input smb_tours_translation_avg_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"Boolean expression to filter rows from the table \"smb.tours_translation\". All fields are combined with a logical 'AND'."
input smb_tours_translation_bool_exp {
    _and: [smb_tours_translation_bool_exp]
    _not: smb_tours_translation_bool_exp
    _or: [smb_tours_translation_bool_exp]
    abstract: String_comparison_exp
    description: String_comparison_exp
    id: bigint_comparison_exp
    language: smb_language_bool_exp
    language_id: bigint_comparison_exp
    subtitle: String_comparison_exp
    title: String_comparison_exp
    tour: smb_tours_bool_exp
    tour_id: bigint_comparison_exp
}

"input type for incrementing integer column in table \"smb.tours_translation\""
input smb_tours_translation_inc_input {
    id: bigint
    language_id: bigint
    tour_id: bigint
}

"input type for inserting data into table \"smb.tours_translation\""
input smb_tours_translation_insert_input {
    abstract: String
    description: String
    id: bigint
    language: smb_language_obj_rel_insert_input
    language_id: bigint
    subtitle: String
    title: String
    tour: smb_tours_obj_rel_insert_input
    tour_id: bigint
}

"order by max() on columns of table \"smb.tours_translation\""
input smb_tours_translation_max_order_by {
    abstract: order_by
    description: order_by
    id: order_by
    language_id: order_by
    subtitle: order_by
    title: order_by
    tour_id: order_by
}

"order by min() on columns of table \"smb.tours_translation\""
input smb_tours_translation_min_order_by {
    abstract: order_by
    description: order_by
    id: order_by
    language_id: order_by
    subtitle: order_by
    title: order_by
    tour_id: order_by
}

"input type for inserting object relation for remote table \"smb.tours_translation\""
input smb_tours_translation_obj_rel_insert_input {
    data: smb_tours_translation_insert_input!
    on_conflict: smb_tours_translation_on_conflict
}

"on conflict condition type for table \"smb.tours_translation\""
input smb_tours_translation_on_conflict {
    constraint: smb_tours_translation_constraint!
    update_columns: [smb_tours_translation_update_column!]!
    where: smb_tours_translation_bool_exp
}

"ordering options when selecting data from \"smb.tours_translation\""
input smb_tours_translation_order_by {
    abstract: order_by
    description: order_by
    id: order_by
    language: smb_language_order_by
    language_id: order_by
    subtitle: order_by
    title: order_by
    tour: smb_tours_order_by
    tour_id: order_by
}

"primary key columns input for table: \"smb.tours_translation\""
input smb_tours_translation_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.tours_translation\""
input smb_tours_translation_set_input {
    abstract: String
    description: String
    id: bigint
    language_id: bigint
    subtitle: String
    title: String
    tour_id: bigint
}

"order by stddev() on columns of table \"smb.tours_translation\""
input smb_tours_translation_stddev_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by stddev_pop() on columns of table \"smb.tours_translation\""
input smb_tours_translation_stddev_pop_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by stddev_samp() on columns of table \"smb.tours_translation\""
input smb_tours_translation_stddev_samp_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by sum() on columns of table \"smb.tours_translation\""
input smb_tours_translation_sum_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by var_pop() on columns of table \"smb.tours_translation\""
input smb_tours_translation_var_pop_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by var_samp() on columns of table \"smb.tours_translation\""
input smb_tours_translation_var_samp_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by variance() on columns of table \"smb.tours_translation\""
input smb_tours_translation_variance_order_by {
    id: order_by
    language_id: order_by
    tour_id: order_by
}

"order by var_pop() on columns of table \"smb.tours\""
input smb_tours_var_pop_order_by {
    id: order_by
    number: order_by
}

"order by var_samp() on columns of table \"smb.tours\""
input smb_tours_var_samp_order_by {
    id: order_by
    number: order_by
}

"order by variance() on columns of table \"smb.tours\""
input smb_tours_variance_order_by {
    id: order_by
    number: order_by
}

"order by aggregate values of table \"smb.user\""
input smb_user_aggregate_order_by {
    avg: smb_user_avg_order_by
    count: order_by
    max: smb_user_max_order_by
    min: smb_user_min_order_by
    stddev: smb_user_stddev_order_by
    stddev_pop: smb_user_stddev_pop_order_by
    stddev_samp: smb_user_stddev_samp_order_by
    sum: smb_user_sum_order_by
    var_pop: smb_user_var_pop_order_by
    var_samp: smb_user_var_samp_order_by
    variance: smb_user_variance_order_by
}

"input type for inserting array relation for remote table \"smb.user\""
input smb_user_arr_rel_insert_input {
    data: [smb_user_insert_input!]!
    on_conflict: smb_user_on_conflict
}

"order by avg() on columns of table \"smb.user\""
input smb_user_avg_order_by {
    role_id: order_by
}

"Boolean expression to filter rows from the table \"smb.user\". All fields are combined with a logical 'AND'."
input smb_user_bool_exp {
    _and: [smb_user_bool_exp]
    _not: smb_user_bool_exp
    _or: [smb_user_bool_exp]
    email: String_comparison_exp
    id: uuid_comparison_exp
    password: String_comparison_exp
    role_id: Int_comparison_exp
    user_role: smb_user_role_bool_exp
}

"input type for incrementing integer column in table \"smb.user\""
input smb_user_inc_input {
    role_id: Int
}

"input type for inserting data into table \"smb.user\""
input smb_user_insert_input {
    email: String
    id: uuid
    password: String
    role_id: Int
    user_role: smb_user_role_obj_rel_insert_input
}

"order by max() on columns of table \"smb.user\""
input smb_user_max_order_by {
    email: order_by
    id: order_by
    password: order_by
    role_id: order_by
}

"order by min() on columns of table \"smb.user\""
input smb_user_min_order_by {
    email: order_by
    id: order_by
    password: order_by
    role_id: order_by
}

"input type for inserting object relation for remote table \"smb.user\""
input smb_user_obj_rel_insert_input {
    data: smb_user_insert_input!
    on_conflict: smb_user_on_conflict
}

"on conflict condition type for table \"smb.user\""
input smb_user_on_conflict {
    constraint: smb_user_constraint!
    update_columns: [smb_user_update_column!]!
    where: smb_user_bool_exp
}

"ordering options when selecting data from \"smb.user\""
input smb_user_order_by {
    email: order_by
    id: order_by
    password: order_by
    role_id: order_by
    user_role: smb_user_role_order_by
}

"primary key columns input for table: \"smb.user\""
input smb_user_pk_columns_input {
    id: uuid!
}

"order by aggregate values of table \"smb.user_role\""
input smb_user_role_aggregate_order_by {
    avg: smb_user_role_avg_order_by
    count: order_by
    max: smb_user_role_max_order_by
    min: smb_user_role_min_order_by
    stddev: smb_user_role_stddev_order_by
    stddev_pop: smb_user_role_stddev_pop_order_by
    stddev_samp: smb_user_role_stddev_samp_order_by
    sum: smb_user_role_sum_order_by
    var_pop: smb_user_role_var_pop_order_by
    var_samp: smb_user_role_var_samp_order_by
    variance: smb_user_role_variance_order_by
}

"input type for inserting array relation for remote table \"smb.user_role\""
input smb_user_role_arr_rel_insert_input {
    data: [smb_user_role_insert_input!]!
    on_conflict: smb_user_role_on_conflict
}

"order by avg() on columns of table \"smb.user_role\""
input smb_user_role_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.user_role\". All fields are combined with a logical 'AND'."
input smb_user_role_bool_exp {
    _and: [smb_user_role_bool_exp]
    _not: smb_user_role_bool_exp
    _or: [smb_user_role_bool_exp]
    id: bigint_comparison_exp
    role: String_comparison_exp
}

"input type for incrementing integer column in table \"smb.user_role\""
input smb_user_role_inc_input {
    id: bigint
}

"input type for inserting data into table \"smb.user_role\""
input smb_user_role_insert_input {
    id: bigint
    role: String
}

"order by max() on columns of table \"smb.user_role\""
input smb_user_role_max_order_by {
    id: order_by
    role: order_by
}

"order by min() on columns of table \"smb.user_role\""
input smb_user_role_min_order_by {
    id: order_by
    role: order_by
}

"input type for inserting object relation for remote table \"smb.user_role\""
input smb_user_role_obj_rel_insert_input {
    data: smb_user_role_insert_input!
    on_conflict: smb_user_role_on_conflict
}

"on conflict condition type for table \"smb.user_role\""
input smb_user_role_on_conflict {
    constraint: smb_user_role_constraint!
    update_columns: [smb_user_role_update_column!]!
    where: smb_user_role_bool_exp
}

"ordering options when selecting data from \"smb.user_role\""
input smb_user_role_order_by {
    id: order_by
    role: order_by
}

"primary key columns input for table: \"smb.user_role\""
input smb_user_role_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"smb.user_role\""
input smb_user_role_set_input {
    id: bigint
    role: String
}

"order by stddev() on columns of table \"smb.user_role\""
input smb_user_role_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.user_role\""
input smb_user_role_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.user_role\""
input smb_user_role_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.user_role\""
input smb_user_role_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.user_role\""
input smb_user_role_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.user_role\""
input smb_user_role_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.user_role\""
input smb_user_role_variance_order_by {
    id: order_by
}

"input type for updating data in table \"smb.user\""
input smb_user_set_input {
    email: String
    id: uuid
    password: String
    role_id: Int
}

"order by stddev() on columns of table \"smb.user\""
input smb_user_stddev_order_by {
    role_id: order_by
}

"order by stddev_pop() on columns of table \"smb.user\""
input smb_user_stddev_pop_order_by {
    role_id: order_by
}

"order by stddev_samp() on columns of table \"smb.user\""
input smb_user_stddev_samp_order_by {
    role_id: order_by
}

"order by sum() on columns of table \"smb.user\""
input smb_user_sum_order_by {
    role_id: order_by
}

"order by var_pop() on columns of table \"smb.user\""
input smb_user_var_pop_order_by {
    role_id: order_by
}

"order by var_samp() on columns of table \"smb.user\""
input smb_user_var_samp_order_by {
    role_id: order_by
}

"order by variance() on columns of table \"smb.user\""
input smb_user_variance_order_by {
    role_id: order_by
}

"expression to compare columns of type timestamptz. All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"expression to compare columns of type uuid. All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar _search_tuple

scalar _varchar

scalar bigint

scalar timestamptz

scalar uuid