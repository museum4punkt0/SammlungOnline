input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  or: [Boolean]
  startsWith: Boolean
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type Category {
  createdAt: DateTime
  hero: ComponentGlobalRichtextModule
  isVisibleInListView: Boolean
  locale: String
  localizations(filters: CategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryRelationResponseCollection
  publishedAt: DateTime
  slug: String
  stories(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
  subtitle: String
  teaser_image: UploadFileEntityResponse
  title: String
  tours(filters: TourFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourRelationResponseCollection
  updatedAt: DateTime
  versionNumber: Int
  versions(filters: CategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryRelationResponseCollection
  vuid: String
}

type CategoryEntity {
  attributes: Category
  id: ID
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  and: [CategoryFiltersInput]
  createdAt: DateTimeFilterInput
  hero: ComponentGlobalRichtextModuleFiltersInput
  id: IDFilterInput
  isVisibleInListView: BooleanFilterInput
  locale: StringFilterInput
  localizations: CategoryFiltersInput
  not: CategoryFiltersInput
  or: [CategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  stories: StoryFiltersInput
  subtitle: StringFilterInput
  title: StringFilterInput
  tours: TourFiltersInput
  updatedAt: DateTimeFilterInput
  versionNumber: IntFilterInput
  versions: CategoryFiltersInput
  vuid: StringFilterInput
}

input CategoryInput {
  hero: ComponentGlobalRichtextModuleInput
  isVisibleInListView: Boolean
  publishedAt: DateTime
  sitemap_exclude: Boolean
  slug: String
  stories: [ID]
  subtitle: String
  teaser_image: ID
  title: String
  tours: [ID]
  versionNumber: Int
  versions: [ID]
  vuid: String
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

type ComponentComponentsBannerCard {
  headline: String!
  id: ID!
  subHeadline: String
  text: String
}

type ComponentComponentsBreadcrumbsLink {
  collapseText: String
  expandText: String
  href: String
  id: ID!
  title: String
}

input ComponentComponentsBreadcrumbsLinkInput {
  collapseText: String
  expandText: String
  href: String
  id: ID
  title: String
}

type ComponentComponentsButtonComponent {
  closedState: String
  id: ID!
  openState: String
}

type ComponentComponentsCardLinkComponent {
  firstLinkHref: String
  firstLinkTitle: String
  headline: String
  id: ID!
  secondLinkHref: String
  secondLinkTitle: String
  thirdLinkHref: String
  thirdLinkTitle: String
}

input ComponentComponentsCardLinkComponentFiltersInput {
  and: [ComponentComponentsCardLinkComponentFiltersInput]
  firstLinkHref: StringFilterInput
  firstLinkTitle: StringFilterInput
  headline: StringFilterInput
  not: ComponentComponentsCardLinkComponentFiltersInput
  or: [ComponentComponentsCardLinkComponentFiltersInput]
  secondLinkHref: StringFilterInput
  secondLinkTitle: StringFilterInput
  thirdLinkHref: StringFilterInput
  thirdLinkTitle: StringFilterInput
}

type ComponentComponentsContentCardComponent {
  backgroundColor: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BACKGROUNDCOLOR
  backgroundStyle: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BACKGROUNDSTYLE
  borderColor: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BORDERCOLOR
  borderWidth: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BORDERWIDTH
  cardWidth: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_CARDWIDTH
  contentAlignment: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_CONTENTALIGNMENT
  headline: String
  headlineAlignment: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEALIGNMENT
  headlineColor: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINECOLOR
  headlineDecoration: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEDECORATION
  headlineFontSize: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEFONTSIZE
  headlineOrientation: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEORIENTATION
  headlineStyle: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINESTYLE
  headlineWeight: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEWEIGHT
  id: ID!
  image: UploadFileEntityResponse
  imagePosition: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_IMAGEPOSITION
  link: ComponentComponentsLinkComponent
  linkColor: ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_LINKCOLOR
}

input ComponentComponentsContentCardComponentFiltersInput {
  and: [ComponentComponentsContentCardComponentFiltersInput]
  backgroundColor: StringFilterInput
  backgroundStyle: StringFilterInput
  borderColor: StringFilterInput
  borderWidth: StringFilterInput
  cardWidth: StringFilterInput
  contentAlignment: StringFilterInput
  headline: StringFilterInput
  headlineAlignment: StringFilterInput
  headlineColor: StringFilterInput
  headlineDecoration: StringFilterInput
  headlineFontSize: StringFilterInput
  headlineOrientation: StringFilterInput
  headlineStyle: StringFilterInput
  headlineWeight: StringFilterInput
  imagePosition: StringFilterInput
  link: ComponentComponentsLinkComponentFiltersInput
  linkColor: StringFilterInput
  not: ComponentComponentsContentCardComponentFiltersInput
  or: [ComponentComponentsContentCardComponentFiltersInput]
}

type ComponentComponentsCookie {
  button: String
  headline: String
  id: ID!
  overlayText: String
  showCookie: Boolean
  text: String
}

input ComponentComponentsCookieInput {
  button: String
  headline: String
  id: ID
  overlayText: String
  showCookie: Boolean
  text: String
}

type ComponentComponentsEasyDbItems {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  headline: String
  id: ID!
  layout: ENUM_COMPONENTCOMPONENTSEASYDBITEMS_LAYOUT
  text: String
  textColumns: ENUM_COMPONENTCOMPONENTSEASYDBITEMS_TEXTCOLUMNS
  textPosition: ENUM_COMPONENTCOMPONENTSEASYDBITEMS_TEXTPOSITION
}

type ComponentComponentsEasyDbRef {
  id: ID!
  objectFit: ENUM_COMPONENTCOMPONENTSEASYDBREF_OBJECTFIT
  ref: String!
}

input ComponentComponentsEasyDbRefFiltersInput {
  and: [ComponentComponentsEasyDbRefFiltersInput]
  not: ComponentComponentsEasyDbRefFiltersInput
  objectFit: StringFilterInput
  or: [ComponentComponentsEasyDbRefFiltersInput]
  ref: StringFilterInput
}

type ComponentComponentsHeadlineComponent {
  headline: String
  id: ID!
  level: Int!
}

type ComponentComponentsImageCard {
  asset: UploadFileEntityResponse!
  header: String
  id: ID!
  slug: String
  subHeader: String
}

type ComponentComponentsImageMapCard {
  headline: String
  id: ID!
  image: UploadFileEntityResponse
  text: String
  xCoordinates: Long!
  yCoordinates: Long!
}

input ComponentComponentsImageMapCardFiltersInput {
  and: [ComponentComponentsImageMapCardFiltersInput]
  headline: StringFilterInput
  not: ComponentComponentsImageMapCardFiltersInput
  or: [ComponentComponentsImageMapCardFiltersInput]
  text: StringFilterInput
  xCoordinates: LongFilterInput
  yCoordinates: LongFilterInput
}

type ComponentComponentsImageScrollCard {
  headline: String!
  id: ID!
  subHeadline: String
}

type ComponentComponentsLegalPages {
  block(filters: ComponentComponentsSmbLegalPagesBlockFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsSmbLegalPagesBlock]
  footerLink: String
  header: String
  id: ID!
  matomo: Boolean
  slug: String
}

type ComponentComponentsLinkComponent {
  category: CategoryEntityResponse
  href: String
  id: ID!
  story: StoryEntityResponse
  title: String
  topic: TopicEntityResponse
}

input ComponentComponentsLinkComponentFiltersInput {
  and: [ComponentComponentsLinkComponentFiltersInput]
  category: CategoryFiltersInput
  href: StringFilterInput
  not: ComponentComponentsLinkComponentFiltersInput
  or: [ComponentComponentsLinkComponentFiltersInput]
  story: StoryFiltersInput
  title: StringFilterInput
  topic: TopicFiltersInput
}

type ComponentComponentsMediaComponent {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  headline: String
  id: ID!
  layout: ENUM_COMPONENTCOMPONENTSMEDIACOMPONENT_LAYOUT
  text: String
  textColumns: ENUM_COMPONENTCOMPONENTSMEDIACOMPONENT_TEXTCOLUMNS
  textPosition: ENUM_COMPONENTCOMPONENTSMEDIACOMPONENT_TEXTPOSITION
  thumbnail: UploadFileEntityResponse
  youtubeVideoUrl: String
}

type ComponentComponentsModelInfoPoints {
  asset: UploadFileEntityResponse!
  headline: String
  id: ID!
  slug: ENUM_COMPONENTCOMPONENTSMODELINFOPOINTS_SLUG
  text: String
}

input ComponentComponentsModelInfoPointsFiltersInput {
  and: [ComponentComponentsModelInfoPointsFiltersInput]
  headline: StringFilterInput
  not: ComponentComponentsModelInfoPointsFiltersInput
  or: [ComponentComponentsModelInfoPointsFiltersInput]
  slug: StringFilterInput
  text: StringFilterInput
}

type ComponentComponentsNavigationLinkComponent {
  href: String
  id: ID!
  slug: ENUM_COMPONENTCOMPONENTSNAVIGATIONLINKCOMPONENT_SLUG
  subTitle: String
  title: String
}

input ComponentComponentsNavigationLinkComponentFiltersInput {
  and: [ComponentComponentsNavigationLinkComponentFiltersInput]
  href: StringFilterInput
  not: ComponentComponentsNavigationLinkComponentFiltersInput
  or: [ComponentComponentsNavigationLinkComponentFiltersInput]
  slug: StringFilterInput
  subTitle: StringFilterInput
  title: StringFilterInput
}

input ComponentComponentsNavigationLinkComponentInput {
  href: String
  id: ID
  slug: ENUM_COMPONENTCOMPONENTSNAVIGATIONLINKCOMPONENT_SLUG
  subTitle: String
  title: String
}

type ComponentComponentsRichTextComponent {
  headline: String
  id: ID!
  layout: ENUM_COMPONENTCOMPONENTSRICHTEXTCOMPONENT_LAYOUT
  level: Int
  text: String
  textColumns: ENUM_COMPONENTCOMPONENTSRICHTEXTCOMPONENT_TEXTCOLUMNS
}

input ComponentComponentsRichTextComponentFiltersInput {
  and: [ComponentComponentsRichTextComponentFiltersInput]
  headline: StringFilterInput
  layout: StringFilterInput
  level: IntFilterInput
  not: ComponentComponentsRichTextComponentFiltersInput
  or: [ComponentComponentsRichTextComponentFiltersInput]
  text: StringFilterInput
  textColumns: StringFilterInput
}

input ComponentComponentsRichTextComponentInput {
  headline: String
  id: ID
  layout: ENUM_COMPONENTCOMPONENTSRICHTEXTCOMPONENT_LAYOUT
  level: Int
  text: String
  textColumns: ENUM_COMPONENTCOMPONENTSRICHTEXTCOMPONENT_TEXTCOLUMNS
}

type ComponentComponentsSimpleLink {
  href: String
  id: ID!
  title: String
}

input ComponentComponentsSimpleLinkFiltersInput {
  and: [ComponentComponentsSimpleLinkFiltersInput]
  href: StringFilterInput
  not: ComponentComponentsSimpleLinkFiltersInput
  or: [ComponentComponentsSimpleLinkFiltersInput]
  title: StringFilterInput
}

input ComponentComponentsSimpleLinkInput {
  href: String
  id: ID
  title: String
}

type ComponentComponentsSlug {
  id: ID!
  slug: String
}

type ComponentComponentsSmbCollectionsBlock {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  cardCtaText: String
  headline: String
  id: ID!
  text: String
  type: ENUM_COMPONENTCOMPONENTSSMBCOLLECTIONSBLOCK_TYPE!
}

type ComponentComponentsSmbDownloadModule {
  buttonText: String
  header: String
  id: ID!
  text: String
}

input ComponentComponentsSmbDownloadModuleInput {
  buttonText: String
  header: String
  id: ID
  text: String
}

type ComponentComponentsSmbHeaderMenuItems {
  headline: String
  href: String
  id: ID!
  subHeadline: String
  type: ENUM_COMPONENTCOMPONENTSSMBHEADERMENUITEMS_TYPE!
}

input ComponentComponentsSmbHeaderMenuItemsFiltersInput {
  and: [ComponentComponentsSmbHeaderMenuItemsFiltersInput]
  headline: StringFilterInput
  href: StringFilterInput
  not: ComponentComponentsSmbHeaderMenuItemsFiltersInput
  or: [ComponentComponentsSmbHeaderMenuItemsFiltersInput]
  subHeadline: StringFilterInput
  type: StringFilterInput
}

input ComponentComponentsSmbHeaderMenuItemsInput {
  headline: String
  href: String
  id: ID
  subHeadline: String
  type: ENUM_COMPONENTCOMPONENTSSMBHEADERMENUITEMS_TYPE
}

type ComponentComponentsSmbHighlightsBlock {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  headline: String
  id: ID!
  text: String
  type: ENUM_COMPONENTCOMPONENTSSMBHIGHLIGHTSBLOCK_TYPE!
}

type ComponentComponentsSmbLegalPagesBlock {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  id: ID!
  text: String
  videoAssets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
}

input ComponentComponentsSmbLegalPagesBlockFiltersInput {
  and: [ComponentComponentsSmbLegalPagesBlockFiltersInput]
  not: ComponentComponentsSmbLegalPagesBlockFiltersInput
  or: [ComponentComponentsSmbLegalPagesBlockFiltersInput]
  text: StringFilterInput
}

type ComponentComponentsSmbResearchModal {
  downloadSection: ComponentComponentsSmbDownloadModule
  id: ID!
  webSection: ComponentComponentsSmbWebModule
}

input ComponentComponentsSmbResearchModalInput {
  downloadSection: ComponentComponentsSmbDownloadModuleInput
  id: ID
  webSection: ComponentComponentsSmbWebModuleInput
}

type ComponentComponentsSmbSearchButtonBlock {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  headline: String!
  id: ID!
  searchButtonGroupHeadline1: String
  searchButtonGroupHeadline2: String
  searchButtonGroupHeadline3: String
  text: String
}

type ComponentComponentsSmbSection {
  CollectionsBlock: ComponentComponentsSmbCollectionsBlock
  HighlightsBlock: ComponentComponentsSmbHighlightsBlock
  SearchButtonBlock: ComponentComponentsSmbSearchButtonBlock
  TextBlock: ComponentComponentsSmbTextCard
  Type: ENUM_COMPONENTCOMPONENTSSMBSECTION_TYPE
  VideoBlock: ComponentComponentsSmbVideoBlock
  id: ID!
}

type ComponentComponentsSmbTextCard {
  headline: String!
  id: ID!
  linkText: String
  linkUrl: String
  subHeadline: String
  text: String!
}

input ComponentComponentsSmbTextCardInput {
  headline: String
  id: ID
  linkText: String
  linkUrl: String
  subHeadline: String
  text: String
}

type ComponentComponentsSmbVideoBlock {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  headline: String
  id: ID!
  linkText: String
  linkUrl: String
  subHeadline: String
}

input ComponentComponentsSmbVideoBlockInput {
  assets: [ID]
  headline: String
  id: ID
  linkText: String
  linkUrl: String
  subHeadline: String
}

type ComponentComponentsSmbWebModule {
  buttonLink: String
  buttonText: String
  header: String
  id: ID!
  text: String
}

input ComponentComponentsSmbWebModuleInput {
  buttonLink: String
  buttonText: String
  header: String
  id: ID
  text: String
}

type ComponentComponentsStoryComponent {
  alignment: ENUM_COMPONENTCOMPONENTSSTORYCOMPONENT_ALIGNMENT
  asset: UploadFileEntityResponse
  border: Boolean
  cardText: String!
  headline: String
  href: String
  id: ID!
  story: StoryEntityResponse
  title: String
  weight: ENUM_COMPONENTCOMPONENTSSTORYCOMPONENT_WEIGHT
  youtubeVideoUrl: String
}

input ComponentComponentsStoryComponentFiltersInput {
  alignment: StringFilterInput
  and: [ComponentComponentsStoryComponentFiltersInput]
  border: BooleanFilterInput
  cardText: StringFilterInput
  headline: StringFilterInput
  href: StringFilterInput
  not: ComponentComponentsStoryComponentFiltersInput
  or: [ComponentComponentsStoryComponentFiltersInput]
  story: StoryFiltersInput
  title: StringFilterInput
  weight: StringFilterInput
  youtubeVideoUrl: StringFilterInput
}

type ComponentComponentsTagComponent {
  href: String
  id: ID!
  story: StoryEntityResponse
  tag: String
  weight: ENUM_COMPONENTCOMPONENTSTAGCOMPONENT_WEIGHT
}

input ComponentComponentsTagComponentFiltersInput {
  and: [ComponentComponentsTagComponentFiltersInput]
  href: StringFilterInput
  not: ComponentComponentsTagComponentFiltersInput
  or: [ComponentComponentsTagComponentFiltersInput]
  story: StoryFiltersInput
  tag: StringFilterInput
  weight: StringFilterInput
}

input ComponentComponentsTagComponentInput {
  href: String
  id: ID
  story: ID
  tag: String
  weight: ENUM_COMPONENTCOMPONENTSTAGCOMPONENT_WEIGHT
}

type ComponentComponentsTextComponent {
  id: ID!
  text: String
}

type ComponentConfigHeroSwiperItem {
  caption: String
  href: String
  id: ID!
  image: UploadFileEntityResponse!
  mobileImage: UploadFileEntityResponse
  tabletImage: UploadFileEntityResponse
  title: String!
}

input ComponentConfigHeroSwiperItemFiltersInput {
  and: [ComponentConfigHeroSwiperItemFiltersInput]
  caption: StringFilterInput
  href: StringFilterInput
  not: ComponentConfigHeroSwiperItemFiltersInput
  or: [ComponentConfigHeroSwiperItemFiltersInput]
  title: StringFilterInput
}

input ComponentConfigHeroSwiperItemInput {
  caption: String
  href: String
  id: ID
  image: ID
  mobileImage: ID
  tabletImage: ID
  title: String
}

type ComponentConfigIndexConfig {
  id: ID!
  teaser_iamge: UploadFileEntityResponse
  teaser_text: String
  title: String
}

input ComponentConfigIndexConfigInput {
  id: ID
  teaser_iamge: ID
  teaser_text: String
  title: String
}

type ComponentConfigPageConfig {
  author: String
  id: ID!
  teaser_image: UploadFileEntityResponse!
  teaser_text: String!
  year: String
}

input ComponentConfigPageConfigFiltersInput {
  and: [ComponentConfigPageConfigFiltersInput]
  author: StringFilterInput
  not: ComponentConfigPageConfigFiltersInput
  or: [ComponentConfigPageConfigFiltersInput]
  teaser_text: StringFilterInput
  year: StringFilterInput
}

input ComponentConfigPageConfigInput {
  author: String
  id: ID
  teaser_image: ID
  teaser_text: String
  year: String
}

type ComponentConfigTheme {
  id: ID!
  themes: ENUM_COMPONENTCONFIGTHEME_THEMES
}

input ComponentConfigThemeFiltersInput {
  and: [ComponentConfigThemeFiltersInput]
  not: ComponentConfigThemeFiltersInput
  or: [ComponentConfigThemeFiltersInput]
  themes: StringFilterInput
}

input ComponentConfigThemeInput {
  id: ID
  themes: ENUM_COMPONENTCONFIGTHEME_THEMES
}

type ComponentGlobal3DModel {
  header: String
  id: ID!
  infoPoints(filters: ComponentComponentsModelInfoPointsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsModelInfoPoints]
  modelFile: UploadFileEntityResponse!
  modelPointSvg: UploadFileEntityResponse!
  theme: ComponentConfigTheme
}

type ComponentGlobal3DNewModel {
  header: String
  id: ID!
  modelGLB(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  modelJSON: UploadFileEntityResponse!
  theme: ComponentConfigTheme
}

type ComponentGlobalCardImageModule {
  headline: ComponentComponentsHeadlineComponent
  id: ID!
  layout: ENUM_COMPONENTGLOBALCARDIMAGEMODULE_LAYOUT
  position: ENUM_COMPONENTGLOBALCARDIMAGEMODULE_POSITION
  showInMenu: Boolean
  stories(filters: ComponentComponentsStoryComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsStoryComponent]
  textAlignment: ENUM_COMPONENTGLOBALCARDIMAGEMODULE_TEXTALIGNMENT
  theme: ComponentConfigTheme
}

type ComponentGlobalColorSeparatorModule {
  id: ID!
  theme: ComponentConfigTheme!
}

input ComponentGlobalColorSeparatorModuleFiltersInput {
  and: [ComponentGlobalColorSeparatorModuleFiltersInput]
  not: ComponentGlobalColorSeparatorModuleFiltersInput
  or: [ComponentGlobalColorSeparatorModuleFiltersInput]
  theme: ComponentConfigThemeFiltersInput
}

input ComponentGlobalColorSeparatorModuleInput {
  id: ID
  theme: ComponentConfigThemeInput
}

type ComponentGlobalContentModule {
  contentCards(filters: ComponentComponentsContentCardComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsContentCardComponent]
  id: ID!
  theme: ComponentConfigTheme
}

type ComponentGlobalEasyDbImageModule {
  easyDBRef(filters: ComponentComponentsEasyDbRefFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsEasyDbRef]!
  headline: ComponentComponentsHeadlineComponent
  id: ID!
  mediaItems: ComponentComponentsEasyDbItems
  showInMenu: Boolean
  theme: ComponentConfigTheme
}

type ComponentGlobalFilterModule {
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryRelationResponseCollection
  header: String
  id: ID!
  text: String
}

type ComponentGlobalHeroModule {
  heroAsset: UploadFileEntityResponse
  heroBackgroundTheme: ENUM_COMPONENTGLOBALHEROMODULE_HEROBACKGROUNDTHEME
  heroText: ComponentComponentsTextComponent
  id: ID!
}

type ComponentGlobalImageBannerModule {
  backgroundAsset: UploadFileEntityResponse!
  card: ComponentComponentsBannerCard
  id: ID!
  position: ENUM_COMPONENTGLOBALIMAGEBANNERMODULE_POSITION
  theme: ComponentConfigTheme
}

type ComponentGlobalImageMapModule {
  cards(filters: ComponentComponentsImageMapCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsImageMapCard]
  id: ID!
  moduleAsset: UploadFileEntityResponse!
  moduleHeadline: String
  theme: ComponentConfigTheme
}

type ComponentGlobalImagePlayerModule {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  buttonText: String
  id: ID!
}

type ComponentGlobalImageScrollModule {
  asset: UploadFileEntityResponse!
  card: ComponentComponentsImageScrollCard!
  id: ID!
  theme: ComponentConfigTheme
}

type ComponentGlobalLinkedStoriesModule {
  header: String
  id: ID!
  storiesLinks(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
}

type ComponentGlobalLinksModule {
  cardLinks(filters: ComponentComponentsCardLinkComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsCardLinkComponent]
  id: ID!
  theme: ComponentConfigTheme
}

type ComponentGlobalMediaModule {
  gridAlignment: ENUM_COMPONENTGLOBALMEDIAMODULE_GRIDALIGNMENT
  headline: ComponentComponentsHeadlineComponent
  id: ID!
  link: ComponentComponentsLinkComponent
  mediaItems: ComponentComponentsMediaComponent
  showInMenu: Boolean
  subHeadline: String
  theme: ComponentConfigTheme
}

type ComponentGlobalRichtextModule {
  id: ID!
  richText: ComponentComponentsRichTextComponent
  showInMenu: Boolean
  theme: ComponentConfigTheme
}

input ComponentGlobalRichtextModuleFiltersInput {
  and: [ComponentGlobalRichtextModuleFiltersInput]
  not: ComponentGlobalRichtextModuleFiltersInput
  or: [ComponentGlobalRichtextModuleFiltersInput]
  richText: ComponentComponentsRichTextComponentFiltersInput
  showInMenu: BooleanFilterInput
  theme: ComponentConfigThemeFiltersInput
}

input ComponentGlobalRichtextModuleInput {
  id: ID
  richText: ComponentComponentsRichTextComponentInput
  showInMenu: Boolean
  theme: ComponentConfigThemeInput
}

type ComponentGlobalRouteNavigationModule {
  backwardsLink: ComponentComponentsLinkComponent
  forwardLink: ComponentComponentsLinkComponent
  icon: Boolean
  id: ID!
  theme: ComponentConfigTheme
}

type ComponentGlobalSammlungOnlineAdapter {
  headline: ComponentComponentsHeadlineComponent
  id: ID!
  mediaItems: ComponentComponentsEasyDbItems
  ref(filters: ComponentComponentsEasyDbRefFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsEasyDbRef]!
  showInMenu: Boolean
  theme: ComponentConfigTheme
}

type ComponentGlobalSeparatorModule {
  id: ID!
  separatorHeadline: String
  showInMenu: Boolean
  theme: ComponentConfigTheme
}

type ComponentGlobalStoriesContainerModule {
  active: Boolean
  id: ID!
  theme: ComponentConfigTheme
}

type ComponentGlobalTagCarouselModule {
  href: String
  id: ID!
  story: StoryEntityResponse
  tag: String
  theme: ComponentConfigTheme
  weight: ENUM_COMPONENTGLOBALTAGCAROUSELMODULE_WEIGHT
}

type ComponentGlobalTagCloudModule {
  id: ID!
  primaryTags(filters: ComponentComponentsTagComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsTagComponent]
  quaternaryTags(filters: ComponentComponentsTagComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsTagComponent]
  secondaryTags(filters: ComponentComponentsTagComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsTagComponent]
  tagsSeparator: Boolean
  tertiaryTags(filters: ComponentComponentsTagComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsTagComponent]
  theme: ComponentConfigTheme!
}

input ComponentGlobalTagCloudModuleFiltersInput {
  and: [ComponentGlobalTagCloudModuleFiltersInput]
  not: ComponentGlobalTagCloudModuleFiltersInput
  or: [ComponentGlobalTagCloudModuleFiltersInput]
  primaryTags: ComponentComponentsTagComponentFiltersInput
  quaternaryTags: ComponentComponentsTagComponentFiltersInput
  secondaryTags: ComponentComponentsTagComponentFiltersInput
  tagsSeparator: BooleanFilterInput
  tertiaryTags: ComponentComponentsTagComponentFiltersInput
  theme: ComponentConfigThemeFiltersInput
}

input ComponentGlobalTagCloudModuleInput {
  id: ID
  primaryTags: [ComponentComponentsTagComponentInput]
  quaternaryTags: [ComponentComponentsTagComponentInput]
  secondaryTags: [ComponentComponentsTagComponentInput]
  tagsSeparator: Boolean
  tertiaryTags: [ComponentComponentsTagComponentInput]
  theme: ComponentConfigThemeInput
}

type ComponentGlobalTextCardModule {
  buttonLink: ComponentComponentsSimpleLink
  cardHeadline: String
  id: ID!
  separatorHeadline: String
  text: String
  theme: ComponentConfigTheme!
}

input ComponentGlobalTextCardModuleFiltersInput {
  and: [ComponentGlobalTextCardModuleFiltersInput]
  buttonLink: ComponentComponentsSimpleLinkFiltersInput
  cardHeadline: StringFilterInput
  not: ComponentGlobalTextCardModuleFiltersInput
  or: [ComponentGlobalTextCardModuleFiltersInput]
  separatorHeadline: StringFilterInput
  text: StringFilterInput
  theme: ComponentConfigThemeFiltersInput
}

input ComponentGlobalTextCardModuleInput {
  buttonLink: ComponentComponentsSimpleLinkInput
  cardHeadline: String
  id: ID
  separatorHeadline: String
  text: String
  theme: ComponentConfigThemeInput
}

type ComponentGlobalTextDrawerModule {
  assets(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  button: ComponentComponentsButtonComponent
  drawerHeadline: String
  drawerSubHeadline: String
  id: ID!
  showInMenu: Boolean
  text: String
  theme: ComponentConfigTheme
}

type ComponentGlobalVideoModule {
  id: ID!
  placeholderImage: UploadFileEntityResponse!
  video: UploadFileEntityResponse!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BACKGROUNDCOLOR {
  primary
  quaternary
  secondary
  tertiary
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BACKGROUNDSTYLE {
  transparent
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BORDERCOLOR {
  gradient
  primary
  secondary
  tertiary
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_BORDERWIDTH {
  large
  medium
  small
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_CARDWIDTH {
  full
  half
  oneThird
  twoThirds
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_CONTENTALIGNMENT {
  center
  right
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEALIGNMENT {
  center
  right
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINECOLOR {
  gradient
  primary
  quaternary
  secondary
  tertiary
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEDECORATION {
  underline
  uppercase
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEFONTSIZE {
  extraLarge
  large
  medium
  small
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEORIENTATION {
  vertical
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINESTYLE {
  italic
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_HEADLINEWEIGHT {
  bold
  light
  medium
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_IMAGEPOSITION {
  bottom
  left
  right
  top
}

enum ENUM_COMPONENTCOMPONENTSCONTENTCARDCOMPONENT_LINKCOLOR {
  gradient
  primary
  quaternary
  secondary
  tertiary
}

enum ENUM_COMPONENTCOMPONENTSEASYDBITEMS_LAYOUT {
  column
  row
}

enum ENUM_COMPONENTCOMPONENTSEASYDBITEMS_TEXTCOLUMNS {
  col1
  col2
  col3
}

enum ENUM_COMPONENTCOMPONENTSEASYDBITEMS_TEXTPOSITION {
  above
  below
}

enum ENUM_COMPONENTCOMPONENTSEASYDBREF_OBJECTFIT {
  contain
  cover
}

enum ENUM_COMPONENTCOMPONENTSMEDIACOMPONENT_LAYOUT {
  column
  row
}

enum ENUM_COMPONENTCOMPONENTSMEDIACOMPONENT_TEXTCOLUMNS {
  col1
  col2
  col3
}

enum ENUM_COMPONENTCOMPONENTSMEDIACOMPONENT_TEXTPOSITION {
  above
  below
}

enum ENUM_COMPONENTCOMPONENTSMODELINFOPOINTS_SLUG {
  SpriteA1
  SpriteA2
  SpriteA3
  SpriteA4
  SpriteB1
  SpriteB2
  SpriteB3
  SpriteB4
}

enum ENUM_COMPONENTCOMPONENTSNAVIGATIONLINKCOMPONENT_SLUG {
  primary
  quaternary
  quinary
  secondary
  tertiary
}

enum ENUM_COMPONENTCOMPONENTSRICHTEXTCOMPONENT_LAYOUT {
  col
  row
}

enum ENUM_COMPONENTCOMPONENTSRICHTEXTCOMPONENT_TEXTCOLUMNS {
  col1
  col2
  col3
}

enum ENUM_COMPONENTCOMPONENTSSMBCOLLECTIONSBLOCK_TYPE {
  GUIDE
  INTRO
  RESEARCH
  TOPIC
}

enum ENUM_COMPONENTCOMPONENTSSMBHEADERMENUITEMS_TYPE {
  GUIDE
  INTRO
  RESEARCH
  TOPIC
}

enum ENUM_COMPONENTCOMPONENTSSMBHIGHLIGHTSBLOCK_TYPE {
  GUIDE
  INTRO
  RESEARCH
  TOPIC
}

enum ENUM_COMPONENTCOMPONENTSSMBSECTION_TYPE {
  GUIDE
  INTRO
  RESEARCH
  TEXT
  TOPIC
}

enum ENUM_COMPONENTCOMPONENTSSTORYCOMPONENT_ALIGNMENT {
  left
  right
}

enum ENUM_COMPONENTCOMPONENTSSTORYCOMPONENT_WEIGHT {
  size1
  size2
  size3
}

enum ENUM_COMPONENTCOMPONENTSTAGCOMPONENT_WEIGHT {
  default
  large
  medium
}

enum ENUM_COMPONENTCONFIGTHEME_THEMES {
  primary
  quaternary
  secondary
  tertiary
}

enum ENUM_COMPONENTGLOBALCARDIMAGEMODULE_LAYOUT {
  float
  parallel
  translate
}

enum ENUM_COMPONENTGLOBALCARDIMAGEMODULE_POSITION {
  down
  up
}

enum ENUM_COMPONENTGLOBALCARDIMAGEMODULE_TEXTALIGNMENT {
  center
}

enum ENUM_COMPONENTGLOBALHEROMODULE_HEROBACKGROUNDTHEME {
  primary
  quaternary
  quinary
  secondary
  tertiary
}

enum ENUM_COMPONENTGLOBALIMAGEBANNERMODULE_POSITION {
  center
  end
  start
}

enum ENUM_COMPONENTGLOBALMEDIAMODULE_GRIDALIGNMENT {
  default
  left
  right
}

enum ENUM_COMPONENTGLOBALTAGCAROUSELMODULE_WEIGHT {
  size1
  size2
  size3
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Category | ComponentComponentsBannerCard | ComponentComponentsBreadcrumbsLink | ComponentComponentsButtonComponent | ComponentComponentsCardLinkComponent | ComponentComponentsContentCardComponent | ComponentComponentsCookie | ComponentComponentsEasyDbItems | ComponentComponentsEasyDbRef | ComponentComponentsHeadlineComponent | ComponentComponentsImageCard | ComponentComponentsImageMapCard | ComponentComponentsImageScrollCard | ComponentComponentsLegalPages | ComponentComponentsLinkComponent | ComponentComponentsMediaComponent | ComponentComponentsModelInfoPoints | ComponentComponentsNavigationLinkComponent | ComponentComponentsRichTextComponent | ComponentComponentsSimpleLink | ComponentComponentsSlug | ComponentComponentsSmbCollectionsBlock | ComponentComponentsSmbDownloadModule | ComponentComponentsSmbHeaderMenuItems | ComponentComponentsSmbHighlightsBlock | ComponentComponentsSmbLegalPagesBlock | ComponentComponentsSmbResearchModal | ComponentComponentsSmbSearchButtonBlock | ComponentComponentsSmbSection | ComponentComponentsSmbTextCard | ComponentComponentsSmbVideoBlock | ComponentComponentsSmbWebModule | ComponentComponentsStoryComponent | ComponentComponentsTagComponent | ComponentComponentsTextComponent | ComponentConfigHeroSwiperItem | ComponentConfigIndexConfig | ComponentConfigPageConfig | ComponentConfigTheme | ComponentGlobal3DModel | ComponentGlobal3DNewModel | ComponentGlobalCardImageModule | ComponentGlobalColorSeparatorModule | ComponentGlobalContentModule | ComponentGlobalEasyDbImageModule | ComponentGlobalFilterModule | ComponentGlobalHeroModule | ComponentGlobalImageBannerModule | ComponentGlobalImageMapModule | ComponentGlobalImagePlayerModule | ComponentGlobalImageScrollModule | ComponentGlobalLinkedStoriesModule | ComponentGlobalLinksModule | ComponentGlobalMediaModule | ComponentGlobalRichtextModule | ComponentGlobalRouteNavigationModule | ComponentGlobalSammlungOnlineAdapter | ComponentGlobalSeparatorModule | ComponentGlobalStoriesContainerModule | ComponentGlobalTagCarouselModule | ComponentGlobalTagCloudModule | ComponentGlobalTextCardModule | ComponentGlobalTextDrawerModule | ComponentGlobalVideoModule | I18NLocale | Index | QrReader | Room | SiteConfig | SmbGuidepage | SmbLandingpage | SmbResearchpage | SmbSiteConfig | SmbTopicspage | Story | Topic | Tour | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""
A string used to identify an i18n locale
"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  or: [ID]
  startsWith: ID
}

type Index {
  config: ComponentConfigIndexConfig
  createdAt: DateTime
  locale: String
  localizations(publicationState: PublicationState = LIVE): IndexRelationResponseCollection
  modules: [IndexModulesDynamicZone]
  publishedAt: DateTime
  updatedAt: DateTime
}

type IndexEntity {
  attributes: Index
  id: ID
}

type IndexEntityResponse {
  data: IndexEntity
}

input IndexInput {
  config: ComponentConfigIndexConfigInput
  modules: [IndexModulesDynamicZoneInput!]
  publishedAt: DateTime
  sitemap_exclude: Boolean
}

union IndexModulesDynamicZone = ComponentGlobal3DModel | ComponentGlobal3DNewModel | ComponentGlobalCardImageModule | ComponentGlobalColorSeparatorModule | ComponentGlobalContentModule | ComponentGlobalFilterModule | ComponentGlobalHeroModule | ComponentGlobalImageBannerModule | ComponentGlobalImageScrollModule | ComponentGlobalLinkedStoriesModule | ComponentGlobalLinksModule | ComponentGlobalMediaModule | ComponentGlobalRichtextModule | ComponentGlobalRouteNavigationModule | ComponentGlobalSeparatorModule | ComponentGlobalStoriesContainerModule | ComponentGlobalTagCarouselModule | ComponentGlobalTagCloudModule | ComponentGlobalTextCardModule | ComponentGlobalTextDrawerModule | ComponentGlobalVideoModule | Error

scalar IndexModulesDynamicZoneInput

type IndexRelationResponseCollection {
  data: [IndexEntity!]!
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  or: [Int]
  startsWith: Int
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  or: [Long]
  startsWith: Long
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type QrReader {
  createdAt: DateTime
  isVisibleInListView: Boolean
  json: JSON
  publishedAt: DateTime
  updatedAt: DateTime
  versionNumber: Int
  versions(publicationState: PublicationState = LIVE): QrReaderRelationResponseCollection
  vuid: String
}

type QrReaderEntity {
  attributes: QrReader
  id: ID
}

type QrReaderEntityResponse {
  data: QrReaderEntity
}

input QrReaderInput {
  isVisibleInListView: Boolean
  json: JSON
  publishedAt: DateTime
  sitemap_exclude: Boolean
  versionNumber: Int
  versions: [ID]
  vuid: String
}

type QrReaderRelationResponseCollection {
  data: [QrReaderEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Room {
  createdAt: DateTime
  floor: String
  isVisibleInListView: Boolean
  locale: String
  localizations(filters: RoomFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomRelationResponseCollection
  objects(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
  publishedAt: DateTime
  slug: String
  text: String
  title: String
  topic: TopicEntityResponse
  updatedAt: DateTime
  versionNumber: Int
  versions(filters: RoomFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomRelationResponseCollection
  vuid: String
}

type RoomEntity {
  attributes: Room
  id: ID
}

type RoomEntityResponse {
  data: RoomEntity
}

type RoomEntityResponseCollection {
  data: [RoomEntity!]!
  meta: ResponseCollectionMeta!
}

input RoomFiltersInput {
  and: [RoomFiltersInput]
  createdAt: DateTimeFilterInput
  floor: StringFilterInput
  id: IDFilterInput
  isVisibleInListView: BooleanFilterInput
  locale: StringFilterInput
  localizations: RoomFiltersInput
  not: RoomFiltersInput
  objects: StoryFiltersInput
  or: [RoomFiltersInput]
  publishedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  text: StringFilterInput
  title: StringFilterInput
  topic: TopicFiltersInput
  updatedAt: DateTimeFilterInput
  versionNumber: IntFilterInput
  versions: RoomFiltersInput
  vuid: StringFilterInput
}

input RoomInput {
  floor: String
  isVisibleInListView: Boolean
  objects: [ID]
  publishedAt: DateTime
  sitemap_exclude: Boolean
  slug: String
  text: String
  title: String
  topic: ID
  versionNumber: Int
  versions: [ID]
  vuid: String
}

type RoomRelationResponseCollection {
  data: [RoomEntity!]!
}

type SiteConfig {
  breadcrumbsLink: ComponentComponentsBreadcrumbsLink
  cookies: ComponentComponentsCookie
  copyright: String
  createdAt: DateTime
  footerPrimaryLinkItems(filters: ComponentComponentsNavigationLinkComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsNavigationLinkComponent]
  footerSecondaryLinkItems(filters: ComponentComponentsNavigationLinkComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsNavigationLinkComponent]
  footerTertiaryLinkItems(filters: ComponentComponentsNavigationLinkComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsNavigationLinkComponent]
  headerMenuItems(filters: ComponentComponentsNavigationLinkComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsNavigationLinkComponent]
  headerTitle: String!
  languageSwitcher: Boolean!
  locale: String
  localizations: SiteConfigRelationResponseCollection
  showQrScanner: Boolean!
  updatedAt: DateTime
}

type SiteConfigEntity {
  attributes: SiteConfig
  id: ID
}

type SiteConfigEntityResponse {
  data: SiteConfigEntity
}

input SiteConfigInput {
  breadcrumbsLink: ComponentComponentsBreadcrumbsLinkInput
  cookies: ComponentComponentsCookieInput
  copyright: String
  footerPrimaryLinkItems: [ComponentComponentsNavigationLinkComponentInput]
  footerSecondaryLinkItems: [ComponentComponentsNavigationLinkComponentInput]
  footerTertiaryLinkItems: [ComponentComponentsNavigationLinkComponentInput]
  headerMenuItems: [ComponentComponentsNavigationLinkComponentInput]
  headerTitle: String
  languageSwitcher: Boolean
  showQrScanner: Boolean
  sitemap_exclude: Boolean
}

type SiteConfigRelationResponseCollection {
  data: [SiteConfigEntity!]!
}

type SmbGuidepage {
  createdAt: DateTime
  fallbackHeader: String
  fallbackText: String
  header_image: UploadFileEntityResponse
  locale: String
  localizations(publicationState: PublicationState = LIVE): SmbGuidepageRelationResponseCollection
  over_image_text: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type SmbGuidepageEntity {
  attributes: SmbGuidepage
  id: ID
}

type SmbGuidepageEntityResponse {
  data: SmbGuidepageEntity
}

input SmbGuidepageInput {
  fallbackHeader: String
  fallbackText: String
  header_image: ID
  over_image_text: String
  publishedAt: DateTime
  sitemap_exclude: Boolean
}

type SmbGuidepageRelationResponseCollection {
  data: [SmbGuidepageEntity!]!
}

type SmbLandingpage {
  createdAt: DateTime
  heroSwiperItems(filters: ComponentConfigHeroSwiperItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentConfigHeroSwiperItem]
  locale: String
  localizations(publicationState: PublicationState = LIVE): SmbLandingpageRelationResponseCollection
  module: [SmbLandingpageModuleDynamicZone]
  publishedAt: DateTime
  updatedAt: DateTime
}

type SmbLandingpageEntity {
  attributes: SmbLandingpage
  id: ID
}

type SmbLandingpageEntityResponse {
  data: SmbLandingpageEntity
}

input SmbLandingpageInput {
  heroSwiperItems: [ComponentConfigHeroSwiperItemInput]
  module: [SmbLandingpageModuleDynamicZoneInput!]
  publishedAt: DateTime
  sitemap_exclude: Boolean
}

union SmbLandingpageModuleDynamicZone = ComponentComponentsSmbSection | Error

scalar SmbLandingpageModuleDynamicZoneInput

type SmbLandingpageRelationResponseCollection {
  data: [SmbLandingpageEntity!]!
}

type SmbResearchpage {
  createdAt: DateTime
  header: String
  locale: String
  localizations(publicationState: PublicationState = LIVE): SmbResearchpageRelationResponseCollection
  maintenance_text: String
  maintenance_text_long: String
  modalDialog: ComponentComponentsSmbResearchModal
  publishedAt: DateTime
  show_maintenance_popup: Boolean
  updatedAt: DateTime
}

type SmbResearchpageEntity {
  attributes: SmbResearchpage
  id: ID
}

type SmbResearchpageEntityResponse {
  data: SmbResearchpageEntity
}

input SmbResearchpageInput {
  header: String
  maintenance_text: String
  maintenance_text_long: String
  modalDialog: ComponentComponentsSmbResearchModalInput
  publishedAt: DateTime
  show_maintenance_popup: Boolean
  sitemap_exclude: Boolean
}

type SmbResearchpageRelationResponseCollection {
  data: [SmbResearchpageEntity!]!
}

type SmbSiteConfig {
  contactTextBlock: ComponentComponentsSmbTextCard
  contactVideoBlock: ComponentComponentsSmbVideoBlock
  copyright: String
  createdAt: DateTime
  headerMenuItems(filters: ComponentComponentsSmbHeaderMenuItemsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentComponentsSmbHeaderMenuItems]
  legalPages: [SmbSiteConfigLegalPagesDynamicZone]
  locale: String
  localizations(publicationState: PublicationState = LIVE): SmbSiteConfigRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

type SmbSiteConfigEntity {
  attributes: SmbSiteConfig
  id: ID
}

type SmbSiteConfigEntityResponse {
  data: SmbSiteConfigEntity
}

input SmbSiteConfigInput {
  contactTextBlock: ComponentComponentsSmbTextCardInput
  contactVideoBlock: ComponentComponentsSmbVideoBlockInput
  copyright: String
  headerMenuItems: [ComponentComponentsSmbHeaderMenuItemsInput]
  legalPages: [SmbSiteConfigLegalPagesDynamicZoneInput!]
  publishedAt: DateTime
  sitemap_exclude: Boolean
}

union SmbSiteConfigLegalPagesDynamicZone = ComponentComponentsLegalPages | Error

scalar SmbSiteConfigLegalPagesDynamicZoneInput

type SmbSiteConfigRelationResponseCollection {
  data: [SmbSiteConfigEntity!]!
}

type SmbTopicspage {
  createdAt: DateTime
  heroFallbackAsset: UploadFileEntityResponse!
  heroFallbackHeader: String!
  heroFallbackText: String!
  locale: String
  localizations(publicationState: PublicationState = LIVE): SmbTopicspageRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

type SmbTopicspageEntity {
  attributes: SmbTopicspage
  id: ID
}

type SmbTopicspageEntityResponse {
  data: SmbTopicspageEntity
}

input SmbTopicspageInput {
  heroFallbackAsset: ID
  heroFallbackHeader: String
  heroFallbackText: String
  publishedAt: DateTime
  sitemap_exclude: Boolean
}

type SmbTopicspageRelationResponseCollection {
  data: [SmbTopicspageEntity!]!
}

type Story {
  category: CategoryEntityResponse
  config: ComponentConfigPageConfig
  createdAt: DateTime
  displayInHero: Boolean
  isVisibleInListView: Boolean
  locale: String
  localizations(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
  modules: [StoryModulesDynamicZone]
  publishedAt: DateTime
  room: RoomEntityResponse
  slug: String!
  title: String
  topic: TopicEntityResponse
  tours(filters: TourFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourRelationResponseCollection
  updatedAt: DateTime
  versionNumber: Int
  versions(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
  vuid: String
}

type StoryEntity {
  attributes: Story
  id: ID
}

type StoryEntityResponse {
  data: StoryEntity
}

type StoryEntityResponseCollection {
  data: [StoryEntity!]!
  meta: ResponseCollectionMeta!
}

input StoryFiltersInput {
  and: [StoryFiltersInput]
  category: CategoryFiltersInput
  config: ComponentConfigPageConfigFiltersInput
  createdAt: DateTimeFilterInput
  displayInHero: BooleanFilterInput
  id: IDFilterInput
  isVisibleInListView: BooleanFilterInput
  locale: StringFilterInput
  localizations: StoryFiltersInput
  not: StoryFiltersInput
  or: [StoryFiltersInput]
  publishedAt: DateTimeFilterInput
  room: RoomFiltersInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  topic: TopicFiltersInput
  tours: TourFiltersInput
  updatedAt: DateTimeFilterInput
  versionNumber: IntFilterInput
  versions: StoryFiltersInput
  vuid: StringFilterInput
}

input StoryInput {
  category: ID
  config: ComponentConfigPageConfigInput
  displayInHero: Boolean
  isVisibleInListView: Boolean
  modules: [StoryModulesDynamicZoneInput!]
  publishedAt: DateTime
  room: ID
  sitemap_exclude: Boolean
  slug: String
  title: String
  topic: ID
  tours: [ID]
  versionNumber: Int
  versions: [ID]
  vuid: String
}

union StoryModulesDynamicZone = ComponentGlobal3DModel | ComponentGlobal3DNewModel | ComponentGlobalCardImageModule | ComponentGlobalColorSeparatorModule | ComponentGlobalContentModule | ComponentGlobalEasyDbImageModule | ComponentGlobalFilterModule | ComponentGlobalImageBannerModule | ComponentGlobalImageMapModule | ComponentGlobalImagePlayerModule | ComponentGlobalImageScrollModule | ComponentGlobalLinkedStoriesModule | ComponentGlobalLinksModule | ComponentGlobalMediaModule | ComponentGlobalRichtextModule | ComponentGlobalRouteNavigationModule | ComponentGlobalSammlungOnlineAdapter | ComponentGlobalSeparatorModule | ComponentGlobalTagCarouselModule | ComponentGlobalTagCloudModule | ComponentGlobalTextCardModule | ComponentGlobalTextDrawerModule | ComponentGlobalVideoModule | Error

scalar StoryModulesDynamicZoneInput

type StoryRelationResponseCollection {
  data: [StoryEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  or: [String]
  startsWith: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """
  does the column NOT match the given pattern
  """
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

type Topic {
  createdAt: DateTime
  isVisibleInListView: Boolean
  locale: String
  localizations(filters: TopicFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TopicRelationResponseCollection
  publishedAt: DateTime
  rooms(filters: RoomFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomRelationResponseCollection
  seperator_01: ComponentGlobalColorSeparatorModule
  seperator_02: ComponentGlobalColorSeparatorModule
  slug: String
  stories(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
  tagCloud: ComponentGlobalTagCloudModule
  text: String
  textCard: ComponentGlobalTextCardModule
  title: String
  updatedAt: DateTime
  versionNumber: Int
  versions(filters: TopicFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TopicRelationResponseCollection
  vuid: String
}

type TopicEntity {
  attributes: Topic
  id: ID
}

type TopicEntityResponse {
  data: TopicEntity
}

type TopicEntityResponseCollection {
  data: [TopicEntity!]!
  meta: ResponseCollectionMeta!
}

input TopicFiltersInput {
  and: [TopicFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  isVisibleInListView: BooleanFilterInput
  locale: StringFilterInput
  localizations: TopicFiltersInput
  not: TopicFiltersInput
  or: [TopicFiltersInput]
  publishedAt: DateTimeFilterInput
  rooms: RoomFiltersInput
  seperator_01: ComponentGlobalColorSeparatorModuleFiltersInput
  seperator_02: ComponentGlobalColorSeparatorModuleFiltersInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  stories: StoryFiltersInput
  tagCloud: ComponentGlobalTagCloudModuleFiltersInput
  text: StringFilterInput
  textCard: ComponentGlobalTextCardModuleFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  versionNumber: IntFilterInput
  versions: TopicFiltersInput
  vuid: StringFilterInput
}

input TopicInput {
  isVisibleInListView: Boolean
  publishedAt: DateTime
  rooms: [ID]
  seperator_01: ComponentGlobalColorSeparatorModuleInput
  seperator_02: ComponentGlobalColorSeparatorModuleInput
  sitemap_exclude: Boolean
  slug: String
  stories: [ID]
  tagCloud: ComponentGlobalTagCloudModuleInput
  text: String
  textCard: ComponentGlobalTextCardModuleInput
  title: String
  versionNumber: Int
  versions: [ID]
  vuid: String
}

type TopicRelationResponseCollection {
  data: [TopicEntity!]!
}

type Tour {
  category: CategoryEntityResponse
  createdAt: DateTime
  isVisibleInListView: Boolean
  locale: String
  localizations(filters: TourFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourRelationResponseCollection
  map_image: UploadFileEntityResponse
  objects(filters: StoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryRelationResponseCollection
  publishedAt: DateTime
  slug: String
  teaser_image: UploadFileEntityResponse
  text: String
  title: String
  updatedAt: DateTime
  versionNumber: Int
  versions(filters: TourFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourRelationResponseCollection
  vuid: String
}

type TourEntity {
  attributes: Tour
  id: ID
}

type TourEntityResponse {
  data: TourEntity
}

type TourEntityResponseCollection {
  data: [TourEntity!]!
  meta: ResponseCollectionMeta!
}

input TourFiltersInput {
  and: [TourFiltersInput]
  category: CategoryFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  isVisibleInListView: BooleanFilterInput
  locale: StringFilterInput
  localizations: TourFiltersInput
  not: TourFiltersInput
  objects: StoryFiltersInput
  or: [TourFiltersInput]
  publishedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  text: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  versionNumber: IntFilterInput
  versions: TourFiltersInput
  vuid: StringFilterInput
}

input TourInput {
  category: ID
  isVisibleInListView: Boolean
  map_image: ID
  objects: [ID]
  publishedAt: DateTime
  sitemap_exclude: Boolean
  slug: String
  teaser_image: ID
  text: String
  title: String
  versionNumber: Int
  versions: [ID]
  vuid: String
}

type TourRelationResponseCollection {
  data: [TourEntity!]!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  sitemap_exclude: BooleanFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  sitemap_exclude: Boolean
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
  sitemap_exclude: Boolean
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  sitemap_exclude: Boolean
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

scalar _int8

"""
Boolean expression to compare columns of type "_int8". All fields are combined with logical 'AND'.
"""
input _int8_comparison_exp {
  _eq: _int8
  _gt: _int8
  _gte: _int8
  _in: [_int8!]
  _is_null: Boolean
  _lt: _int8
  _lte: _int8
  _neq: _int8
  _nin: [_int8!]
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC
  """
  descending ordering of the cursor
  """
  DESC
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "smb.assortments"
  """
  delete_smb_assortments("""filter the rows which have to be deleted""" where: smb_assortments_bool_exp!): smb_assortments_mutation_response
  """
  delete single row from the table: "smb.assortments"
  """
  delete_smb_assortments_by_pk(id: bigint!): smb_assortments
  """
  delete data from the table: "smb.assortments_objects"
  """
  delete_smb_assortments_objects("""filter the rows which have to be deleted""" where: smb_assortments_objects_bool_exp!): smb_assortments_objects_mutation_response
  """
  delete single row from the table: "smb.assortments_objects"
  """
  delete_smb_assortments_objects_by_pk(id: bigint!): smb_assortments_objects
  """
  delete data from the table: "smb.assortments_translation"
  """
  delete_smb_assortments_translation("""filter the rows which have to be deleted""" where: smb_assortments_translation_bool_exp!): smb_assortments_translation_mutation_response
  """
  delete single row from the table: "smb.assortments_translation"
  """
  delete_smb_assortments_translation_by_pk(id: bigint!): smb_assortments_translation
  """
  delete data from the table: "smb.attachments"
  """
  delete_smb_attachments("""filter the rows which have to be deleted""" where: smb_attachments_bool_exp!): smb_attachments_mutation_response
  """
  delete single row from the table: "smb.attachments"
  """
  delete_smb_attachments_by_pk(id: bigint!, object_id: bigint!): smb_attachments
  """
  delete data from the table: "smb.attribute_approval"
  """
  delete_smb_attribute_approval("""filter the rows which have to be deleted""" where: smb_attribute_approval_bool_exp!): smb_attribute_approval_mutation_response
  """
  delete single row from the table: "smb.attribute_approval"
  """
  delete_smb_attribute_approval_by_pk(id: bigint!): smb_attribute_approval
  """
  delete data from the table: "smb.attribute_translations"
  """
  delete_smb_attribute_translations("""filter the rows which have to be deleted""" where: smb_attribute_translations_bool_exp!): smb_attribute_translations_mutation_response
  """
  delete single row from the table: "smb.attribute_translations"
  """
  delete_smb_attribute_translations_by_pk(id: bigint!): smb_attribute_translations
  """
  delete data from the table: "smb.attributes"
  """
  delete_smb_attributes("""filter the rows which have to be deleted""" where: smb_attributes_bool_exp!): smb_attributes_mutation_response
  """
  delete single row from the table: "smb.attributes"
  """
  delete_smb_attributes_by_pk(key: String!): smb_attributes
  """
  delete data from the table: "smb.blocked_attachments"
  """
  delete_smb_blocked_attachments("""filter the rows which have to be deleted""" where: smb_blocked_attachments_bool_exp!): smb_blocked_attachments_mutation_response
  """
  delete single row from the table: "smb.blocked_attachments"
  """
  delete_smb_blocked_attachments_by_pk(id: bigint!): smb_blocked_attachments
  """
  delete data from the table: "smb.buildings"
  """
  delete_smb_buildings("""filter the rows which have to be deleted""" where: smb_buildings_bool_exp!): smb_buildings_mutation_response
  """
  delete single row from the table: "smb.buildings"
  """
  delete_smb_buildings_by_pk(key: String!): smb_buildings
  """
  delete data from the table: "smb.collections"
  """
  delete_smb_collections("""filter the rows which have to be deleted""" where: smb_collections_bool_exp!): smb_collections_mutation_response
  """
  delete single row from the table: "smb.collections"
  """
  delete_smb_collections_by_pk(key: String!): smb_collections
  """
  delete data from the table: "smb.cultural_references"
  """
  delete_smb_cultural_references("""filter the rows which have to be deleted""" where: smb_cultural_references_bool_exp!): smb_cultural_references_mutation_response
  """
  delete single row from the table: "smb.cultural_references"
  """
  delete_smb_cultural_references_by_pk(id: bigint!): smb_cultural_references
  """
  delete data from the table: "smb.exhibitions"
  """
  delete_smb_exhibitions("""filter the rows which have to be deleted""" where: smb_exhibitions_bool_exp!): smb_exhibitions_mutation_response
  """
  delete single row from the table: "smb.exhibitions"
  """
  delete_smb_exhibitions_by_pk(id: bigint!): smb_exhibitions
  """
  delete data from the table: "smb.exhibitions_objects"
  """
  delete_smb_exhibitions_objects("""filter the rows which have to be deleted""" where: smb_exhibitions_objects_bool_exp!): smb_exhibitions_objects_mutation_response
  """
  delete single row from the table: "smb.exhibitions_objects"
  """
  delete_smb_exhibitions_objects_by_pk(id: bigint!): smb_exhibitions_objects
  """
  delete data from the table: "smb.geographical_references"
  """
  delete_smb_geographical_references("""filter the rows which have to be deleted""" where: smb_geographical_references_bool_exp!): smb_geographical_references_mutation_response
  """
  delete single row from the table: "smb.geographical_references"
  """
  delete_smb_geographical_references_by_pk(id: bigint!): smb_geographical_references
  """
  delete data from the table: "smb.highlights"
  """
  delete_smb_highlights("""filter the rows which have to be deleted""" where: smb_highlights_bool_exp!): smb_highlights_mutation_response
  """
  delete single row from the table: "smb.highlights"
  """
  delete_smb_highlights_by_pk(id: bigint!): smb_highlights
  """
  delete data from the table: "smb.ignoreable_keys"
  """
  delete_smb_ignoreable_keys("""filter the rows which have to be deleted""" where: smb_ignoreable_keys_bool_exp!): smb_ignoreable_keys_mutation_response
  """
  delete single row from the table: "smb.ignoreable_keys"
  """
  delete_smb_ignoreable_keys_by_pk(id: bigint!): smb_ignoreable_keys
  """
  delete data from the table: "smb.language"
  """
  delete_smb_language("""filter the rows which have to be deleted""" where: smb_language_bool_exp!): smb_language_mutation_response
  """
  delete single row from the table: "smb.language"
  """
  delete_smb_language_by_pk(id: bigint!): smb_language
  """
  delete data from the table: "smb.licenses"
  """
  delete_smb_licenses("""filter the rows which have to be deleted""" where: smb_licenses_bool_exp!): smb_licenses_mutation_response
  """
  delete single row from the table: "smb.licenses"
  """
  delete_smb_licenses_by_pk(id: bigint!): smb_licenses
  """
  delete data from the table: "smb.licenses_translation"
  """
  delete_smb_licenses_translation("""filter the rows which have to be deleted""" where: smb_licenses_translation_bool_exp!): smb_licenses_translation_mutation_response
  """
  delete single row from the table: "smb.licenses_translation"
  """
  delete_smb_licenses_translation_by_pk(id: bigint!): smb_licenses_translation
  """
  delete data from the table: "smb.material_references"
  """
  delete_smb_material_references("""filter the rows which have to be deleted""" where: smb_material_references_bool_exp!): smb_material_references_mutation_response
  """
  delete single row from the table: "smb.material_references"
  """
  delete_smb_material_references_by_pk(id: bigint!): smb_material_references
  """
  delete data from the table: "smb.objects"
  """
  delete_smb_objects("""filter the rows which have to be deleted""" where: smb_objects_bool_exp!): smb_objects_mutation_response
  """
  delete single row from the table: "smb.objects"
  """
  delete_smb_objects_by_pk(id: bigint!): smb_objects
  """
  delete data from the table: "smb.org_unit"
  """
  delete_smb_org_unit("""filter the rows which have to be deleted""" where: smb_org_unit_bool_exp!): smb_org_unit_mutation_response
  """
  delete single row from the table: "smb.org_unit"
  """
  delete_smb_org_unit_by_pk(id: bigint!): smb_org_unit
  """
  delete data from the table: "smb.persons"
  """
  delete_smb_persons("""filter the rows which have to be deleted""" where: smb_persons_bool_exp!): smb_persons_mutation_response
  """
  delete single row from the table: "smb.persons"
  """
  delete_smb_persons_by_pk(id: bigint!): smb_persons
  """
  delete data from the table: "smb.persons_objects"
  """
  delete_smb_persons_objects("""filter the rows which have to be deleted""" where: smb_persons_objects_bool_exp!): smb_persons_objects_mutation_response
  """
  delete single row from the table: "smb.persons_objects"
  """
  delete_smb_persons_objects_by_pk(id: bigint!): smb_persons_objects
  """
  delete data from the table: "smb.stt_platform"
  """
  delete_smb_stt_platform("""filter the rows which have to be deleted""" where: smb_stt_platform_bool_exp!): smb_stt_platform_mutation_response
  """
  delete single row from the table: "smb.stt_platform"
  """
  delete_smb_stt_platform_by_pk(value: String!): smb_stt_platform
  """
  delete data from the table: "smb.stt_platform_config"
  """
  delete_smb_stt_platform_config("""filter the rows which have to be deleted""" where: smb_stt_platform_config_bool_exp!): smb_stt_platform_config_mutation_response
  """
  delete single row from the table: "smb.stt_platform_config"
  """
  delete_smb_stt_platform_config_by_pk(id: bigint!): smb_stt_platform_config
  """
  delete data from the table: "smb.sync_cycle_type"
  """
  delete_smb_sync_cycle_type("""filter the rows which have to be deleted""" where: smb_sync_cycle_type_bool_exp!): smb_sync_cycle_type_mutation_response
  """
  delete single row from the table: "smb.sync_cycle_type"
  """
  delete_smb_sync_cycle_type_by_pk(value: String!): smb_sync_cycle_type
  """
  delete data from the table: "smb.sync_cycles"
  """
  delete_smb_sync_cycles("""filter the rows which have to be deleted""" where: smb_sync_cycles_bool_exp!): smb_sync_cycles_mutation_response
  """
  delete single row from the table: "smb.sync_cycles"
  """
  delete_smb_sync_cycles_by_pk(id: bigint!): smb_sync_cycles
  """
  delete data from the table: "smb.thesaurus"
  """
  delete_smb_thesaurus("""filter the rows which have to be deleted""" where: smb_thesaurus_bool_exp!): smb_thesaurus_mutation_response
  """
  delete single row from the table: "smb.thesaurus"
  """
  delete_smb_thesaurus_by_pk(id: bigint!): smb_thesaurus
  """
  delete data from the table: "smb.thesaurus_translations"
  """
  delete_smb_thesaurus_translations("""filter the rows which have to be deleted""" where: smb_thesaurus_translations_bool_exp!): smb_thesaurus_translations_mutation_response
  """
  delete single row from the table: "smb.thesaurus_translations"
  """
  delete_smb_thesaurus_translations_by_pk(id: bigint!): smb_thesaurus_translations
  """
  delete data from the table: "smb.user"
  """
  delete_smb_user("""filter the rows which have to be deleted""" where: smb_user_bool_exp!): smb_user_mutation_response
  """
  delete single row from the table: "smb.user"
  """
  delete_smb_user_by_pk(id: uuid!): smb_user
  """
  delete data from the table: "smb.user_role"
  """
  delete_smb_user_role("""filter the rows which have to be deleted""" where: smb_user_role_bool_exp!): smb_user_role_mutation_response
  """
  delete single row from the table: "smb.user_role"
  """
  delete_smb_user_role_by_pk(id: bigint!): smb_user_role
  """
  insert data into the table: "smb.assortments"
  """
  insert_smb_assortments("""the rows to be inserted""" objects: [smb_assortments_insert_input!]!, """upsert condition""" on_conflict: smb_assortments_on_conflict): smb_assortments_mutation_response
  """
  insert data into the table: "smb.assortments_objects"
  """
  insert_smb_assortments_objects("""the rows to be inserted""" objects: [smb_assortments_objects_insert_input!]!, """upsert condition""" on_conflict: smb_assortments_objects_on_conflict): smb_assortments_objects_mutation_response
  """
  insert a single row into the table: "smb.assortments_objects"
  """
  insert_smb_assortments_objects_one("""the row to be inserted""" object: smb_assortments_objects_insert_input!, """upsert condition""" on_conflict: smb_assortments_objects_on_conflict): smb_assortments_objects
  """
  insert a single row into the table: "smb.assortments"
  """
  insert_smb_assortments_one("""the row to be inserted""" object: smb_assortments_insert_input!, """upsert condition""" on_conflict: smb_assortments_on_conflict): smb_assortments
  """
  insert data into the table: "smb.assortments_translation"
  """
  insert_smb_assortments_translation("""the rows to be inserted""" objects: [smb_assortments_translation_insert_input!]!, """upsert condition""" on_conflict: smb_assortments_translation_on_conflict): smb_assortments_translation_mutation_response
  """
  insert a single row into the table: "smb.assortments_translation"
  """
  insert_smb_assortments_translation_one("""the row to be inserted""" object: smb_assortments_translation_insert_input!, """upsert condition""" on_conflict: smb_assortments_translation_on_conflict): smb_assortments_translation
  """
  insert data into the table: "smb.attachments"
  """
  insert_smb_attachments("""the rows to be inserted""" objects: [smb_attachments_insert_input!]!, """upsert condition""" on_conflict: smb_attachments_on_conflict): smb_attachments_mutation_response
  """
  insert a single row into the table: "smb.attachments"
  """
  insert_smb_attachments_one("""the row to be inserted""" object: smb_attachments_insert_input!, """upsert condition""" on_conflict: smb_attachments_on_conflict): smb_attachments
  """
  insert data into the table: "smb.attribute_approval"
  """
  insert_smb_attribute_approval("""the rows to be inserted""" objects: [smb_attribute_approval_insert_input!]!, """upsert condition""" on_conflict: smb_attribute_approval_on_conflict): smb_attribute_approval_mutation_response
  """
  insert a single row into the table: "smb.attribute_approval"
  """
  insert_smb_attribute_approval_one("""the row to be inserted""" object: smb_attribute_approval_insert_input!, """upsert condition""" on_conflict: smb_attribute_approval_on_conflict): smb_attribute_approval
  """
  insert data into the table: "smb.attribute_translations"
  """
  insert_smb_attribute_translations("""the rows to be inserted""" objects: [smb_attribute_translations_insert_input!]!, """upsert condition""" on_conflict: smb_attribute_translations_on_conflict): smb_attribute_translations_mutation_response
  """
  insert a single row into the table: "smb.attribute_translations"
  """
  insert_smb_attribute_translations_one("""the row to be inserted""" object: smb_attribute_translations_insert_input!, """upsert condition""" on_conflict: smb_attribute_translations_on_conflict): smb_attribute_translations
  """
  insert data into the table: "smb.attributes"
  """
  insert_smb_attributes("""the rows to be inserted""" objects: [smb_attributes_insert_input!]!, """upsert condition""" on_conflict: smb_attributes_on_conflict): smb_attributes_mutation_response
  """
  insert a single row into the table: "smb.attributes"
  """
  insert_smb_attributes_one("""the row to be inserted""" object: smb_attributes_insert_input!, """upsert condition""" on_conflict: smb_attributes_on_conflict): smb_attributes
  """
  insert data into the table: "smb.blocked_attachments"
  """
  insert_smb_blocked_attachments("""the rows to be inserted""" objects: [smb_blocked_attachments_insert_input!]!, """upsert condition""" on_conflict: smb_blocked_attachments_on_conflict): smb_blocked_attachments_mutation_response
  """
  insert a single row into the table: "smb.blocked_attachments"
  """
  insert_smb_blocked_attachments_one("""the row to be inserted""" object: smb_blocked_attachments_insert_input!, """upsert condition""" on_conflict: smb_blocked_attachments_on_conflict): smb_blocked_attachments
  """
  insert data into the table: "smb.buildings"
  """
  insert_smb_buildings("""the rows to be inserted""" objects: [smb_buildings_insert_input!]!, """upsert condition""" on_conflict: smb_buildings_on_conflict): smb_buildings_mutation_response
  """
  insert a single row into the table: "smb.buildings"
  """
  insert_smb_buildings_one("""the row to be inserted""" object: smb_buildings_insert_input!, """upsert condition""" on_conflict: smb_buildings_on_conflict): smb_buildings
  """
  insert data into the table: "smb.collections"
  """
  insert_smb_collections("""the rows to be inserted""" objects: [smb_collections_insert_input!]!, """upsert condition""" on_conflict: smb_collections_on_conflict): smb_collections_mutation_response
  """
  insert a single row into the table: "smb.collections"
  """
  insert_smb_collections_one("""the row to be inserted""" object: smb_collections_insert_input!, """upsert condition""" on_conflict: smb_collections_on_conflict): smb_collections
  """
  insert data into the table: "smb.cultural_references"
  """
  insert_smb_cultural_references("""the rows to be inserted""" objects: [smb_cultural_references_insert_input!]!, """upsert condition""" on_conflict: smb_cultural_references_on_conflict): smb_cultural_references_mutation_response
  """
  insert a single row into the table: "smb.cultural_references"
  """
  insert_smb_cultural_references_one("""the row to be inserted""" object: smb_cultural_references_insert_input!, """upsert condition""" on_conflict: smb_cultural_references_on_conflict): smb_cultural_references
  """
  insert data into the table: "smb.exhibitions"
  """
  insert_smb_exhibitions("""the rows to be inserted""" objects: [smb_exhibitions_insert_input!]!, """upsert condition""" on_conflict: smb_exhibitions_on_conflict): smb_exhibitions_mutation_response
  """
  insert data into the table: "smb.exhibitions_objects"
  """
  insert_smb_exhibitions_objects("""the rows to be inserted""" objects: [smb_exhibitions_objects_insert_input!]!, """upsert condition""" on_conflict: smb_exhibitions_objects_on_conflict): smb_exhibitions_objects_mutation_response
  """
  insert a single row into the table: "smb.exhibitions_objects"
  """
  insert_smb_exhibitions_objects_one("""the row to be inserted""" object: smb_exhibitions_objects_insert_input!, """upsert condition""" on_conflict: smb_exhibitions_objects_on_conflict): smb_exhibitions_objects
  """
  insert a single row into the table: "smb.exhibitions"
  """
  insert_smb_exhibitions_one("""the row to be inserted""" object: smb_exhibitions_insert_input!, """upsert condition""" on_conflict: smb_exhibitions_on_conflict): smb_exhibitions
  """
  insert data into the table: "smb.geographical_references"
  """
  insert_smb_geographical_references("""the rows to be inserted""" objects: [smb_geographical_references_insert_input!]!, """upsert condition""" on_conflict: smb_geographical_references_on_conflict): smb_geographical_references_mutation_response
  """
  insert a single row into the table: "smb.geographical_references"
  """
  insert_smb_geographical_references_one("""the row to be inserted""" object: smb_geographical_references_insert_input!, """upsert condition""" on_conflict: smb_geographical_references_on_conflict): smb_geographical_references
  """
  insert data into the table: "smb.highlights"
  """
  insert_smb_highlights("""the rows to be inserted""" objects: [smb_highlights_insert_input!]!, """upsert condition""" on_conflict: smb_highlights_on_conflict): smb_highlights_mutation_response
  """
  insert a single row into the table: "smb.highlights"
  """
  insert_smb_highlights_one("""the row to be inserted""" object: smb_highlights_insert_input!, """upsert condition""" on_conflict: smb_highlights_on_conflict): smb_highlights
  """
  insert data into the table: "smb.ignoreable_keys"
  """
  insert_smb_ignoreable_keys("""the rows to be inserted""" objects: [smb_ignoreable_keys_insert_input!]!, """upsert condition""" on_conflict: smb_ignoreable_keys_on_conflict): smb_ignoreable_keys_mutation_response
  """
  insert a single row into the table: "smb.ignoreable_keys"
  """
  insert_smb_ignoreable_keys_one("""the row to be inserted""" object: smb_ignoreable_keys_insert_input!, """upsert condition""" on_conflict: smb_ignoreable_keys_on_conflict): smb_ignoreable_keys
  """
  insert data into the table: "smb.language"
  """
  insert_smb_language("""the rows to be inserted""" objects: [smb_language_insert_input!]!, """upsert condition""" on_conflict: smb_language_on_conflict): smb_language_mutation_response
  """
  insert a single row into the table: "smb.language"
  """
  insert_smb_language_one("""the row to be inserted""" object: smb_language_insert_input!, """upsert condition""" on_conflict: smb_language_on_conflict): smb_language
  """
  insert data into the table: "smb.licenses"
  """
  insert_smb_licenses("""the rows to be inserted""" objects: [smb_licenses_insert_input!]!, """upsert condition""" on_conflict: smb_licenses_on_conflict): smb_licenses_mutation_response
  """
  insert a single row into the table: "smb.licenses"
  """
  insert_smb_licenses_one("""the row to be inserted""" object: smb_licenses_insert_input!, """upsert condition""" on_conflict: smb_licenses_on_conflict): smb_licenses
  """
  insert data into the table: "smb.licenses_translation"
  """
  insert_smb_licenses_translation("""the rows to be inserted""" objects: [smb_licenses_translation_insert_input!]!, """upsert condition""" on_conflict: smb_licenses_translation_on_conflict): smb_licenses_translation_mutation_response
  """
  insert a single row into the table: "smb.licenses_translation"
  """
  insert_smb_licenses_translation_one("""the row to be inserted""" object: smb_licenses_translation_insert_input!, """upsert condition""" on_conflict: smb_licenses_translation_on_conflict): smb_licenses_translation
  """
  insert data into the table: "smb.material_references"
  """
  insert_smb_material_references("""the rows to be inserted""" objects: [smb_material_references_insert_input!]!, """upsert condition""" on_conflict: smb_material_references_on_conflict): smb_material_references_mutation_response
  """
  insert a single row into the table: "smb.material_references"
  """
  insert_smb_material_references_one("""the row to be inserted""" object: smb_material_references_insert_input!, """upsert condition""" on_conflict: smb_material_references_on_conflict): smb_material_references
  """
  insert data into the table: "smb.objects"
  """
  insert_smb_objects("""the rows to be inserted""" objects: [smb_objects_insert_input!]!, """upsert condition""" on_conflict: smb_objects_on_conflict): smb_objects_mutation_response
  """
  insert a single row into the table: "smb.objects"
  """
  insert_smb_objects_one("""the row to be inserted""" object: smb_objects_insert_input!, """upsert condition""" on_conflict: smb_objects_on_conflict): smb_objects
  """
  insert data into the table: "smb.org_unit"
  """
  insert_smb_org_unit("""the rows to be inserted""" objects: [smb_org_unit_insert_input!]!, """upsert condition""" on_conflict: smb_org_unit_on_conflict): smb_org_unit_mutation_response
  """
  insert a single row into the table: "smb.org_unit"
  """
  insert_smb_org_unit_one("""the row to be inserted""" object: smb_org_unit_insert_input!, """upsert condition""" on_conflict: smb_org_unit_on_conflict): smb_org_unit
  """
  insert data into the table: "smb.persons"
  """
  insert_smb_persons("""the rows to be inserted""" objects: [smb_persons_insert_input!]!, """upsert condition""" on_conflict: smb_persons_on_conflict): smb_persons_mutation_response
  """
  insert data into the table: "smb.persons_objects"
  """
  insert_smb_persons_objects("""the rows to be inserted""" objects: [smb_persons_objects_insert_input!]!, """upsert condition""" on_conflict: smb_persons_objects_on_conflict): smb_persons_objects_mutation_response
  """
  insert a single row into the table: "smb.persons_objects"
  """
  insert_smb_persons_objects_one("""the row to be inserted""" object: smb_persons_objects_insert_input!, """upsert condition""" on_conflict: smb_persons_objects_on_conflict): smb_persons_objects
  """
  insert a single row into the table: "smb.persons"
  """
  insert_smb_persons_one("""the row to be inserted""" object: smb_persons_insert_input!, """upsert condition""" on_conflict: smb_persons_on_conflict): smb_persons
  """
  insert data into the table: "smb.stt_platform"
  """
  insert_smb_stt_platform("""the rows to be inserted""" objects: [smb_stt_platform_insert_input!]!, """upsert condition""" on_conflict: smb_stt_platform_on_conflict): smb_stt_platform_mutation_response
  """
  insert data into the table: "smb.stt_platform_config"
  """
  insert_smb_stt_platform_config("""the rows to be inserted""" objects: [smb_stt_platform_config_insert_input!]!, """upsert condition""" on_conflict: smb_stt_platform_config_on_conflict): smb_stt_platform_config_mutation_response
  """
  insert a single row into the table: "smb.stt_platform_config"
  """
  insert_smb_stt_platform_config_one("""the row to be inserted""" object: smb_stt_platform_config_insert_input!, """upsert condition""" on_conflict: smb_stt_platform_config_on_conflict): smb_stt_platform_config
  """
  insert a single row into the table: "smb.stt_platform"
  """
  insert_smb_stt_platform_one("""the row to be inserted""" object: smb_stt_platform_insert_input!, """upsert condition""" on_conflict: smb_stt_platform_on_conflict): smb_stt_platform
  """
  insert data into the table: "smb.sync_cycle_type"
  """
  insert_smb_sync_cycle_type("""the rows to be inserted""" objects: [smb_sync_cycle_type_insert_input!]!, """upsert condition""" on_conflict: smb_sync_cycle_type_on_conflict): smb_sync_cycle_type_mutation_response
  """
  insert a single row into the table: "smb.sync_cycle_type"
  """
  insert_smb_sync_cycle_type_one("""the row to be inserted""" object: smb_sync_cycle_type_insert_input!, """upsert condition""" on_conflict: smb_sync_cycle_type_on_conflict): smb_sync_cycle_type
  """
  insert data into the table: "smb.sync_cycles"
  """
  insert_smb_sync_cycles("""the rows to be inserted""" objects: [smb_sync_cycles_insert_input!]!, """upsert condition""" on_conflict: smb_sync_cycles_on_conflict): smb_sync_cycles_mutation_response
  """
  insert a single row into the table: "smb.sync_cycles"
  """
  insert_smb_sync_cycles_one("""the row to be inserted""" object: smb_sync_cycles_insert_input!, """upsert condition""" on_conflict: smb_sync_cycles_on_conflict): smb_sync_cycles
  """
  insert data into the table: "smb.thesaurus"
  """
  insert_smb_thesaurus("""the rows to be inserted""" objects: [smb_thesaurus_insert_input!]!, """upsert condition""" on_conflict: smb_thesaurus_on_conflict): smb_thesaurus_mutation_response
  """
  insert a single row into the table: "smb.thesaurus"
  """
  insert_smb_thesaurus_one("""the row to be inserted""" object: smb_thesaurus_insert_input!, """upsert condition""" on_conflict: smb_thesaurus_on_conflict): smb_thesaurus
  """
  insert data into the table: "smb.thesaurus_translations"
  """
  insert_smb_thesaurus_translations("""the rows to be inserted""" objects: [smb_thesaurus_translations_insert_input!]!, """upsert condition""" on_conflict: smb_thesaurus_translations_on_conflict): smb_thesaurus_translations_mutation_response
  """
  insert a single row into the table: "smb.thesaurus_translations"
  """
  insert_smb_thesaurus_translations_one("""the row to be inserted""" object: smb_thesaurus_translations_insert_input!, """upsert condition""" on_conflict: smb_thesaurus_translations_on_conflict): smb_thesaurus_translations
  """
  insert data into the table: "smb.user"
  """
  insert_smb_user("""the rows to be inserted""" objects: [smb_user_insert_input!]!, """upsert condition""" on_conflict: smb_user_on_conflict): smb_user_mutation_response
  """
  insert a single row into the table: "smb.user"
  """
  insert_smb_user_one("""the row to be inserted""" object: smb_user_insert_input!, """upsert condition""" on_conflict: smb_user_on_conflict): smb_user
  """
  insert data into the table: "smb.user_role"
  """
  insert_smb_user_role("""the rows to be inserted""" objects: [smb_user_role_insert_input!]!, """upsert condition""" on_conflict: smb_user_role_on_conflict): smb_user_role_mutation_response
  """
  insert a single row into the table: "smb.user_role"
  """
  insert_smb_user_role_one("""the row to be inserted""" object: smb_user_role_insert_input!, """upsert condition""" on_conflict: smb_user_role_on_conflict): smb_user_role
  strapi_hbf: strapi_hbfMutation
  strapi_isl: strapi_islMutation
  strapi_kgm: strapi_kgmMutation
  strapi_smb: strapi_smbMutation
  """
  update data of the table: "smb.assortments"
  """
  update_smb_assortments("""increments the numeric columns with given value of the filtered values""" _inc: smb_assortments_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_assortments_set_input, """filter the rows which have to be updated""" where: smb_assortments_bool_exp!): smb_assortments_mutation_response
  """
  update single row of the table: "smb.assortments"
  """
  update_smb_assortments_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_assortments_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_assortments_set_input, pk_columns: smb_assortments_pk_columns_input!): smb_assortments
  """
  update multiples rows of table: "smb.assortments"
  """
  update_smb_assortments_many("""updates to execute, in order""" updates: [smb_assortments_updates!]!): [smb_assortments_mutation_response]
  """
  update data of the table: "smb.assortments_objects"
  """
  update_smb_assortments_objects("""increments the numeric columns with given value of the filtered values""" _inc: smb_assortments_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_assortments_objects_set_input, """filter the rows which have to be updated""" where: smb_assortments_objects_bool_exp!): smb_assortments_objects_mutation_response
  """
  update single row of the table: "smb.assortments_objects"
  """
  update_smb_assortments_objects_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_assortments_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_assortments_objects_set_input, pk_columns: smb_assortments_objects_pk_columns_input!): smb_assortments_objects
  """
  update multiples rows of table: "smb.assortments_objects"
  """
  update_smb_assortments_objects_many("""updates to execute, in order""" updates: [smb_assortments_objects_updates!]!): [smb_assortments_objects_mutation_response]
  """
  update data of the table: "smb.assortments_translation"
  """
  update_smb_assortments_translation("""increments the numeric columns with given value of the filtered values""" _inc: smb_assortments_translation_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_assortments_translation_set_input, """filter the rows which have to be updated""" where: smb_assortments_translation_bool_exp!): smb_assortments_translation_mutation_response
  """
  update single row of the table: "smb.assortments_translation"
  """
  update_smb_assortments_translation_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_assortments_translation_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_assortments_translation_set_input, pk_columns: smb_assortments_translation_pk_columns_input!): smb_assortments_translation
  """
  update multiples rows of table: "smb.assortments_translation"
  """
  update_smb_assortments_translation_many("""updates to execute, in order""" updates: [smb_assortments_translation_updates!]!): [smb_assortments_translation_mutation_response]
  """
  update data of the table: "smb.attachments"
  """
  update_smb_attachments("""increments the numeric columns with given value of the filtered values""" _inc: smb_attachments_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_attachments_set_input, """filter the rows which have to be updated""" where: smb_attachments_bool_exp!): smb_attachments_mutation_response
  """
  update single row of the table: "smb.attachments"
  """
  update_smb_attachments_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_attachments_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_attachments_set_input, pk_columns: smb_attachments_pk_columns_input!): smb_attachments
  """
  update multiples rows of table: "smb.attachments"
  """
  update_smb_attachments_many("""updates to execute, in order""" updates: [smb_attachments_updates!]!): [smb_attachments_mutation_response]
  """
  update data of the table: "smb.attribute_approval"
  """
  update_smb_attribute_approval("""increments the numeric columns with given value of the filtered values""" _inc: smb_attribute_approval_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_attribute_approval_set_input, """filter the rows which have to be updated""" where: smb_attribute_approval_bool_exp!): smb_attribute_approval_mutation_response
  """
  update single row of the table: "smb.attribute_approval"
  """
  update_smb_attribute_approval_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_attribute_approval_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_attribute_approval_set_input, pk_columns: smb_attribute_approval_pk_columns_input!): smb_attribute_approval
  """
  update multiples rows of table: "smb.attribute_approval"
  """
  update_smb_attribute_approval_many("""updates to execute, in order""" updates: [smb_attribute_approval_updates!]!): [smb_attribute_approval_mutation_response]
  """
  update data of the table: "smb.attribute_translations"
  """
  update_smb_attribute_translations("""increments the numeric columns with given value of the filtered values""" _inc: smb_attribute_translations_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_attribute_translations_set_input, """filter the rows which have to be updated""" where: smb_attribute_translations_bool_exp!): smb_attribute_translations_mutation_response
  """
  update single row of the table: "smb.attribute_translations"
  """
  update_smb_attribute_translations_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_attribute_translations_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_attribute_translations_set_input, pk_columns: smb_attribute_translations_pk_columns_input!): smb_attribute_translations
  """
  update multiples rows of table: "smb.attribute_translations"
  """
  update_smb_attribute_translations_many("""updates to execute, in order""" updates: [smb_attribute_translations_updates!]!): [smb_attribute_translations_mutation_response]
  """
  update data of the table: "smb.attributes"
  """
  update_smb_attributes("""sets the columns of the filtered rows to the given values""" _set: smb_attributes_set_input, """filter the rows which have to be updated""" where: smb_attributes_bool_exp!): smb_attributes_mutation_response
  """
  update single row of the table: "smb.attributes"
  """
  update_smb_attributes_by_pk("""sets the columns of the filtered rows to the given values""" _set: smb_attributes_set_input, pk_columns: smb_attributes_pk_columns_input!): smb_attributes
  """
  update multiples rows of table: "smb.attributes"
  """
  update_smb_attributes_many("""updates to execute, in order""" updates: [smb_attributes_updates!]!): [smb_attributes_mutation_response]
  """
  update data of the table: "smb.blocked_attachments"
  """
  update_smb_blocked_attachments("""increments the numeric columns with given value of the filtered values""" _inc: smb_blocked_attachments_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_blocked_attachments_set_input, """filter the rows which have to be updated""" where: smb_blocked_attachments_bool_exp!): smb_blocked_attachments_mutation_response
  """
  update single row of the table: "smb.blocked_attachments"
  """
  update_smb_blocked_attachments_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_blocked_attachments_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_blocked_attachments_set_input, pk_columns: smb_blocked_attachments_pk_columns_input!): smb_blocked_attachments
  """
  update multiples rows of table: "smb.blocked_attachments"
  """
  update_smb_blocked_attachments_many("""updates to execute, in order""" updates: [smb_blocked_attachments_updates!]!): [smb_blocked_attachments_mutation_response]
  """
  update data of the table: "smb.buildings"
  """
  update_smb_buildings("""sets the columns of the filtered rows to the given values""" _set: smb_buildings_set_input, """filter the rows which have to be updated""" where: smb_buildings_bool_exp!): smb_buildings_mutation_response
  """
  update single row of the table: "smb.buildings"
  """
  update_smb_buildings_by_pk("""sets the columns of the filtered rows to the given values""" _set: smb_buildings_set_input, pk_columns: smb_buildings_pk_columns_input!): smb_buildings
  """
  update multiples rows of table: "smb.buildings"
  """
  update_smb_buildings_many("""updates to execute, in order""" updates: [smb_buildings_updates!]!): [smb_buildings_mutation_response]
  """
  update data of the table: "smb.collections"
  """
  update_smb_collections("""sets the columns of the filtered rows to the given values""" _set: smb_collections_set_input, """filter the rows which have to be updated""" where: smb_collections_bool_exp!): smb_collections_mutation_response
  """
  update single row of the table: "smb.collections"
  """
  update_smb_collections_by_pk("""sets the columns of the filtered rows to the given values""" _set: smb_collections_set_input, pk_columns: smb_collections_pk_columns_input!): smb_collections
  """
  update multiples rows of table: "smb.collections"
  """
  update_smb_collections_many("""updates to execute, in order""" updates: [smb_collections_updates!]!): [smb_collections_mutation_response]
  """
  update data of the table: "smb.cultural_references"
  """
  update_smb_cultural_references("""increments the numeric columns with given value of the filtered values""" _inc: smb_cultural_references_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_cultural_references_set_input, """filter the rows which have to be updated""" where: smb_cultural_references_bool_exp!): smb_cultural_references_mutation_response
  """
  update single row of the table: "smb.cultural_references"
  """
  update_smb_cultural_references_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_cultural_references_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_cultural_references_set_input, pk_columns: smb_cultural_references_pk_columns_input!): smb_cultural_references
  """
  update multiples rows of table: "smb.cultural_references"
  """
  update_smb_cultural_references_many("""updates to execute, in order""" updates: [smb_cultural_references_updates!]!): [smb_cultural_references_mutation_response]
  """
  update data of the table: "smb.exhibitions"
  """
  update_smb_exhibitions("""increments the numeric columns with given value of the filtered values""" _inc: smb_exhibitions_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_exhibitions_set_input, """filter the rows which have to be updated""" where: smb_exhibitions_bool_exp!): smb_exhibitions_mutation_response
  """
  update single row of the table: "smb.exhibitions"
  """
  update_smb_exhibitions_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_exhibitions_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_exhibitions_set_input, pk_columns: smb_exhibitions_pk_columns_input!): smb_exhibitions
  """
  update multiples rows of table: "smb.exhibitions"
  """
  update_smb_exhibitions_many("""updates to execute, in order""" updates: [smb_exhibitions_updates!]!): [smb_exhibitions_mutation_response]
  """
  update data of the table: "smb.exhibitions_objects"
  """
  update_smb_exhibitions_objects("""increments the numeric columns with given value of the filtered values""" _inc: smb_exhibitions_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_exhibitions_objects_set_input, """filter the rows which have to be updated""" where: smb_exhibitions_objects_bool_exp!): smb_exhibitions_objects_mutation_response
  """
  update single row of the table: "smb.exhibitions_objects"
  """
  update_smb_exhibitions_objects_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_exhibitions_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_exhibitions_objects_set_input, pk_columns: smb_exhibitions_objects_pk_columns_input!): smb_exhibitions_objects
  """
  update multiples rows of table: "smb.exhibitions_objects"
  """
  update_smb_exhibitions_objects_many("""updates to execute, in order""" updates: [smb_exhibitions_objects_updates!]!): [smb_exhibitions_objects_mutation_response]
  """
  update data of the table: "smb.geographical_references"
  """
  update_smb_geographical_references("""increments the numeric columns with given value of the filtered values""" _inc: smb_geographical_references_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_geographical_references_set_input, """filter the rows which have to be updated""" where: smb_geographical_references_bool_exp!): smb_geographical_references_mutation_response
  """
  update single row of the table: "smb.geographical_references"
  """
  update_smb_geographical_references_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_geographical_references_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_geographical_references_set_input, pk_columns: smb_geographical_references_pk_columns_input!): smb_geographical_references
  """
  update multiples rows of table: "smb.geographical_references"
  """
  update_smb_geographical_references_many("""updates to execute, in order""" updates: [smb_geographical_references_updates!]!): [smb_geographical_references_mutation_response]
  """
  update data of the table: "smb.highlights"
  """
  update_smb_highlights("""increments the numeric columns with given value of the filtered values""" _inc: smb_highlights_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_highlights_set_input, """filter the rows which have to be updated""" where: smb_highlights_bool_exp!): smb_highlights_mutation_response
  """
  update single row of the table: "smb.highlights"
  """
  update_smb_highlights_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_highlights_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_highlights_set_input, pk_columns: smb_highlights_pk_columns_input!): smb_highlights
  """
  update multiples rows of table: "smb.highlights"
  """
  update_smb_highlights_many("""updates to execute, in order""" updates: [smb_highlights_updates!]!): [smb_highlights_mutation_response]
  """
  update data of the table: "smb.ignoreable_keys"
  """
  update_smb_ignoreable_keys("""increments the numeric columns with given value of the filtered values""" _inc: smb_ignoreable_keys_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_ignoreable_keys_set_input, """filter the rows which have to be updated""" where: smb_ignoreable_keys_bool_exp!): smb_ignoreable_keys_mutation_response
  """
  update single row of the table: "smb.ignoreable_keys"
  """
  update_smb_ignoreable_keys_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_ignoreable_keys_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_ignoreable_keys_set_input, pk_columns: smb_ignoreable_keys_pk_columns_input!): smb_ignoreable_keys
  """
  update multiples rows of table: "smb.ignoreable_keys"
  """
  update_smb_ignoreable_keys_many("""updates to execute, in order""" updates: [smb_ignoreable_keys_updates!]!): [smb_ignoreable_keys_mutation_response]
  """
  update data of the table: "smb.language"
  """
  update_smb_language("""increments the numeric columns with given value of the filtered values""" _inc: smb_language_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_language_set_input, """filter the rows which have to be updated""" where: smb_language_bool_exp!): smb_language_mutation_response
  """
  update single row of the table: "smb.language"
  """
  update_smb_language_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_language_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_language_set_input, pk_columns: smb_language_pk_columns_input!): smb_language
  """
  update multiples rows of table: "smb.language"
  """
  update_smb_language_many("""updates to execute, in order""" updates: [smb_language_updates!]!): [smb_language_mutation_response]
  """
  update data of the table: "smb.licenses"
  """
  update_smb_licenses("""increments the numeric columns with given value of the filtered values""" _inc: smb_licenses_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_licenses_set_input, """filter the rows which have to be updated""" where: smb_licenses_bool_exp!): smb_licenses_mutation_response
  """
  update single row of the table: "smb.licenses"
  """
  update_smb_licenses_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_licenses_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_licenses_set_input, pk_columns: smb_licenses_pk_columns_input!): smb_licenses
  """
  update multiples rows of table: "smb.licenses"
  """
  update_smb_licenses_many("""updates to execute, in order""" updates: [smb_licenses_updates!]!): [smb_licenses_mutation_response]
  """
  update data of the table: "smb.licenses_translation"
  """
  update_smb_licenses_translation("""increments the numeric columns with given value of the filtered values""" _inc: smb_licenses_translation_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_licenses_translation_set_input, """filter the rows which have to be updated""" where: smb_licenses_translation_bool_exp!): smb_licenses_translation_mutation_response
  """
  update single row of the table: "smb.licenses_translation"
  """
  update_smb_licenses_translation_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_licenses_translation_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_licenses_translation_set_input, pk_columns: smb_licenses_translation_pk_columns_input!): smb_licenses_translation
  """
  update multiples rows of table: "smb.licenses_translation"
  """
  update_smb_licenses_translation_many("""updates to execute, in order""" updates: [smb_licenses_translation_updates!]!): [smb_licenses_translation_mutation_response]
  """
  update data of the table: "smb.material_references"
  """
  update_smb_material_references("""increments the numeric columns with given value of the filtered values""" _inc: smb_material_references_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_material_references_set_input, """filter the rows which have to be updated""" where: smb_material_references_bool_exp!): smb_material_references_mutation_response
  """
  update single row of the table: "smb.material_references"
  """
  update_smb_material_references_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_material_references_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_material_references_set_input, pk_columns: smb_material_references_pk_columns_input!): smb_material_references
  """
  update multiples rows of table: "smb.material_references"
  """
  update_smb_material_references_many("""updates to execute, in order""" updates: [smb_material_references_updates!]!): [smb_material_references_mutation_response]
  """
  update data of the table: "smb.objects"
  """
  update_smb_objects("""increments the numeric columns with given value of the filtered values""" _inc: smb_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_objects_set_input, """filter the rows which have to be updated""" where: smb_objects_bool_exp!): smb_objects_mutation_response
  """
  update single row of the table: "smb.objects"
  """
  update_smb_objects_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_objects_set_input, pk_columns: smb_objects_pk_columns_input!): smb_objects
  """
  update multiples rows of table: "smb.objects"
  """
  update_smb_objects_many("""updates to execute, in order""" updates: [smb_objects_updates!]!): [smb_objects_mutation_response]
  """
  update data of the table: "smb.org_unit"
  """
  update_smb_org_unit("""increments the numeric columns with given value of the filtered values""" _inc: smb_org_unit_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_org_unit_set_input, """filter the rows which have to be updated""" where: smb_org_unit_bool_exp!): smb_org_unit_mutation_response
  """
  update single row of the table: "smb.org_unit"
  """
  update_smb_org_unit_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_org_unit_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_org_unit_set_input, pk_columns: smb_org_unit_pk_columns_input!): smb_org_unit
  """
  update multiples rows of table: "smb.org_unit"
  """
  update_smb_org_unit_many("""updates to execute, in order""" updates: [smb_org_unit_updates!]!): [smb_org_unit_mutation_response]
  """
  update data of the table: "smb.persons"
  """
  update_smb_persons("""increments the numeric columns with given value of the filtered values""" _inc: smb_persons_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_persons_set_input, """filter the rows which have to be updated""" where: smb_persons_bool_exp!): smb_persons_mutation_response
  """
  update single row of the table: "smb.persons"
  """
  update_smb_persons_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_persons_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_persons_set_input, pk_columns: smb_persons_pk_columns_input!): smb_persons
  """
  update multiples rows of table: "smb.persons"
  """
  update_smb_persons_many("""updates to execute, in order""" updates: [smb_persons_updates!]!): [smb_persons_mutation_response]
  """
  update data of the table: "smb.persons_objects"
  """
  update_smb_persons_objects("""increments the numeric columns with given value of the filtered values""" _inc: smb_persons_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_persons_objects_set_input, """filter the rows which have to be updated""" where: smb_persons_objects_bool_exp!): smb_persons_objects_mutation_response
  """
  update single row of the table: "smb.persons_objects"
  """
  update_smb_persons_objects_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_persons_objects_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_persons_objects_set_input, pk_columns: smb_persons_objects_pk_columns_input!): smb_persons_objects
  """
  update multiples rows of table: "smb.persons_objects"
  """
  update_smb_persons_objects_many("""updates to execute, in order""" updates: [smb_persons_objects_updates!]!): [smb_persons_objects_mutation_response]
  """
  update data of the table: "smb.stt_platform"
  """
  update_smb_stt_platform("""sets the columns of the filtered rows to the given values""" _set: smb_stt_platform_set_input, """filter the rows which have to be updated""" where: smb_stt_platform_bool_exp!): smb_stt_platform_mutation_response
  """
  update single row of the table: "smb.stt_platform"
  """
  update_smb_stt_platform_by_pk("""sets the columns of the filtered rows to the given values""" _set: smb_stt_platform_set_input, pk_columns: smb_stt_platform_pk_columns_input!): smb_stt_platform
  """
  update data of the table: "smb.stt_platform_config"
  """
  update_smb_stt_platform_config("""increments the numeric columns with given value of the filtered values""" _inc: smb_stt_platform_config_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_stt_platform_config_set_input, """filter the rows which have to be updated""" where: smb_stt_platform_config_bool_exp!): smb_stt_platform_config_mutation_response
  """
  update single row of the table: "smb.stt_platform_config"
  """
  update_smb_stt_platform_config_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_stt_platform_config_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_stt_platform_config_set_input, pk_columns: smb_stt_platform_config_pk_columns_input!): smb_stt_platform_config
  """
  update multiples rows of table: "smb.stt_platform_config"
  """
  update_smb_stt_platform_config_many("""updates to execute, in order""" updates: [smb_stt_platform_config_updates!]!): [smb_stt_platform_config_mutation_response]
  """
  update multiples rows of table: "smb.stt_platform"
  """
  update_smb_stt_platform_many("""updates to execute, in order""" updates: [smb_stt_platform_updates!]!): [smb_stt_platform_mutation_response]
  """
  update data of the table: "smb.sync_cycle_type"
  """
  update_smb_sync_cycle_type("""sets the columns of the filtered rows to the given values""" _set: smb_sync_cycle_type_set_input, """filter the rows which have to be updated""" where: smb_sync_cycle_type_bool_exp!): smb_sync_cycle_type_mutation_response
  """
  update single row of the table: "smb.sync_cycle_type"
  """
  update_smb_sync_cycle_type_by_pk("""sets the columns of the filtered rows to the given values""" _set: smb_sync_cycle_type_set_input, pk_columns: smb_sync_cycle_type_pk_columns_input!): smb_sync_cycle_type
  """
  update multiples rows of table: "smb.sync_cycle_type"
  """
  update_smb_sync_cycle_type_many("""updates to execute, in order""" updates: [smb_sync_cycle_type_updates!]!): [smb_sync_cycle_type_mutation_response]
  """
  update data of the table: "smb.sync_cycles"
  """
  update_smb_sync_cycles("""increments the numeric columns with given value of the filtered values""" _inc: smb_sync_cycles_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_sync_cycles_set_input, """filter the rows which have to be updated""" where: smb_sync_cycles_bool_exp!): smb_sync_cycles_mutation_response
  """
  update single row of the table: "smb.sync_cycles"
  """
  update_smb_sync_cycles_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_sync_cycles_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_sync_cycles_set_input, pk_columns: smb_sync_cycles_pk_columns_input!): smb_sync_cycles
  """
  update multiples rows of table: "smb.sync_cycles"
  """
  update_smb_sync_cycles_many("""updates to execute, in order""" updates: [smb_sync_cycles_updates!]!): [smb_sync_cycles_mutation_response]
  """
  update data of the table: "smb.thesaurus"
  """
  update_smb_thesaurus("""increments the numeric columns with given value of the filtered values""" _inc: smb_thesaurus_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_thesaurus_set_input, """filter the rows which have to be updated""" where: smb_thesaurus_bool_exp!): smb_thesaurus_mutation_response
  """
  update single row of the table: "smb.thesaurus"
  """
  update_smb_thesaurus_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_thesaurus_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_thesaurus_set_input, pk_columns: smb_thesaurus_pk_columns_input!): smb_thesaurus
  """
  update multiples rows of table: "smb.thesaurus"
  """
  update_smb_thesaurus_many("""updates to execute, in order""" updates: [smb_thesaurus_updates!]!): [smb_thesaurus_mutation_response]
  """
  update data of the table: "smb.thesaurus_translations"
  """
  update_smb_thesaurus_translations("""increments the numeric columns with given value of the filtered values""" _inc: smb_thesaurus_translations_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_thesaurus_translations_set_input, """filter the rows which have to be updated""" where: smb_thesaurus_translations_bool_exp!): smb_thesaurus_translations_mutation_response
  """
  update single row of the table: "smb.thesaurus_translations"
  """
  update_smb_thesaurus_translations_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_thesaurus_translations_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_thesaurus_translations_set_input, pk_columns: smb_thesaurus_translations_pk_columns_input!): smb_thesaurus_translations
  """
  update multiples rows of table: "smb.thesaurus_translations"
  """
  update_smb_thesaurus_translations_many("""updates to execute, in order""" updates: [smb_thesaurus_translations_updates!]!): [smb_thesaurus_translations_mutation_response]
  """
  update data of the table: "smb.user"
  """
  update_smb_user("""increments the numeric columns with given value of the filtered values""" _inc: smb_user_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_user_set_input, """filter the rows which have to be updated""" where: smb_user_bool_exp!): smb_user_mutation_response
  """
  update single row of the table: "smb.user"
  """
  update_smb_user_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_user_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_user_set_input, pk_columns: smb_user_pk_columns_input!): smb_user
  """
  update multiples rows of table: "smb.user"
  """
  update_smb_user_many("""updates to execute, in order""" updates: [smb_user_updates!]!): [smb_user_mutation_response]
  """
  update data of the table: "smb.user_role"
  """
  update_smb_user_role("""increments the numeric columns with given value of the filtered values""" _inc: smb_user_role_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_user_role_set_input, """filter the rows which have to be updated""" where: smb_user_role_bool_exp!): smb_user_role_mutation_response
  """
  update single row of the table: "smb.user_role"
  """
  update_smb_user_role_by_pk("""increments the numeric columns with given value of the filtered values""" _inc: smb_user_role_inc_input, """sets the columns of the filtered rows to the given values""" _set: smb_user_role_set_input, pk_columns: smb_user_role_pk_columns_input!): smb_user_role
  """
  update multiples rows of table: "smb.user_role"
  """
  update_smb_user_role_many("""updates to execute, in order""" updates: [smb_user_role_updates!]!): [smb_user_role_mutation_response]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc
  """
  in ascending order, nulls first
  """
  asc_nulls_first
  """
  in ascending order, nulls last
  """
  asc_nulls_last
  """
  in descending order, nulls first
  """
  desc
  """
  in descending order, nulls first
  """
  desc_nulls_first
  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "smb.assortments"
  """
  smb_assortments("""distinct select on columns""" distinct_on: [smb_assortments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_order_by!], """filter the rows returned""" where: smb_assortments_bool_exp): [smb_assortments!]!
  """
  fetch aggregated fields from the table: "smb.assortments"
  """
  smb_assortments_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_order_by!], """filter the rows returned""" where: smb_assortments_bool_exp): smb_assortments_aggregate!
  """
  fetch data from the table: "smb.assortments" using primary key columns
  """
  smb_assortments_by_pk(id: bigint!): smb_assortments
  """
  fetch data from the table: "smb.assortments_objects"
  """
  smb_assortments_objects("""distinct select on columns""" distinct_on: [smb_assortments_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_objects_order_by!], """filter the rows returned""" where: smb_assortments_objects_bool_exp): [smb_assortments_objects!]!
  """
  fetch aggregated fields from the table: "smb.assortments_objects"
  """
  smb_assortments_objects_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_objects_order_by!], """filter the rows returned""" where: smb_assortments_objects_bool_exp): smb_assortments_objects_aggregate!
  """
  fetch data from the table: "smb.assortments_objects" using primary key columns
  """
  smb_assortments_objects_by_pk(id: bigint!): smb_assortments_objects
  """
  fetch data from the table: "smb.assortments_translation"
  """
  smb_assortments_translation("""distinct select on columns""" distinct_on: [smb_assortments_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_translation_order_by!], """filter the rows returned""" where: smb_assortments_translation_bool_exp): [smb_assortments_translation!]!
  """
  fetch aggregated fields from the table: "smb.assortments_translation"
  """
  smb_assortments_translation_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_translation_order_by!], """filter the rows returned""" where: smb_assortments_translation_bool_exp): smb_assortments_translation_aggregate!
  """
  fetch data from the table: "smb.assortments_translation" using primary key columns
  """
  smb_assortments_translation_by_pk(id: bigint!): smb_assortments_translation
  """
  fetch data from the table: "smb.attachments"
  """
  smb_attachments("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): [smb_attachments!]!
  """
  fetch aggregated fields from the table: "smb.attachments"
  """
  smb_attachments_aggregate("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): smb_attachments_aggregate!
  """
  fetch data from the table: "smb.attachments" using primary key columns
  """
  smb_attachments_by_pk(id: bigint!, object_id: bigint!): smb_attachments
  """
  fetch data from the table: "smb.attribute_approval"
  """
  smb_attribute_approval("""distinct select on columns""" distinct_on: [smb_attribute_approval_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_approval_order_by!], """filter the rows returned""" where: smb_attribute_approval_bool_exp): [smb_attribute_approval!]!
  """
  fetch aggregated fields from the table: "smb.attribute_approval"
  """
  smb_attribute_approval_aggregate("""distinct select on columns""" distinct_on: [smb_attribute_approval_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_approval_order_by!], """filter the rows returned""" where: smb_attribute_approval_bool_exp): smb_attribute_approval_aggregate!
  """
  fetch data from the table: "smb.attribute_approval" using primary key columns
  """
  smb_attribute_approval_by_pk(id: bigint!): smb_attribute_approval
  """
  fetch data from the table: "smb.attribute_translations"
  """
  smb_attribute_translations("""distinct select on columns""" distinct_on: [smb_attribute_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_translations_order_by!], """filter the rows returned""" where: smb_attribute_translations_bool_exp): [smb_attribute_translations!]!
  """
  fetch aggregated fields from the table: "smb.attribute_translations"
  """
  smb_attribute_translations_aggregate("""distinct select on columns""" distinct_on: [smb_attribute_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_translations_order_by!], """filter the rows returned""" where: smb_attribute_translations_bool_exp): smb_attribute_translations_aggregate!
  """
  fetch data from the table: "smb.attribute_translations" using primary key columns
  """
  smb_attribute_translations_by_pk(id: bigint!): smb_attribute_translations
  """
  fetch data from the table: "smb.attributes"
  """
  smb_attributes("""distinct select on columns""" distinct_on: [smb_attributes_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attributes_order_by!], """filter the rows returned""" where: smb_attributes_bool_exp): [smb_attributes!]!
  """
  fetch aggregated fields from the table: "smb.attributes"
  """
  smb_attributes_aggregate("""distinct select on columns""" distinct_on: [smb_attributes_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attributes_order_by!], """filter the rows returned""" where: smb_attributes_bool_exp): smb_attributes_aggregate!
  """
  fetch data from the table: "smb.attributes" using primary key columns
  """
  smb_attributes_by_pk(key: String!): smb_attributes
  """
  fetch data from the table: "smb.blocked_attachments"
  """
  smb_blocked_attachments("""distinct select on columns""" distinct_on: [smb_blocked_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_blocked_attachments_order_by!], """filter the rows returned""" where: smb_blocked_attachments_bool_exp): [smb_blocked_attachments!]!
  """
  fetch aggregated fields from the table: "smb.blocked_attachments"
  """
  smb_blocked_attachments_aggregate("""distinct select on columns""" distinct_on: [smb_blocked_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_blocked_attachments_order_by!], """filter the rows returned""" where: smb_blocked_attachments_bool_exp): smb_blocked_attachments_aggregate!
  """
  fetch data from the table: "smb.blocked_attachments" using primary key columns
  """
  smb_blocked_attachments_by_pk(id: bigint!): smb_blocked_attachments
  """
  fetch data from the table: "smb.buildings"
  """
  smb_buildings("""distinct select on columns""" distinct_on: [smb_buildings_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_buildings_order_by!], """filter the rows returned""" where: smb_buildings_bool_exp): [smb_buildings!]!
  """
  fetch aggregated fields from the table: "smb.buildings"
  """
  smb_buildings_aggregate("""distinct select on columns""" distinct_on: [smb_buildings_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_buildings_order_by!], """filter the rows returned""" where: smb_buildings_bool_exp): smb_buildings_aggregate!
  """
  fetch data from the table: "smb.buildings" using primary key columns
  """
  smb_buildings_by_pk(key: String!): smb_buildings
  """
  fetch data from the table: "smb.collections"
  """
  smb_collections("""distinct select on columns""" distinct_on: [smb_collections_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_collections_order_by!], """filter the rows returned""" where: smb_collections_bool_exp): [smb_collections!]!
  """
  fetch aggregated fields from the table: "smb.collections"
  """
  smb_collections_aggregate("""distinct select on columns""" distinct_on: [smb_collections_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_collections_order_by!], """filter the rows returned""" where: smb_collections_bool_exp): smb_collections_aggregate!
  """
  fetch data from the table: "smb.collections" using primary key columns
  """
  smb_collections_by_pk(key: String!): smb_collections
  """
  fetch data from the table: "smb.cultural_references"
  """
  smb_cultural_references("""distinct select on columns""" distinct_on: [smb_cultural_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_cultural_references_order_by!], """filter the rows returned""" where: smb_cultural_references_bool_exp): [smb_cultural_references!]!
  """
  fetch aggregated fields from the table: "smb.cultural_references"
  """
  smb_cultural_references_aggregate("""distinct select on columns""" distinct_on: [smb_cultural_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_cultural_references_order_by!], """filter the rows returned""" where: smb_cultural_references_bool_exp): smb_cultural_references_aggregate!
  """
  fetch data from the table: "smb.cultural_references" using primary key columns
  """
  smb_cultural_references_by_pk(id: bigint!): smb_cultural_references
  """
  fetch data from the table: "smb.exhibitions"
  """
  smb_exhibitions("""distinct select on columns""" distinct_on: [smb_exhibitions_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_order_by!], """filter the rows returned""" where: smb_exhibitions_bool_exp): [smb_exhibitions!]!
  """
  fetch aggregated fields from the table: "smb.exhibitions"
  """
  smb_exhibitions_aggregate("""distinct select on columns""" distinct_on: [smb_exhibitions_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_order_by!], """filter the rows returned""" where: smb_exhibitions_bool_exp): smb_exhibitions_aggregate!
  """
  fetch data from the table: "smb.exhibitions" using primary key columns
  """
  smb_exhibitions_by_pk(id: bigint!): smb_exhibitions
  """
  fetch data from the table: "smb.exhibitions_objects"
  """
  smb_exhibitions_objects("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): [smb_exhibitions_objects!]!
  """
  fetch aggregated fields from the table: "smb.exhibitions_objects"
  """
  smb_exhibitions_objects_aggregate("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): smb_exhibitions_objects_aggregate!
  """
  fetch data from the table: "smb.exhibitions_objects" using primary key columns
  """
  smb_exhibitions_objects_by_pk(id: bigint!): smb_exhibitions_objects
  """
  fetch data from the table: "smb.geographical_references"
  """
  smb_geographical_references("""distinct select on columns""" distinct_on: [smb_geographical_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_geographical_references_order_by!], """filter the rows returned""" where: smb_geographical_references_bool_exp): [smb_geographical_references!]!
  """
  fetch aggregated fields from the table: "smb.geographical_references"
  """
  smb_geographical_references_aggregate("""distinct select on columns""" distinct_on: [smb_geographical_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_geographical_references_order_by!], """filter the rows returned""" where: smb_geographical_references_bool_exp): smb_geographical_references_aggregate!
  """
  fetch data from the table: "smb.geographical_references" using primary key columns
  """
  smb_geographical_references_by_pk(id: bigint!): smb_geographical_references
  """
  fetch data from the table: "smb.highlights"
  """
  smb_highlights("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): [smb_highlights!]!
  """
  fetch aggregated fields from the table: "smb.highlights"
  """
  smb_highlights_aggregate("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): smb_highlights_aggregate!
  """
  fetch data from the table: "smb.highlights" using primary key columns
  """
  smb_highlights_by_pk(id: bigint!): smb_highlights
  """
  fetch data from the table: "smb.ignoreable_keys"
  """
  smb_ignoreable_keys("""distinct select on columns""" distinct_on: [smb_ignoreable_keys_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_ignoreable_keys_order_by!], """filter the rows returned""" where: smb_ignoreable_keys_bool_exp): [smb_ignoreable_keys!]!
  """
  fetch aggregated fields from the table: "smb.ignoreable_keys"
  """
  smb_ignoreable_keys_aggregate("""distinct select on columns""" distinct_on: [smb_ignoreable_keys_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_ignoreable_keys_order_by!], """filter the rows returned""" where: smb_ignoreable_keys_bool_exp): smb_ignoreable_keys_aggregate!
  """
  fetch data from the table: "smb.ignoreable_keys" using primary key columns
  """
  smb_ignoreable_keys_by_pk(id: bigint!): smb_ignoreable_keys
  """
  fetch data from the table: "smb.language"
  """
  smb_language("""distinct select on columns""" distinct_on: [smb_language_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_language_order_by!], """filter the rows returned""" where: smb_language_bool_exp): [smb_language!]!
  """
  fetch aggregated fields from the table: "smb.language"
  """
  smb_language_aggregate("""distinct select on columns""" distinct_on: [smb_language_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_language_order_by!], """filter the rows returned""" where: smb_language_bool_exp): smb_language_aggregate!
  """
  fetch data from the table: "smb.language" using primary key columns
  """
  smb_language_by_pk(id: bigint!): smb_language
  """
  fetch data from the table: "smb.licenses"
  """
  smb_licenses("""distinct select on columns""" distinct_on: [smb_licenses_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_order_by!], """filter the rows returned""" where: smb_licenses_bool_exp): [smb_licenses!]!
  """
  fetch aggregated fields from the table: "smb.licenses"
  """
  smb_licenses_aggregate("""distinct select on columns""" distinct_on: [smb_licenses_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_order_by!], """filter the rows returned""" where: smb_licenses_bool_exp): smb_licenses_aggregate!
  """
  fetch data from the table: "smb.licenses" using primary key columns
  """
  smb_licenses_by_pk(id: bigint!): smb_licenses
  """
  fetch data from the table: "smb.licenses_translation"
  """
  smb_licenses_translation("""distinct select on columns""" distinct_on: [smb_licenses_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_translation_order_by!], """filter the rows returned""" where: smb_licenses_translation_bool_exp): [smb_licenses_translation!]!
  """
  fetch aggregated fields from the table: "smb.licenses_translation"
  """
  smb_licenses_translation_aggregate("""distinct select on columns""" distinct_on: [smb_licenses_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_translation_order_by!], """filter the rows returned""" where: smb_licenses_translation_bool_exp): smb_licenses_translation_aggregate!
  """
  fetch data from the table: "smb.licenses_translation" using primary key columns
  """
  smb_licenses_translation_by_pk(id: bigint!): smb_licenses_translation
  """
  fetch data from the table: "smb.material_references"
  """
  smb_material_references("""distinct select on columns""" distinct_on: [smb_material_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_material_references_order_by!], """filter the rows returned""" where: smb_material_references_bool_exp): [smb_material_references!]!
  """
  fetch aggregated fields from the table: "smb.material_references"
  """
  smb_material_references_aggregate("""distinct select on columns""" distinct_on: [smb_material_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_material_references_order_by!], """filter the rows returned""" where: smb_material_references_bool_exp): smb_material_references_aggregate!
  """
  fetch data from the table: "smb.material_references" using primary key columns
  """
  smb_material_references_by_pk(id: bigint!): smb_material_references
  """
  fetch data from the table: "smb.objects"
  """
  smb_objects("""distinct select on columns""" distinct_on: [smb_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_objects_order_by!], """filter the rows returned""" where: smb_objects_bool_exp): [smb_objects!]!
  """
  fetch aggregated fields from the table: "smb.objects"
  """
  smb_objects_aggregate("""distinct select on columns""" distinct_on: [smb_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_objects_order_by!], """filter the rows returned""" where: smb_objects_bool_exp): smb_objects_aggregate!
  """
  fetch data from the table: "smb.objects" using primary key columns
  """
  smb_objects_by_pk(id: bigint!): smb_objects
  """
  fetch data from the table: "smb.org_unit"
  """
  smb_org_unit("""distinct select on columns""" distinct_on: [smb_org_unit_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_org_unit_order_by!], """filter the rows returned""" where: smb_org_unit_bool_exp): [smb_org_unit!]!
  """
  fetch aggregated fields from the table: "smb.org_unit"
  """
  smb_org_unit_aggregate("""distinct select on columns""" distinct_on: [smb_org_unit_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_org_unit_order_by!], """filter the rows returned""" where: smb_org_unit_bool_exp): smb_org_unit_aggregate!
  """
  fetch data from the table: "smb.org_unit" using primary key columns
  """
  smb_org_unit_by_pk(id: bigint!): smb_org_unit
  """
  fetch data from the table: "smb.persons"
  """
  smb_persons("""distinct select on columns""" distinct_on: [smb_persons_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_order_by!], """filter the rows returned""" where: smb_persons_bool_exp): [smb_persons!]!
  """
  fetch aggregated fields from the table: "smb.persons"
  """
  smb_persons_aggregate("""distinct select on columns""" distinct_on: [smb_persons_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_order_by!], """filter the rows returned""" where: smb_persons_bool_exp): smb_persons_aggregate!
  """
  fetch data from the table: "smb.persons" using primary key columns
  """
  smb_persons_by_pk(id: bigint!): smb_persons
  """
  fetch data from the table: "smb.persons_objects"
  """
  smb_persons_objects("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): [smb_persons_objects!]!
  """
  fetch aggregated fields from the table: "smb.persons_objects"
  """
  smb_persons_objects_aggregate("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): smb_persons_objects_aggregate!
  """
  fetch data from the table: "smb.persons_objects" using primary key columns
  """
  smb_persons_objects_by_pk(id: bigint!): smb_persons_objects
  """
  fetch data from the table: "smb.stt_platform"
  """
  smb_stt_platform("""distinct select on columns""" distinct_on: [smb_stt_platform_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_order_by!], """filter the rows returned""" where: smb_stt_platform_bool_exp): [smb_stt_platform!]!
  """
  fetch aggregated fields from the table: "smb.stt_platform"
  """
  smb_stt_platform_aggregate("""distinct select on columns""" distinct_on: [smb_stt_platform_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_order_by!], """filter the rows returned""" where: smb_stt_platform_bool_exp): smb_stt_platform_aggregate!
  """
  fetch data from the table: "smb.stt_platform" using primary key columns
  """
  smb_stt_platform_by_pk(value: String!): smb_stt_platform
  """
  fetch data from the table: "smb.stt_platform_config"
  """
  smb_stt_platform_config("""distinct select on columns""" distinct_on: [smb_stt_platform_config_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_config_order_by!], """filter the rows returned""" where: smb_stt_platform_config_bool_exp): [smb_stt_platform_config!]!
  """
  fetch aggregated fields from the table: "smb.stt_platform_config"
  """
  smb_stt_platform_config_aggregate("""distinct select on columns""" distinct_on: [smb_stt_platform_config_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_config_order_by!], """filter the rows returned""" where: smb_stt_platform_config_bool_exp): smb_stt_platform_config_aggregate!
  """
  fetch data from the table: "smb.stt_platform_config" using primary key columns
  """
  smb_stt_platform_config_by_pk(id: bigint!): smb_stt_platform_config
  """
  fetch data from the table: "smb.sync_cycle_type"
  """
  smb_sync_cycle_type("""distinct select on columns""" distinct_on: [smb_sync_cycle_type_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycle_type_order_by!], """filter the rows returned""" where: smb_sync_cycle_type_bool_exp): [smb_sync_cycle_type!]!
  """
  fetch aggregated fields from the table: "smb.sync_cycle_type"
  """
  smb_sync_cycle_type_aggregate("""distinct select on columns""" distinct_on: [smb_sync_cycle_type_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycle_type_order_by!], """filter the rows returned""" where: smb_sync_cycle_type_bool_exp): smb_sync_cycle_type_aggregate!
  """
  fetch data from the table: "smb.sync_cycle_type" using primary key columns
  """
  smb_sync_cycle_type_by_pk(value: String!): smb_sync_cycle_type
  """
  fetch data from the table: "smb.sync_cycles"
  """
  smb_sync_cycles("""distinct select on columns""" distinct_on: [smb_sync_cycles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycles_order_by!], """filter the rows returned""" where: smb_sync_cycles_bool_exp): [smb_sync_cycles!]!
  """
  fetch aggregated fields from the table: "smb.sync_cycles"
  """
  smb_sync_cycles_aggregate("""distinct select on columns""" distinct_on: [smb_sync_cycles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycles_order_by!], """filter the rows returned""" where: smb_sync_cycles_bool_exp): smb_sync_cycles_aggregate!
  """
  fetch data from the table: "smb.sync_cycles" using primary key columns
  """
  smb_sync_cycles_by_pk(id: bigint!): smb_sync_cycles
  """
  fetch data from the table: "smb.thesaurus"
  """
  smb_thesaurus("""distinct select on columns""" distinct_on: [smb_thesaurus_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_order_by!], """filter the rows returned""" where: smb_thesaurus_bool_exp): [smb_thesaurus!]!
  """
  fetch aggregated fields from the table: "smb.thesaurus"
  """
  smb_thesaurus_aggregate("""distinct select on columns""" distinct_on: [smb_thesaurus_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_order_by!], """filter the rows returned""" where: smb_thesaurus_bool_exp): smb_thesaurus_aggregate!
  """
  fetch data from the table: "smb.thesaurus" using primary key columns
  """
  smb_thesaurus_by_pk(id: bigint!): smb_thesaurus
  """
  fetch data from the table: "smb.thesaurus_translations"
  """
  smb_thesaurus_translations("""distinct select on columns""" distinct_on: [smb_thesaurus_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_translations_order_by!], """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): [smb_thesaurus_translations!]!
  """
  fetch aggregated fields from the table: "smb.thesaurus_translations"
  """
  smb_thesaurus_translations_aggregate("""distinct select on columns""" distinct_on: [smb_thesaurus_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_translations_order_by!], """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): smb_thesaurus_translations_aggregate!
  """
  fetch data from the table: "smb.thesaurus_translations" using primary key columns
  """
  smb_thesaurus_translations_by_pk(id: bigint!): smb_thesaurus_translations
  """
  fetch data from the table: "smb.user"
  """
  smb_user("""distinct select on columns""" distinct_on: [smb_user_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_order_by!], """filter the rows returned""" where: smb_user_bool_exp): [smb_user!]!
  """
  fetch aggregated fields from the table: "smb.user"
  """
  smb_user_aggregate("""distinct select on columns""" distinct_on: [smb_user_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_order_by!], """filter the rows returned""" where: smb_user_bool_exp): smb_user_aggregate!
  """
  fetch data from the table: "smb.user" using primary key columns
  """
  smb_user_by_pk(id: uuid!): smb_user
  """
  fetch data from the table: "smb.user_role"
  """
  smb_user_role("""distinct select on columns""" distinct_on: [smb_user_role_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_role_order_by!], """filter the rows returned""" where: smb_user_role_bool_exp): [smb_user_role!]!
  """
  fetch aggregated fields from the table: "smb.user_role"
  """
  smb_user_role_aggregate("""distinct select on columns""" distinct_on: [smb_user_role_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_role_order_by!], """filter the rows returned""" where: smb_user_role_bool_exp): smb_user_role_aggregate!
  """
  fetch data from the table: "smb.user_role" using primary key columns
  """
  smb_user_role_by_pk(id: bigint!): smb_user_role
  strapi_hbf: strapi_hbfQuery
  strapi_isl: strapi_islQuery
  strapi_kgm: strapi_kgmQuery
  strapi_smb: strapi_smbQuery
}

"""
search-collections
"""
type smb_assortments {
  """
  An array relationship
  """
  assortments_objects("""distinct select on columns""" distinct_on: [smb_assortments_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_objects_order_by!], """filter the rows returned""" where: smb_assortments_objects_bool_exp): [smb_assortments_objects!]!
  """
  An aggregate relationship
  """
  assortments_objects_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_objects_order_by!], """filter the rows returned""" where: smb_assortments_objects_bool_exp): smb_assortments_objects_aggregate!
  """
  An array relationship
  """
  i18n("""distinct select on columns""" distinct_on: [smb_assortments_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_translation_order_by!], """filter the rows returned""" where: smb_assortments_translation_bool_exp): [smb_assortments_translation!]!
  """
  An aggregate relationship
  """
  i18n_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_translation_order_by!], """filter the rows returned""" where: smb_assortments_translation_bool_exp): smb_assortments_translation_aggregate!
  id: bigint!
  key: String!
  preview_image: String
  """
  A computed field, executes function "smb.build_search_value_a"
  """
  searchValue: String
  search_query: String
  search_query_type: String!
}

"""
aggregated selection of "smb.assortments"
"""
type smb_assortments_aggregate {
  aggregate: smb_assortments_aggregate_fields
  nodes: [smb_assortments!]!
}

"""
aggregate fields of "smb.assortments"
"""
type smb_assortments_aggregate_fields {
  avg: smb_assortments_avg_fields
  count(columns: [smb_assortments_select_column!], distinct: Boolean): Int!
  max: smb_assortments_max_fields
  min: smb_assortments_min_fields
  stddev: smb_assortments_stddev_fields
  stddev_pop: smb_assortments_stddev_pop_fields
  stddev_samp: smb_assortments_stddev_samp_fields
  sum: smb_assortments_sum_fields
  var_pop: smb_assortments_var_pop_fields
  var_samp: smb_assortments_var_samp_fields
  variance: smb_assortments_variance_fields
}

"""
aggregate avg on columns
"""
type smb_assortments_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.assortments". All fields are combined with a logical 'AND'.
"""
input smb_assortments_bool_exp {
  _and: [smb_assortments_bool_exp!]
  _not: smb_assortments_bool_exp
  _or: [smb_assortments_bool_exp!]
  assortments_objects: smb_assortments_objects_bool_exp
  assortments_objects_aggregate: smb_assortments_objects_aggregate_bool_exp
  i18n: smb_assortments_translation_bool_exp
  i18n_aggregate: smb_assortments_translation_aggregate_bool_exp
  id: bigint_comparison_exp
  key: String_comparison_exp
  preview_image: String_comparison_exp
  searchValue: String_comparison_exp
  search_query: String_comparison_exp
  search_query_type: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.assortments"
"""
enum smb_assortments_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  assortments_key_ukey
  """
  unique or primary key constraint on columns "id"
  """
  assortments_pkey
}

"""
input type for incrementing numeric columns in table "smb.assortments"
"""
input smb_assortments_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.assortments"
"""
input smb_assortments_insert_input {
  assortments_objects: smb_assortments_objects_arr_rel_insert_input
  i18n: smb_assortments_translation_arr_rel_insert_input
  id: bigint
  key: String
  preview_image: String
  search_query: String
  search_query_type: String
}

"""
aggregate max on columns
"""
type smb_assortments_max_fields {
  id: bigint
  key: String
  preview_image: String
  """
  A computed field, executes function "smb.build_search_value_a"
  """
  searchValue: String
  search_query: String
  search_query_type: String
}

"""
aggregate min on columns
"""
type smb_assortments_min_fields {
  id: bigint
  key: String
  preview_image: String
  """
  A computed field, executes function "smb.build_search_value_a"
  """
  searchValue: String
  search_query: String
  search_query_type: String
}

"""
response of any mutation on the table "smb.assortments"
"""
type smb_assortments_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_assortments!]!
}

"""
Assignment of SMB objects to assortments
"""
type smb_assortments_objects {
  assortment_id: bigint!
  created_at: timestamptz!
  id: bigint!
  object_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.assortments_objects"
"""
type smb_assortments_objects_aggregate {
  aggregate: smb_assortments_objects_aggregate_fields
  nodes: [smb_assortments_objects!]!
}

input smb_assortments_objects_aggregate_bool_exp {
  count: smb_assortments_objects_aggregate_bool_exp_count
}

input smb_assortments_objects_aggregate_bool_exp_count {
  arguments: [smb_assortments_objects_select_column!]
  distinct: Boolean
  filter: smb_assortments_objects_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.assortments_objects"
"""
type smb_assortments_objects_aggregate_fields {
  avg: smb_assortments_objects_avg_fields
  count(columns: [smb_assortments_objects_select_column!], distinct: Boolean): Int!
  max: smb_assortments_objects_max_fields
  min: smb_assortments_objects_min_fields
  stddev: smb_assortments_objects_stddev_fields
  stddev_pop: smb_assortments_objects_stddev_pop_fields
  stddev_samp: smb_assortments_objects_stddev_samp_fields
  sum: smb_assortments_objects_sum_fields
  var_pop: smb_assortments_objects_var_pop_fields
  var_samp: smb_assortments_objects_var_samp_fields
  variance: smb_assortments_objects_variance_fields
}

"""
order by aggregate values of table "smb.assortments_objects"
"""
input smb_assortments_objects_aggregate_order_by {
  avg: smb_assortments_objects_avg_order_by
  count: order_by
  max: smb_assortments_objects_max_order_by
  min: smb_assortments_objects_min_order_by
  stddev: smb_assortments_objects_stddev_order_by
  stddev_pop: smb_assortments_objects_stddev_pop_order_by
  stddev_samp: smb_assortments_objects_stddev_samp_order_by
  sum: smb_assortments_objects_sum_order_by
  var_pop: smb_assortments_objects_var_pop_order_by
  var_samp: smb_assortments_objects_var_samp_order_by
  variance: smb_assortments_objects_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.assortments_objects"
"""
input smb_assortments_objects_arr_rel_insert_input {
  data: [smb_assortments_objects_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_assortments_objects_on_conflict
}

"""
aggregate avg on columns
"""
type smb_assortments_objects_avg_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by avg() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_avg_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.assortments_objects". All fields are combined with a logical 'AND'.
"""
input smb_assortments_objects_bool_exp {
  _and: [smb_assortments_objects_bool_exp!]
  _not: smb_assortments_objects_bool_exp
  _or: [smb_assortments_objects_bool_exp!]
  assortment_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  object_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.assortments_objects"
"""
enum smb_assortments_objects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  assortments_objects_pkey
}

"""
input type for incrementing numeric columns in table "smb.assortments_objects"
"""
input smb_assortments_objects_inc_input {
  assortment_id: bigint
  id: bigint
  object_id: bigint
}

"""
input type for inserting data into table "smb.assortments_objects"
"""
input smb_assortments_objects_insert_input {
  assortment_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_assortments_objects_max_fields {
  assortment_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_max_order_by {
  assortment_id: order_by
  created_at: order_by
  id: order_by
  object_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type smb_assortments_objects_min_fields {
  assortment_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_min_order_by {
  assortment_id: order_by
  created_at: order_by
  id: order_by
  object_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "smb.assortments_objects"
"""
type smb_assortments_objects_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_assortments_objects!]!
}

"""
on_conflict condition type for table "smb.assortments_objects"
"""
input smb_assortments_objects_on_conflict {
  constraint: smb_assortments_objects_constraint!
  update_columns: [smb_assortments_objects_update_column!]! = []
  where: smb_assortments_objects_bool_exp
}

"""
Ordering options when selecting data from "smb.assortments_objects".
"""
input smb_assortments_objects_order_by {
  assortment_id: order_by
  created_at: order_by
  id: order_by
  object_id: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.assortments_objects
"""
input smb_assortments_objects_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.assortments_objects"
"""
enum smb_assortments_objects_select_column {
  """
  column name
  """
  assortment_id
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.assortments_objects"
"""
input smb_assortments_objects_set_input {
  assortment_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_assortments_objects_stddev_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by stddev() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_stddev_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_assortments_objects_stddev_pop_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by stddev_pop() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_stddev_pop_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_assortments_objects_stddev_samp_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by stddev_samp() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_stddev_samp_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
Streaming cursor of the table "smb_assortments_objects"
"""
input smb_assortments_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_assortments_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_assortments_objects_stream_cursor_value_input {
  assortment_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_assortments_objects_sum_fields {
  assortment_id: bigint
  id: bigint
  object_id: bigint
}

"""
order by sum() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_sum_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
update columns of table "smb.assortments_objects"
"""
enum smb_assortments_objects_update_column {
  """
  column name
  """
  assortment_id
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  updated_at
}

input smb_assortments_objects_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_assortments_objects_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_assortments_objects_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_assortments_objects_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_assortments_objects_var_pop_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by var_pop() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_var_pop_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_assortments_objects_var_samp_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by var_samp() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_var_samp_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate variance on columns
"""
type smb_assortments_objects_variance_fields {
  assortment_id: Float
  id: Float
  object_id: Float
}

"""
order by variance() on columns of table "smb.assortments_objects"
"""
input smb_assortments_objects_variance_order_by {
  assortment_id: order_by
  id: order_by
  object_id: order_by
}

"""
on_conflict condition type for table "smb.assortments"
"""
input smb_assortments_on_conflict {
  constraint: smb_assortments_constraint!
  update_columns: [smb_assortments_update_column!]! = []
  where: smb_assortments_bool_exp
}

"""
Ordering options when selecting data from "smb.assortments".
"""
input smb_assortments_order_by {
  assortments_objects_aggregate: smb_assortments_objects_aggregate_order_by
  i18n_aggregate: smb_assortments_translation_aggregate_order_by
  id: order_by
  key: order_by
  preview_image: order_by
  searchValue: order_by
  search_query: order_by
  search_query_type: order_by
}

"""
primary key columns input for table: smb.assortments
"""
input smb_assortments_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.assortments"
"""
enum smb_assortments_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  key
  """
  column name
  """
  preview_image
  """
  column name
  """
  search_query
  """
  column name
  """
  search_query_type
}

"""
input type for updating data in table "smb.assortments"
"""
input smb_assortments_set_input {
  id: bigint
  key: String
  preview_image: String
  search_query: String
  search_query_type: String
}

"""
aggregate stddev on columns
"""
type smb_assortments_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_assortments_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_assortments_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_assortments"
"""
input smb_assortments_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_assortments_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_assortments_stream_cursor_value_input {
  id: bigint
  key: String
  preview_image: String
  search_query: String
  search_query_type: String
}

"""
aggregate sum on columns
"""
type smb_assortments_sum_fields {
  id: bigint
}

"""
columns and relationships of "smb.assortments_translation"
"""
type smb_assortments_translation {
  abstract: String
  assortment_id: bigint!
  description: String
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  subtitle: String
  title: String!
}

"""
aggregated selection of "smb.assortments_translation"
"""
type smb_assortments_translation_aggregate {
  aggregate: smb_assortments_translation_aggregate_fields
  nodes: [smb_assortments_translation!]!
}

input smb_assortments_translation_aggregate_bool_exp {
  count: smb_assortments_translation_aggregate_bool_exp_count
}

input smb_assortments_translation_aggregate_bool_exp_count {
  arguments: [smb_assortments_translation_select_column!]
  distinct: Boolean
  filter: smb_assortments_translation_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.assortments_translation"
"""
type smb_assortments_translation_aggregate_fields {
  avg: smb_assortments_translation_avg_fields
  count(columns: [smb_assortments_translation_select_column!], distinct: Boolean): Int!
  max: smb_assortments_translation_max_fields
  min: smb_assortments_translation_min_fields
  stddev: smb_assortments_translation_stddev_fields
  stddev_pop: smb_assortments_translation_stddev_pop_fields
  stddev_samp: smb_assortments_translation_stddev_samp_fields
  sum: smb_assortments_translation_sum_fields
  var_pop: smb_assortments_translation_var_pop_fields
  var_samp: smb_assortments_translation_var_samp_fields
  variance: smb_assortments_translation_variance_fields
}

"""
order by aggregate values of table "smb.assortments_translation"
"""
input smb_assortments_translation_aggregate_order_by {
  avg: smb_assortments_translation_avg_order_by
  count: order_by
  max: smb_assortments_translation_max_order_by
  min: smb_assortments_translation_min_order_by
  stddev: smb_assortments_translation_stddev_order_by
  stddev_pop: smb_assortments_translation_stddev_pop_order_by
  stddev_samp: smb_assortments_translation_stddev_samp_order_by
  sum: smb_assortments_translation_sum_order_by
  var_pop: smb_assortments_translation_var_pop_order_by
  var_samp: smb_assortments_translation_var_samp_order_by
  variance: smb_assortments_translation_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.assortments_translation"
"""
input smb_assortments_translation_arr_rel_insert_input {
  data: [smb_assortments_translation_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_assortments_translation_on_conflict
}

"""
aggregate avg on columns
"""
type smb_assortments_translation_avg_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by avg() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_avg_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.assortments_translation". All fields are combined with a logical 'AND'.
"""
input smb_assortments_translation_bool_exp {
  _and: [smb_assortments_translation_bool_exp!]
  _not: smb_assortments_translation_bool_exp
  _or: [smb_assortments_translation_bool_exp!]
  abstract: String_comparison_exp
  assortment_id: bigint_comparison_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  subtitle: String_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.assortments_translation"
"""
enum smb_assortments_translation_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  assortments_translation_pkey
}

"""
input type for incrementing numeric columns in table "smb.assortments_translation"
"""
input smb_assortments_translation_inc_input {
  assortment_id: bigint
  id: bigint
  language_id: bigint
}

"""
input type for inserting data into table "smb.assortments_translation"
"""
input smb_assortments_translation_insert_input {
  abstract: String
  assortment_id: bigint
  description: String
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  subtitle: String
  title: String
}

"""
aggregate max on columns
"""
type smb_assortments_translation_max_fields {
  abstract: String
  assortment_id: bigint
  description: String
  id: bigint
  language_id: bigint
  subtitle: String
  title: String
}

"""
order by max() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_max_order_by {
  abstract: order_by
  assortment_id: order_by
  description: order_by
  id: order_by
  language_id: order_by
  subtitle: order_by
  title: order_by
}

"""
aggregate min on columns
"""
type smb_assortments_translation_min_fields {
  abstract: String
  assortment_id: bigint
  description: String
  id: bigint
  language_id: bigint
  subtitle: String
  title: String
}

"""
order by min() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_min_order_by {
  abstract: order_by
  assortment_id: order_by
  description: order_by
  id: order_by
  language_id: order_by
  subtitle: order_by
  title: order_by
}

"""
response of any mutation on the table "smb.assortments_translation"
"""
type smb_assortments_translation_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_assortments_translation!]!
}

"""
on_conflict condition type for table "smb.assortments_translation"
"""
input smb_assortments_translation_on_conflict {
  constraint: smb_assortments_translation_constraint!
  update_columns: [smb_assortments_translation_update_column!]! = []
  where: smb_assortments_translation_bool_exp
}

"""
Ordering options when selecting data from "smb.assortments_translation".
"""
input smb_assortments_translation_order_by {
  abstract: order_by
  assortment_id: order_by
  description: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  subtitle: order_by
  title: order_by
}

"""
primary key columns input for table: smb.assortments_translation
"""
input smb_assortments_translation_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.assortments_translation"
"""
enum smb_assortments_translation_select_column {
  """
  column name
  """
  abstract
  """
  column name
  """
  assortment_id
  """
  column name
  """
  description
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  subtitle
  """
  column name
  """
  title
}

"""
input type for updating data in table "smb.assortments_translation"
"""
input smb_assortments_translation_set_input {
  abstract: String
  assortment_id: bigint
  description: String
  id: bigint
  language_id: bigint
  subtitle: String
  title: String
}

"""
aggregate stddev on columns
"""
type smb_assortments_translation_stddev_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by stddev() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_stddev_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_assortments_translation_stddev_pop_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by stddev_pop() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_stddev_pop_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_assortments_translation_stddev_samp_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by stddev_samp() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_stddev_samp_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
Streaming cursor of the table "smb_assortments_translation"
"""
input smb_assortments_translation_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_assortments_translation_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_assortments_translation_stream_cursor_value_input {
  abstract: String
  assortment_id: bigint
  description: String
  id: bigint
  language_id: bigint
  subtitle: String
  title: String
}

"""
aggregate sum on columns
"""
type smb_assortments_translation_sum_fields {
  assortment_id: bigint
  id: bigint
  language_id: bigint
}

"""
order by sum() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_sum_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
update columns of table "smb.assortments_translation"
"""
enum smb_assortments_translation_update_column {
  """
  column name
  """
  abstract
  """
  column name
  """
  assortment_id
  """
  column name
  """
  description
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  subtitle
  """
  column name
  """
  title
}

input smb_assortments_translation_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_assortments_translation_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_assortments_translation_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_assortments_translation_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_assortments_translation_var_pop_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by var_pop() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_var_pop_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_assortments_translation_var_samp_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by var_samp() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_var_samp_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
aggregate variance on columns
"""
type smb_assortments_translation_variance_fields {
  assortment_id: Float
  id: Float
  language_id: Float
}

"""
order by variance() on columns of table "smb.assortments_translation"
"""
input smb_assortments_translation_variance_order_by {
  assortment_id: order_by
  id: order_by
  language_id: order_by
}

"""
update columns of table "smb.assortments"
"""
enum smb_assortments_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  key
  """
  column name
  """
  preview_image
  """
  column name
  """
  search_query
  """
  column name
  """
  search_query_type
}

input smb_assortments_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_assortments_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_assortments_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_assortments_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_assortments_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_assortments_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_assortments_variance_fields {
  id: Float
}

"""
Attachments of SMB objects fetched from MDS
"""
type smb_attachments {
  attachment: String!
  created_at: timestamptz!
  credits: String
  id: bigint!
  """
  An object relationship
  """
  license: smb_licenses
  license_id: bigint
  media_type: String
  """
  A computed field, executes function "smb.get_attachment_filename"
  """
  name: String
  object_id: bigint!
  primary: Boolean
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.attachments"
"""
type smb_attachments_aggregate {
  aggregate: smb_attachments_aggregate_fields
  nodes: [smb_attachments!]!
}

input smb_attachments_aggregate_bool_exp {
  bool_and: smb_attachments_aggregate_bool_exp_bool_and
  bool_or: smb_attachments_aggregate_bool_exp_bool_or
  count: smb_attachments_aggregate_bool_exp_count
}

input smb_attachments_aggregate_bool_exp_bool_and {
  arguments: smb_attachments_select_column_smb_attachments_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: smb_attachments_bool_exp
  predicate: Boolean_comparison_exp!
}

input smb_attachments_aggregate_bool_exp_bool_or {
  arguments: smb_attachments_select_column_smb_attachments_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: smb_attachments_bool_exp
  predicate: Boolean_comparison_exp!
}

input smb_attachments_aggregate_bool_exp_count {
  arguments: [smb_attachments_select_column!]
  distinct: Boolean
  filter: smb_attachments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.attachments"
"""
type smb_attachments_aggregate_fields {
  avg: smb_attachments_avg_fields
  count(columns: [smb_attachments_select_column!], distinct: Boolean): Int!
  max: smb_attachments_max_fields
  min: smb_attachments_min_fields
  stddev: smb_attachments_stddev_fields
  stddev_pop: smb_attachments_stddev_pop_fields
  stddev_samp: smb_attachments_stddev_samp_fields
  sum: smb_attachments_sum_fields
  var_pop: smb_attachments_var_pop_fields
  var_samp: smb_attachments_var_samp_fields
  variance: smb_attachments_variance_fields
}

"""
order by aggregate values of table "smb.attachments"
"""
input smb_attachments_aggregate_order_by {
  avg: smb_attachments_avg_order_by
  count: order_by
  max: smb_attachments_max_order_by
  min: smb_attachments_min_order_by
  stddev: smb_attachments_stddev_order_by
  stddev_pop: smb_attachments_stddev_pop_order_by
  stddev_samp: smb_attachments_stddev_samp_order_by
  sum: smb_attachments_sum_order_by
  var_pop: smb_attachments_var_pop_order_by
  var_samp: smb_attachments_var_samp_order_by
  variance: smb_attachments_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.attachments"
"""
input smb_attachments_arr_rel_insert_input {
  data: [smb_attachments_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_attachments_on_conflict
}

"""
aggregate avg on columns
"""
type smb_attachments_avg_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by avg() on columns of table "smb.attachments"
"""
input smb_attachments_avg_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.attachments". All fields are combined with a logical 'AND'.
"""
input smb_attachments_bool_exp {
  _and: [smb_attachments_bool_exp!]
  _not: smb_attachments_bool_exp
  _or: [smb_attachments_bool_exp!]
  attachment: String_comparison_exp
  created_at: timestamptz_comparison_exp
  credits: String_comparison_exp
  id: bigint_comparison_exp
  license: smb_licenses_bool_exp
  license_id: bigint_comparison_exp
  media_type: String_comparison_exp
  name: String_comparison_exp
  object_id: bigint_comparison_exp
  primary: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.attachments"
"""
enum smb_attachments_constraint {
  """
  unique or primary key constraint on columns "object_id", "id"
  """
  attachments_pkey
}

"""
input type for incrementing numeric columns in table "smb.attachments"
"""
input smb_attachments_inc_input {
  id: bigint
  license_id: bigint
  object_id: bigint
}

"""
input type for inserting data into table "smb.attachments"
"""
input smb_attachments_insert_input {
  attachment: String
  created_at: timestamptz
  credits: String
  id: bigint
  license: smb_licenses_obj_rel_insert_input
  license_id: bigint
  media_type: String
  object_id: bigint
  primary: Boolean
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_attachments_max_fields {
  attachment: String
  created_at: timestamptz
  credits: String
  id: bigint
  license_id: bigint
  media_type: String
  """
  A computed field, executes function "smb.get_attachment_filename"
  """
  name: String
  object_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "smb.attachments"
"""
input smb_attachments_max_order_by {
  attachment: order_by
  created_at: order_by
  credits: order_by
  id: order_by
  license_id: order_by
  media_type: order_by
  object_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type smb_attachments_min_fields {
  attachment: String
  created_at: timestamptz
  credits: String
  id: bigint
  license_id: bigint
  media_type: String
  """
  A computed field, executes function "smb.get_attachment_filename"
  """
  name: String
  object_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "smb.attachments"
"""
input smb_attachments_min_order_by {
  attachment: order_by
  created_at: order_by
  credits: order_by
  id: order_by
  license_id: order_by
  media_type: order_by
  object_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "smb.attachments"
"""
type smb_attachments_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_attachments!]!
}

"""
on_conflict condition type for table "smb.attachments"
"""
input smb_attachments_on_conflict {
  constraint: smb_attachments_constraint!
  update_columns: [smb_attachments_update_column!]! = []
  where: smb_attachments_bool_exp
}

"""
Ordering options when selecting data from "smb.attachments".
"""
input smb_attachments_order_by {
  attachment: order_by
  created_at: order_by
  credits: order_by
  id: order_by
  license: smb_licenses_order_by
  license_id: order_by
  media_type: order_by
  name: order_by
  object_id: order_by
  primary: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.attachments
"""
input smb_attachments_pk_columns_input {
  id: bigint!
  object_id: bigint!
}

"""
select columns of table "smb.attachments"
"""
enum smb_attachments_select_column {
  """
  column name
  """
  attachment
  """
  column name
  """
  created_at
  """
  column name
  """
  credits
  """
  column name
  """
  id
  """
  column name
  """
  license_id
  """
  column name
  """
  media_type
  """
  column name
  """
  object_id
  """
  column name
  """
  primary
  """
  column name
  """
  updated_at
}

"""
select "smb_attachments_aggregate_bool_exp_bool_and_arguments_columns" columns of table "smb.attachments"
"""
enum smb_attachments_select_column_smb_attachments_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  primary
}

"""
select "smb_attachments_aggregate_bool_exp_bool_or_arguments_columns" columns of table "smb.attachments"
"""
enum smb_attachments_select_column_smb_attachments_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  primary
}

"""
input type for updating data in table "smb.attachments"
"""
input smb_attachments_set_input {
  attachment: String
  created_at: timestamptz
  credits: String
  id: bigint
  license_id: bigint
  media_type: String
  object_id: bigint
  primary: Boolean
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_attachments_stddev_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by stddev() on columns of table "smb.attachments"
"""
input smb_attachments_stddev_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_attachments_stddev_pop_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by stddev_pop() on columns of table "smb.attachments"
"""
input smb_attachments_stddev_pop_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_attachments_stddev_samp_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by stddev_samp() on columns of table "smb.attachments"
"""
input smb_attachments_stddev_samp_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
Streaming cursor of the table "smb_attachments"
"""
input smb_attachments_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_attachments_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_attachments_stream_cursor_value_input {
  attachment: String
  created_at: timestamptz
  credits: String
  id: bigint
  license_id: bigint
  media_type: String
  object_id: bigint
  primary: Boolean
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_attachments_sum_fields {
  id: bigint
  license_id: bigint
  object_id: bigint
}

"""
order by sum() on columns of table "smb.attachments"
"""
input smb_attachments_sum_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
update columns of table "smb.attachments"
"""
enum smb_attachments_update_column {
  """
  column name
  """
  attachment
  """
  column name
  """
  created_at
  """
  column name
  """
  credits
  """
  column name
  """
  id
  """
  column name
  """
  license_id
  """
  column name
  """
  media_type
  """
  column name
  """
  object_id
  """
  column name
  """
  primary
  """
  column name
  """
  updated_at
}

input smb_attachments_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_attachments_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_attachments_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_attachments_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_attachments_var_pop_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by var_pop() on columns of table "smb.attachments"
"""
input smb_attachments_var_pop_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_attachments_var_samp_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by var_samp() on columns of table "smb.attachments"
"""
input smb_attachments_var_samp_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
aggregate variance on columns
"""
type smb_attachments_variance_fields {
  id: Float
  license_id: Float
  object_id: Float
}

"""
order by variance() on columns of table "smb.attachments"
"""
input smb_attachments_variance_order_by {
  id: order_by
  license_id: order_by
  object_id: order_by
}

"""
Publishing approvals for attributes fetched from MDS; each value from smb.collections is represented as column
"""
type smb_attribute_approval {
  aku: Boolean
  amp: Boolean
  ant: Boolean
  """
  A computed field, executes function "smb.extract_approvals"
  """
  approvals: String
  attribute_key: String!
  em: Boolean
  gf: Boolean
  gg: Boolean
  id: bigint!
  ifm: Boolean
  isl: Boolean
  kb: Boolean
  kgm: Boolean
  kk: Boolean
  mek: Boolean
  mim: Boolean
  mk: Boolean
  msb: Boolean
  mvf: Boolean
  ng: Boolean
  rao: Boolean
  sbm: Boolean
  sks: Boolean
  vam: Boolean
  za: Boolean
}

"""
aggregated selection of "smb.attribute_approval"
"""
type smb_attribute_approval_aggregate {
  aggregate: smb_attribute_approval_aggregate_fields
  nodes: [smb_attribute_approval!]!
}

"""
aggregate fields of "smb.attribute_approval"
"""
type smb_attribute_approval_aggregate_fields {
  avg: smb_attribute_approval_avg_fields
  count(columns: [smb_attribute_approval_select_column!], distinct: Boolean): Int!
  max: smb_attribute_approval_max_fields
  min: smb_attribute_approval_min_fields
  stddev: smb_attribute_approval_stddev_fields
  stddev_pop: smb_attribute_approval_stddev_pop_fields
  stddev_samp: smb_attribute_approval_stddev_samp_fields
  sum: smb_attribute_approval_sum_fields
  var_pop: smb_attribute_approval_var_pop_fields
  var_samp: smb_attribute_approval_var_samp_fields
  variance: smb_attribute_approval_variance_fields
}

"""
aggregate avg on columns
"""
type smb_attribute_approval_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.attribute_approval". All fields are combined with a logical 'AND'.
"""
input smb_attribute_approval_bool_exp {
  _and: [smb_attribute_approval_bool_exp!]
  _not: smb_attribute_approval_bool_exp
  _or: [smb_attribute_approval_bool_exp!]
  aku: Boolean_comparison_exp
  amp: Boolean_comparison_exp
  ant: Boolean_comparison_exp
  approvals: String_comparison_exp
  attribute_key: String_comparison_exp
  em: Boolean_comparison_exp
  gf: Boolean_comparison_exp
  gg: Boolean_comparison_exp
  id: bigint_comparison_exp
  ifm: Boolean_comparison_exp
  isl: Boolean_comparison_exp
  kb: Boolean_comparison_exp
  kgm: Boolean_comparison_exp
  kk: Boolean_comparison_exp
  mek: Boolean_comparison_exp
  mim: Boolean_comparison_exp
  mk: Boolean_comparison_exp
  msb: Boolean_comparison_exp
  mvf: Boolean_comparison_exp
  ng: Boolean_comparison_exp
  rao: Boolean_comparison_exp
  sbm: Boolean_comparison_exp
  sks: Boolean_comparison_exp
  vam: Boolean_comparison_exp
  za: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "smb.attribute_approval"
"""
enum smb_attribute_approval_constraint {
  """
  unique or primary key constraint on columns "attribute_key"
  """
  attribute_approval_attribute_key_ukey
  """
  unique or primary key constraint on columns "id"
  """
  attribute_approval_pkey
}

"""
input type for incrementing numeric columns in table "smb.attribute_approval"
"""
input smb_attribute_approval_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.attribute_approval"
"""
input smb_attribute_approval_insert_input {
  aku: Boolean
  amp: Boolean
  ant: Boolean
  attribute_key: String
  em: Boolean
  gf: Boolean
  gg: Boolean
  id: bigint
  ifm: Boolean
  isl: Boolean
  kb: Boolean
  kgm: Boolean
  kk: Boolean
  mek: Boolean
  mim: Boolean
  mk: Boolean
  msb: Boolean
  mvf: Boolean
  ng: Boolean
  rao: Boolean
  sbm: Boolean
  sks: Boolean
  vam: Boolean
  za: Boolean
}

"""
aggregate max on columns
"""
type smb_attribute_approval_max_fields {
  """
  A computed field, executes function "smb.extract_approvals"
  """
  approvals: String
  attribute_key: String
  id: bigint
}

"""
aggregate min on columns
"""
type smb_attribute_approval_min_fields {
  """
  A computed field, executes function "smb.extract_approvals"
  """
  approvals: String
  attribute_key: String
  id: bigint
}

"""
response of any mutation on the table "smb.attribute_approval"
"""
type smb_attribute_approval_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_attribute_approval!]!
}

"""
input type for inserting object relation for remote table "smb.attribute_approval"
"""
input smb_attribute_approval_obj_rel_insert_input {
  data: smb_attribute_approval_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_attribute_approval_on_conflict
}

"""
on_conflict condition type for table "smb.attribute_approval"
"""
input smb_attribute_approval_on_conflict {
  constraint: smb_attribute_approval_constraint!
  update_columns: [smb_attribute_approval_update_column!]! = []
  where: smb_attribute_approval_bool_exp
}

"""
Ordering options when selecting data from "smb.attribute_approval".
"""
input smb_attribute_approval_order_by {
  aku: order_by
  amp: order_by
  ant: order_by
  approvals: order_by
  attribute_key: order_by
  em: order_by
  gf: order_by
  gg: order_by
  id: order_by
  ifm: order_by
  isl: order_by
  kb: order_by
  kgm: order_by
  kk: order_by
  mek: order_by
  mim: order_by
  mk: order_by
  msb: order_by
  mvf: order_by
  ng: order_by
  rao: order_by
  sbm: order_by
  sks: order_by
  vam: order_by
  za: order_by
}

"""
primary key columns input for table: smb.attribute_approval
"""
input smb_attribute_approval_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.attribute_approval"
"""
enum smb_attribute_approval_select_column {
  """
  column name
  """
  aku
  """
  column name
  """
  amp
  """
  column name
  """
  ant
  """
  column name
  """
  attribute_key
  """
  column name
  """
  em
  """
  column name
  """
  gf
  """
  column name
  """
  gg
  """
  column name
  """
  id
  """
  column name
  """
  ifm
  """
  column name
  """
  isl
  """
  column name
  """
  kb
  """
  column name
  """
  kgm
  """
  column name
  """
  kk
  """
  column name
  """
  mek
  """
  column name
  """
  mim
  """
  column name
  """
  mk
  """
  column name
  """
  msb
  """
  column name
  """
  mvf
  """
  column name
  """
  ng
  """
  column name
  """
  rao
  """
  column name
  """
  sbm
  """
  column name
  """
  sks
  """
  column name
  """
  vam
  """
  column name
  """
  za
}

"""
input type for updating data in table "smb.attribute_approval"
"""
input smb_attribute_approval_set_input {
  aku: Boolean
  amp: Boolean
  ant: Boolean
  attribute_key: String
  em: Boolean
  gf: Boolean
  gg: Boolean
  id: bigint
  ifm: Boolean
  isl: Boolean
  kb: Boolean
  kgm: Boolean
  kk: Boolean
  mek: Boolean
  mim: Boolean
  mk: Boolean
  msb: Boolean
  mvf: Boolean
  ng: Boolean
  rao: Boolean
  sbm: Boolean
  sks: Boolean
  vam: Boolean
  za: Boolean
}

"""
aggregate stddev on columns
"""
type smb_attribute_approval_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_attribute_approval_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_attribute_approval_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_attribute_approval"
"""
input smb_attribute_approval_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_attribute_approval_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_attribute_approval_stream_cursor_value_input {
  aku: Boolean
  amp: Boolean
  ant: Boolean
  attribute_key: String
  em: Boolean
  gf: Boolean
  gg: Boolean
  id: bigint
  ifm: Boolean
  isl: Boolean
  kb: Boolean
  kgm: Boolean
  kk: Boolean
  mek: Boolean
  mim: Boolean
  mk: Boolean
  msb: Boolean
  mvf: Boolean
  ng: Boolean
  rao: Boolean
  sbm: Boolean
  sks: Boolean
  vam: Boolean
  za: Boolean
}

"""
aggregate sum on columns
"""
type smb_attribute_approval_sum_fields {
  id: bigint
}

"""
update columns of table "smb.attribute_approval"
"""
enum smb_attribute_approval_update_column {
  """
  column name
  """
  aku
  """
  column name
  """
  amp
  """
  column name
  """
  ant
  """
  column name
  """
  attribute_key
  """
  column name
  """
  em
  """
  column name
  """
  gf
  """
  column name
  """
  gg
  """
  column name
  """
  id
  """
  column name
  """
  ifm
  """
  column name
  """
  isl
  """
  column name
  """
  kb
  """
  column name
  """
  kgm
  """
  column name
  """
  kk
  """
  column name
  """
  mek
  """
  column name
  """
  mim
  """
  column name
  """
  mk
  """
  column name
  """
  msb
  """
  column name
  """
  mvf
  """
  column name
  """
  ng
  """
  column name
  """
  rao
  """
  column name
  """
  sbm
  """
  column name
  """
  sks
  """
  column name
  """
  vam
  """
  column name
  """
  za
}

input smb_attribute_approval_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_attribute_approval_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_attribute_approval_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_attribute_approval_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_attribute_approval_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_attribute_approval_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_attribute_approval_variance_fields {
  id: Float
}

"""
Attribute values of SMB objects
"""
type smb_attribute_translations {
  """
  An object relationship
  """
  attribute: smb_attributes!
  attribute_key: String!
  fq_key: String!
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  object_id: bigint!
  value: String
  visible: Boolean!
}

"""
aggregated selection of "smb.attribute_translations"
"""
type smb_attribute_translations_aggregate {
  aggregate: smb_attribute_translations_aggregate_fields
  nodes: [smb_attribute_translations!]!
}

input smb_attribute_translations_aggregate_bool_exp {
  bool_and: smb_attribute_translations_aggregate_bool_exp_bool_and
  bool_or: smb_attribute_translations_aggregate_bool_exp_bool_or
  count: smb_attribute_translations_aggregate_bool_exp_count
}

input smb_attribute_translations_aggregate_bool_exp_bool_and {
  arguments: smb_attribute_translations_select_column_smb_attribute_translations_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: smb_attribute_translations_bool_exp
  predicate: Boolean_comparison_exp!
}

input smb_attribute_translations_aggregate_bool_exp_bool_or {
  arguments: smb_attribute_translations_select_column_smb_attribute_translations_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: smb_attribute_translations_bool_exp
  predicate: Boolean_comparison_exp!
}

input smb_attribute_translations_aggregate_bool_exp_count {
  arguments: [smb_attribute_translations_select_column!]
  distinct: Boolean
  filter: smb_attribute_translations_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.attribute_translations"
"""
type smb_attribute_translations_aggregate_fields {
  avg: smb_attribute_translations_avg_fields
  count(columns: [smb_attribute_translations_select_column!], distinct: Boolean): Int!
  max: smb_attribute_translations_max_fields
  min: smb_attribute_translations_min_fields
  stddev: smb_attribute_translations_stddev_fields
  stddev_pop: smb_attribute_translations_stddev_pop_fields
  stddev_samp: smb_attribute_translations_stddev_samp_fields
  sum: smb_attribute_translations_sum_fields
  var_pop: smb_attribute_translations_var_pop_fields
  var_samp: smb_attribute_translations_var_samp_fields
  variance: smb_attribute_translations_variance_fields
}

"""
order by aggregate values of table "smb.attribute_translations"
"""
input smb_attribute_translations_aggregate_order_by {
  avg: smb_attribute_translations_avg_order_by
  count: order_by
  max: smb_attribute_translations_max_order_by
  min: smb_attribute_translations_min_order_by
  stddev: smb_attribute_translations_stddev_order_by
  stddev_pop: smb_attribute_translations_stddev_pop_order_by
  stddev_samp: smb_attribute_translations_stddev_samp_order_by
  sum: smb_attribute_translations_sum_order_by
  var_pop: smb_attribute_translations_var_pop_order_by
  var_samp: smb_attribute_translations_var_samp_order_by
  variance: smb_attribute_translations_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.attribute_translations"
"""
input smb_attribute_translations_arr_rel_insert_input {
  data: [smb_attribute_translations_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_attribute_translations_on_conflict
}

"""
aggregate avg on columns
"""
type smb_attribute_translations_avg_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by avg() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_avg_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.attribute_translations". All fields are combined with a logical 'AND'.
"""
input smb_attribute_translations_bool_exp {
  _and: [smb_attribute_translations_bool_exp!]
  _not: smb_attribute_translations_bool_exp
  _or: [smb_attribute_translations_bool_exp!]
  attribute: smb_attributes_bool_exp
  attribute_key: String_comparison_exp
  fq_key: String_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  object_id: bigint_comparison_exp
  value: String_comparison_exp
  visible: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "smb.attribute_translations"
"""
enum smb_attribute_translations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  attribute_translations_pkey
}

"""
input type for incrementing numeric columns in table "smb.attribute_translations"
"""
input smb_attribute_translations_inc_input {
  id: bigint
  language_id: bigint
  object_id: bigint
}

"""
input type for inserting data into table "smb.attribute_translations"
"""
input smb_attribute_translations_insert_input {
  attribute: smb_attributes_obj_rel_insert_input
  attribute_key: String
  fq_key: String
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  object_id: bigint
  value: String
  visible: Boolean
}

"""
aggregate max on columns
"""
type smb_attribute_translations_max_fields {
  attribute_key: String
  fq_key: String
  id: bigint
  language_id: bigint
  object_id: bigint
  value: String
}

"""
order by max() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_max_order_by {
  attribute_key: order_by
  fq_key: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  value: order_by
}

"""
aggregate min on columns
"""
type smb_attribute_translations_min_fields {
  attribute_key: String
  fq_key: String
  id: bigint
  language_id: bigint
  object_id: bigint
  value: String
}

"""
order by min() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_min_order_by {
  attribute_key: order_by
  fq_key: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  value: order_by
}

"""
response of any mutation on the table "smb.attribute_translations"
"""
type smb_attribute_translations_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_attribute_translations!]!
}

"""
on_conflict condition type for table "smb.attribute_translations"
"""
input smb_attribute_translations_on_conflict {
  constraint: smb_attribute_translations_constraint!
  update_columns: [smb_attribute_translations_update_column!]! = []
  where: smb_attribute_translations_bool_exp
}

"""
Ordering options when selecting data from "smb.attribute_translations".
"""
input smb_attribute_translations_order_by {
  attribute: smb_attributes_order_by
  attribute_key: order_by
  fq_key: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  object_id: order_by
  value: order_by
  visible: order_by
}

"""
primary key columns input for table: smb.attribute_translations
"""
input smb_attribute_translations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.attribute_translations"
"""
enum smb_attribute_translations_select_column {
  """
  column name
  """
  attribute_key
  """
  column name
  """
  fq_key
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  object_id
  """
  column name
  """
  value
  """
  column name
  """
  visible
}

"""
select "smb_attribute_translations_aggregate_bool_exp_bool_and_arguments_columns" columns of table "smb.attribute_translations"
"""
enum smb_attribute_translations_select_column_smb_attribute_translations_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  visible
}

"""
select "smb_attribute_translations_aggregate_bool_exp_bool_or_arguments_columns" columns of table "smb.attribute_translations"
"""
enum smb_attribute_translations_select_column_smb_attribute_translations_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  visible
}

"""
input type for updating data in table "smb.attribute_translations"
"""
input smb_attribute_translations_set_input {
  attribute_key: String
  fq_key: String
  id: bigint
  language_id: bigint
  object_id: bigint
  value: String
  visible: Boolean
}

"""
aggregate stddev on columns
"""
type smb_attribute_translations_stddev_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by stddev() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_stddev_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_attribute_translations_stddev_pop_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by stddev_pop() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_stddev_pop_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_attribute_translations_stddev_samp_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by stddev_samp() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_stddev_samp_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
Streaming cursor of the table "smb_attribute_translations"
"""
input smb_attribute_translations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_attribute_translations_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_attribute_translations_stream_cursor_value_input {
  attribute_key: String
  fq_key: String
  id: bigint
  language_id: bigint
  object_id: bigint
  value: String
  visible: Boolean
}

"""
aggregate sum on columns
"""
type smb_attribute_translations_sum_fields {
  id: bigint
  language_id: bigint
  object_id: bigint
}

"""
order by sum() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_sum_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
update columns of table "smb.attribute_translations"
"""
enum smb_attribute_translations_update_column {
  """
  column name
  """
  attribute_key
  """
  column name
  """
  fq_key
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  object_id
  """
  column name
  """
  value
  """
  column name
  """
  visible
}

input smb_attribute_translations_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_attribute_translations_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_attribute_translations_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_attribute_translations_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_attribute_translations_var_pop_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by var_pop() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_var_pop_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_attribute_translations_var_samp_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by var_samp() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_var_samp_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
aggregate variance on columns
"""
type smb_attribute_translations_variance_fields {
  id: Float
  language_id: Float
  object_id: Float
}

"""
order by variance() on columns of table "smb.attribute_translations"
"""
input smb_attribute_translations_variance_order_by {
  id: order_by
  language_id: order_by
  object_id: order_by
}

"""
Attributes fetched from MDS
"""
type smb_attributes {
  """
  An object relationship
  """
  approvals: smb_attribute_approval
  datatype: String!
  key: String!
}

"""
aggregated selection of "smb.attributes"
"""
type smb_attributes_aggregate {
  aggregate: smb_attributes_aggregate_fields
  nodes: [smb_attributes!]!
}

"""
aggregate fields of "smb.attributes"
"""
type smb_attributes_aggregate_fields {
  count(columns: [smb_attributes_select_column!], distinct: Boolean): Int!
  max: smb_attributes_max_fields
  min: smb_attributes_min_fields
}

"""
Boolean expression to filter rows from the table "smb.attributes". All fields are combined with a logical 'AND'.
"""
input smb_attributes_bool_exp {
  _and: [smb_attributes_bool_exp!]
  _not: smb_attributes_bool_exp
  _or: [smb_attributes_bool_exp!]
  approvals: smb_attribute_approval_bool_exp
  datatype: String_comparison_exp
  key: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.attributes"
"""
enum smb_attributes_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  attributes_pkey
}

"""
input type for inserting data into table "smb.attributes"
"""
input smb_attributes_insert_input {
  approvals: smb_attribute_approval_obj_rel_insert_input
  datatype: String
  key: String
}

"""
aggregate max on columns
"""
type smb_attributes_max_fields {
  datatype: String
  key: String
}

"""
aggregate min on columns
"""
type smb_attributes_min_fields {
  datatype: String
  key: String
}

"""
response of any mutation on the table "smb.attributes"
"""
type smb_attributes_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_attributes!]!
}

"""
input type for inserting object relation for remote table "smb.attributes"
"""
input smb_attributes_obj_rel_insert_input {
  data: smb_attributes_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_attributes_on_conflict
}

"""
on_conflict condition type for table "smb.attributes"
"""
input smb_attributes_on_conflict {
  constraint: smb_attributes_constraint!
  update_columns: [smb_attributes_update_column!]! = []
  where: smb_attributes_bool_exp
}

"""
Ordering options when selecting data from "smb.attributes".
"""
input smb_attributes_order_by {
  approvals: smb_attribute_approval_order_by
  datatype: order_by
  key: order_by
}

"""
primary key columns input for table: smb.attributes
"""
input smb_attributes_pk_columns_input {
  key: String!
}

"""
select columns of table "smb.attributes"
"""
enum smb_attributes_select_column {
  """
  column name
  """
  datatype
  """
  column name
  """
  key
}

"""
input type for updating data in table "smb.attributes"
"""
input smb_attributes_set_input {
  datatype: String
  key: String
}

"""
Streaming cursor of the table "smb_attributes"
"""
input smb_attributes_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_attributes_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_attributes_stream_cursor_value_input {
  datatype: String
  key: String
}

"""
update columns of table "smb.attributes"
"""
enum smb_attributes_update_column {
  """
  column name
  """
  datatype
  """
  column name
  """
  key
}

input smb_attributes_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_attributes_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_attributes_bool_exp!
}

"""
Info about blocked attachments; the linked license overrides what is returned by MDS
"""
type smb_blocked_attachments {
  """
  An array relationship
  """
  attachments("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): [smb_attachments!]!
  """
  An aggregate relationship
  """
  attachments_aggregate("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): smb_attachments_aggregate!
  id: bigint!
  """
  An object relationship
  """
  license: smb_licenses!
  license_id: bigint!
}

"""
aggregated selection of "smb.blocked_attachments"
"""
type smb_blocked_attachments_aggregate {
  aggregate: smb_blocked_attachments_aggregate_fields
  nodes: [smb_blocked_attachments!]!
}

"""
aggregate fields of "smb.blocked_attachments"
"""
type smb_blocked_attachments_aggregate_fields {
  avg: smb_blocked_attachments_avg_fields
  count(columns: [smb_blocked_attachments_select_column!], distinct: Boolean): Int!
  max: smb_blocked_attachments_max_fields
  min: smb_blocked_attachments_min_fields
  stddev: smb_blocked_attachments_stddev_fields
  stddev_pop: smb_blocked_attachments_stddev_pop_fields
  stddev_samp: smb_blocked_attachments_stddev_samp_fields
  sum: smb_blocked_attachments_sum_fields
  var_pop: smb_blocked_attachments_var_pop_fields
  var_samp: smb_blocked_attachments_var_samp_fields
  variance: smb_blocked_attachments_variance_fields
}

"""
aggregate avg on columns
"""
type smb_blocked_attachments_avg_fields {
  id: Float
  license_id: Float
}

"""
Boolean expression to filter rows from the table "smb.blocked_attachments". All fields are combined with a logical 'AND'.
"""
input smb_blocked_attachments_bool_exp {
  _and: [smb_blocked_attachments_bool_exp!]
  _not: smb_blocked_attachments_bool_exp
  _or: [smb_blocked_attachments_bool_exp!]
  attachments: smb_attachments_bool_exp
  attachments_aggregate: smb_attachments_aggregate_bool_exp
  id: bigint_comparison_exp
  license: smb_licenses_bool_exp
  license_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "smb.blocked_attachments"
"""
enum smb_blocked_attachments_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  blocked_attachments_pkey
}

"""
input type for incrementing numeric columns in table "smb.blocked_attachments"
"""
input smb_blocked_attachments_inc_input {
  id: bigint
  license_id: bigint
}

"""
input type for inserting data into table "smb.blocked_attachments"
"""
input smb_blocked_attachments_insert_input {
  attachments: smb_attachments_arr_rel_insert_input
  id: bigint
  license: smb_licenses_obj_rel_insert_input
  license_id: bigint
}

"""
aggregate max on columns
"""
type smb_blocked_attachments_max_fields {
  id: bigint
  license_id: bigint
}

"""
aggregate min on columns
"""
type smb_blocked_attachments_min_fields {
  id: bigint
  license_id: bigint
}

"""
response of any mutation on the table "smb.blocked_attachments"
"""
type smb_blocked_attachments_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_blocked_attachments!]!
}

"""
on_conflict condition type for table "smb.blocked_attachments"
"""
input smb_blocked_attachments_on_conflict {
  constraint: smb_blocked_attachments_constraint!
  update_columns: [smb_blocked_attachments_update_column!]! = []
  where: smb_blocked_attachments_bool_exp
}

"""
Ordering options when selecting data from "smb.blocked_attachments".
"""
input smb_blocked_attachments_order_by {
  attachments_aggregate: smb_attachments_aggregate_order_by
  id: order_by
  license: smb_licenses_order_by
  license_id: order_by
}

"""
primary key columns input for table: smb.blocked_attachments
"""
input smb_blocked_attachments_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.blocked_attachments"
"""
enum smb_blocked_attachments_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  license_id
}

"""
input type for updating data in table "smb.blocked_attachments"
"""
input smb_blocked_attachments_set_input {
  id: bigint
  license_id: bigint
}

"""
aggregate stddev on columns
"""
type smb_blocked_attachments_stddev_fields {
  id: Float
  license_id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_blocked_attachments_stddev_pop_fields {
  id: Float
  license_id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_blocked_attachments_stddev_samp_fields {
  id: Float
  license_id: Float
}

"""
Streaming cursor of the table "smb_blocked_attachments"
"""
input smb_blocked_attachments_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_blocked_attachments_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_blocked_attachments_stream_cursor_value_input {
  id: bigint
  license_id: bigint
}

"""
aggregate sum on columns
"""
type smb_blocked_attachments_sum_fields {
  id: bigint
  license_id: bigint
}

"""
update columns of table "smb.blocked_attachments"
"""
enum smb_blocked_attachments_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  license_id
}

input smb_blocked_attachments_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_blocked_attachments_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_blocked_attachments_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_blocked_attachments_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_blocked_attachments_var_pop_fields {
  id: Float
  license_id: Float
}

"""
aggregate var_samp on columns
"""
type smb_blocked_attachments_var_samp_fields {
  id: Float
  license_id: Float
}

"""
aggregate variance on columns
"""
type smb_blocked_attachments_variance_fields {
  id: Float
  license_id: Float
}

"""
List of all Museum buildings
"""
type smb_buildings {
  key: String!
  """
  A computed field, executes function "smb.build_search_value_b"
  """
  searchValue: String
  """
  Display title used for all languages
  """
  title: String!
}

"""
aggregated selection of "smb.buildings"
"""
type smb_buildings_aggregate {
  aggregate: smb_buildings_aggregate_fields
  nodes: [smb_buildings!]!
}

"""
aggregate fields of "smb.buildings"
"""
type smb_buildings_aggregate_fields {
  count(columns: [smb_buildings_select_column!], distinct: Boolean): Int!
  max: smb_buildings_max_fields
  min: smb_buildings_min_fields
}

"""
Boolean expression to filter rows from the table "smb.buildings". All fields are combined with a logical 'AND'.
"""
input smb_buildings_bool_exp {
  _and: [smb_buildings_bool_exp!]
  _not: smb_buildings_bool_exp
  _or: [smb_buildings_bool_exp!]
  key: String_comparison_exp
  searchValue: String_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.buildings"
"""
enum smb_buildings_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  buildings_pkey
}

"""
input type for inserting data into table "smb.buildings"
"""
input smb_buildings_insert_input {
  key: String
  """
  Display title used for all languages
  """
  title: String
}

"""
aggregate max on columns
"""
type smb_buildings_max_fields {
  key: String
  """
  A computed field, executes function "smb.build_search_value_b"
  """
  searchValue: String
  """
  Display title used for all languages
  """
  title: String
}

"""
aggregate min on columns
"""
type smb_buildings_min_fields {
  key: String
  """
  A computed field, executes function "smb.build_search_value_b"
  """
  searchValue: String
  """
  Display title used for all languages
  """
  title: String
}

"""
response of any mutation on the table "smb.buildings"
"""
type smb_buildings_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_buildings!]!
}

"""
on_conflict condition type for table "smb.buildings"
"""
input smb_buildings_on_conflict {
  constraint: smb_buildings_constraint!
  update_columns: [smb_buildings_update_column!]! = []
  where: smb_buildings_bool_exp
}

"""
Ordering options when selecting data from "smb.buildings".
"""
input smb_buildings_order_by {
  key: order_by
  searchValue: order_by
  title: order_by
}

"""
primary key columns input for table: smb.buildings
"""
input smb_buildings_pk_columns_input {
  key: String!
}

"""
select columns of table "smb.buildings"
"""
enum smb_buildings_select_column {
  """
  column name
  """
  key
  """
  column name
  """
  title
}

"""
input type for updating data in table "smb.buildings"
"""
input smb_buildings_set_input {
  key: String
  """
  Display title used for all languages
  """
  title: String
}

"""
Streaming cursor of the table "smb_buildings"
"""
input smb_buildings_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_buildings_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_buildings_stream_cursor_value_input {
  key: String
  """
  Display title used for all languages
  """
  title: String
}

"""
update columns of table "smb.buildings"
"""
enum smb_buildings_update_column {
  """
  column name
  """
  key
  """
  column name
  """
  title
}

input smb_buildings_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_buildings_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_buildings_bool_exp!
}

"""
Enum type definition of MDS collection keys
"""
type smb_collections {
  key: String!
  """
  A computed field, executes function "smb.build_search_value_c"
  """
  searchValue: String
  title: String!
  type: String!
}

"""
aggregated selection of "smb.collections"
"""
type smb_collections_aggregate {
  aggregate: smb_collections_aggregate_fields
  nodes: [smb_collections!]!
}

"""
aggregate fields of "smb.collections"
"""
type smb_collections_aggregate_fields {
  count(columns: [smb_collections_select_column!], distinct: Boolean): Int!
  max: smb_collections_max_fields
  min: smb_collections_min_fields
}

"""
Boolean expression to filter rows from the table "smb.collections". All fields are combined with a logical 'AND'.
"""
input smb_collections_bool_exp {
  _and: [smb_collections_bool_exp!]
  _not: smb_collections_bool_exp
  _or: [smb_collections_bool_exp!]
  key: String_comparison_exp
  searchValue: String_comparison_exp
  title: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.collections"
"""
enum smb_collections_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  collections_pkey
}

"""
input type for inserting data into table "smb.collections"
"""
input smb_collections_insert_input {
  key: String
  title: String
  type: String
}

"""
aggregate max on columns
"""
type smb_collections_max_fields {
  key: String
  """
  A computed field, executes function "smb.build_search_value_c"
  """
  searchValue: String
  title: String
  type: String
}

"""
aggregate min on columns
"""
type smb_collections_min_fields {
  key: String
  """
  A computed field, executes function "smb.build_search_value_c"
  """
  searchValue: String
  title: String
  type: String
}

"""
response of any mutation on the table "smb.collections"
"""
type smb_collections_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_collections!]!
}

"""
on_conflict condition type for table "smb.collections"
"""
input smb_collections_on_conflict {
  constraint: smb_collections_constraint!
  update_columns: [smb_collections_update_column!]! = []
  where: smb_collections_bool_exp
}

"""
Ordering options when selecting data from "smb.collections".
"""
input smb_collections_order_by {
  key: order_by
  searchValue: order_by
  title: order_by
  type: order_by
}

"""
primary key columns input for table: smb.collections
"""
input smb_collections_pk_columns_input {
  key: String!
}

"""
select columns of table "smb.collections"
"""
enum smb_collections_select_column {
  """
  column name
  """
  key
  """
  column name
  """
  title
  """
  column name
  """
  type
}

"""
input type for updating data in table "smb.collections"
"""
input smb_collections_set_input {
  key: String
  title: String
  type: String
}

"""
Streaming cursor of the table "smb_collections"
"""
input smb_collections_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_collections_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_collections_stream_cursor_value_input {
  key: String
  title: String
  type: String
}

"""
update columns of table "smb.collections"
"""
enum smb_collections_update_column {
  """
  column name
  """
  key
  """
  column name
  """
  title
  """
  column name
  """
  type
}

input smb_collections_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_collections_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_collections_bool_exp!
}

"""
cultural references collected from repeatable group items
"""
type smb_cultural_references {
  culture_item_id: bigint!
  """
  An object relationship
  """
  denomination_voc: smb_thesaurus
  denomination_voc_id: bigint
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  """
  An object relationship
  """
  name_voc: smb_thesaurus
  name_voc_id: bigint
  object_id: bigint!
  sequence: Int!
  """
  An object relationship
  """
  type_voc: smb_thesaurus
  type_voc_id: bigint
}

"""
aggregated selection of "smb.cultural_references"
"""
type smb_cultural_references_aggregate {
  aggregate: smb_cultural_references_aggregate_fields
  nodes: [smb_cultural_references!]!
}

input smb_cultural_references_aggregate_bool_exp {
  count: smb_cultural_references_aggregate_bool_exp_count
}

input smb_cultural_references_aggregate_bool_exp_count {
  arguments: [smb_cultural_references_select_column!]
  distinct: Boolean
  filter: smb_cultural_references_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.cultural_references"
"""
type smb_cultural_references_aggregate_fields {
  avg: smb_cultural_references_avg_fields
  count(columns: [smb_cultural_references_select_column!], distinct: Boolean): Int!
  max: smb_cultural_references_max_fields
  min: smb_cultural_references_min_fields
  stddev: smb_cultural_references_stddev_fields
  stddev_pop: smb_cultural_references_stddev_pop_fields
  stddev_samp: smb_cultural_references_stddev_samp_fields
  sum: smb_cultural_references_sum_fields
  var_pop: smb_cultural_references_var_pop_fields
  var_samp: smb_cultural_references_var_samp_fields
  variance: smb_cultural_references_variance_fields
}

"""
order by aggregate values of table "smb.cultural_references"
"""
input smb_cultural_references_aggregate_order_by {
  avg: smb_cultural_references_avg_order_by
  count: order_by
  max: smb_cultural_references_max_order_by
  min: smb_cultural_references_min_order_by
  stddev: smb_cultural_references_stddev_order_by
  stddev_pop: smb_cultural_references_stddev_pop_order_by
  stddev_samp: smb_cultural_references_stddev_samp_order_by
  sum: smb_cultural_references_sum_order_by
  var_pop: smb_cultural_references_var_pop_order_by
  var_samp: smb_cultural_references_var_samp_order_by
  variance: smb_cultural_references_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.cultural_references"
"""
input smb_cultural_references_arr_rel_insert_input {
  data: [smb_cultural_references_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_cultural_references_on_conflict
}

"""
aggregate avg on columns
"""
type smb_cultural_references_avg_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by avg() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_avg_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.cultural_references". All fields are combined with a logical 'AND'.
"""
input smb_cultural_references_bool_exp {
  _and: [smb_cultural_references_bool_exp!]
  _not: smb_cultural_references_bool_exp
  _or: [smb_cultural_references_bool_exp!]
  culture_item_id: bigint_comparison_exp
  denomination_voc: smb_thesaurus_bool_exp
  denomination_voc_id: bigint_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  name_voc: smb_thesaurus_bool_exp
  name_voc_id: bigint_comparison_exp
  object_id: bigint_comparison_exp
  sequence: Int_comparison_exp
  type_voc: smb_thesaurus_bool_exp
  type_voc_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "smb.cultural_references"
"""
enum smb_cultural_references_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  cultural_references_pkey
}

"""
input type for incrementing numeric columns in table "smb.cultural_references"
"""
input smb_cultural_references_inc_input {
  culture_item_id: bigint
  denomination_voc_id: bigint
  id: bigint
  language_id: bigint
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
input type for inserting data into table "smb.cultural_references"
"""
input smb_cultural_references_insert_input {
  culture_item_id: bigint
  denomination_voc: smb_thesaurus_obj_rel_insert_input
  denomination_voc_id: bigint
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  name_voc: smb_thesaurus_obj_rel_insert_input
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc: smb_thesaurus_obj_rel_insert_input
  type_voc_id: bigint
}

"""
aggregate max on columns
"""
type smb_cultural_references_max_fields {
  culture_item_id: bigint
  denomination_voc_id: bigint
  id: bigint
  language_id: bigint
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
order by max() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_max_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate min on columns
"""
type smb_cultural_references_min_fields {
  culture_item_id: bigint
  denomination_voc_id: bigint
  id: bigint
  language_id: bigint
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
order by min() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_min_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
response of any mutation on the table "smb.cultural_references"
"""
type smb_cultural_references_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_cultural_references!]!
}

"""
on_conflict condition type for table "smb.cultural_references"
"""
input smb_cultural_references_on_conflict {
  constraint: smb_cultural_references_constraint!
  update_columns: [smb_cultural_references_update_column!]! = []
  where: smb_cultural_references_bool_exp
}

"""
Ordering options when selecting data from "smb.cultural_references".
"""
input smb_cultural_references_order_by {
  culture_item_id: order_by
  denomination_voc: smb_thesaurus_order_by
  denomination_voc_id: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  name_voc: smb_thesaurus_order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc: smb_thesaurus_order_by
  type_voc_id: order_by
}

"""
primary key columns input for table: smb.cultural_references
"""
input smb_cultural_references_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.cultural_references"
"""
enum smb_cultural_references_select_column {
  """
  column name
  """
  culture_item_id
  """
  column name
  """
  denomination_voc_id
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  name_voc_id
  """
  column name
  """
  object_id
  """
  column name
  """
  sequence
  """
  column name
  """
  type_voc_id
}

"""
input type for updating data in table "smb.cultural_references"
"""
input smb_cultural_references_set_input {
  culture_item_id: bigint
  denomination_voc_id: bigint
  id: bigint
  language_id: bigint
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
aggregate stddev on columns
"""
type smb_cultural_references_stddev_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by stddev() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_stddev_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_cultural_references_stddev_pop_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by stddev_pop() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_stddev_pop_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_cultural_references_stddev_samp_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by stddev_samp() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_stddev_samp_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
Streaming cursor of the table "smb_cultural_references"
"""
input smb_cultural_references_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_cultural_references_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_cultural_references_stream_cursor_value_input {
  culture_item_id: bigint
  denomination_voc_id: bigint
  id: bigint
  language_id: bigint
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
aggregate sum on columns
"""
type smb_cultural_references_sum_fields {
  culture_item_id: bigint
  denomination_voc_id: bigint
  id: bigint
  language_id: bigint
  name_voc_id: bigint
  object_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
order by sum() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_sum_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
update columns of table "smb.cultural_references"
"""
enum smb_cultural_references_update_column {
  """
  column name
  """
  culture_item_id
  """
  column name
  """
  denomination_voc_id
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  name_voc_id
  """
  column name
  """
  object_id
  """
  column name
  """
  sequence
  """
  column name
  """
  type_voc_id
}

input smb_cultural_references_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_cultural_references_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_cultural_references_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_cultural_references_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_cultural_references_var_pop_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by var_pop() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_var_pop_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_cultural_references_var_samp_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by var_samp() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_var_samp_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate variance on columns
"""
type smb_cultural_references_variance_fields {
  culture_item_id: Float
  denomination_voc_id: Float
  id: Float
  language_id: Float
  name_voc_id: Float
  object_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by variance() on columns of table "smb.cultural_references"
"""
input smb_cultural_references_variance_order_by {
  culture_item_id: order_by
  denomination_voc_id: order_by
  id: order_by
  language_id: order_by
  name_voc_id: order_by
  object_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
exhibitions
"""
type smb_exhibitions {
  created_at: timestamptz!
  description: String
  end_date: String
  """
  An array relationship
  """
  exhibitions_objects("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): [smb_exhibitions_objects!]!
  """
  An aggregate relationship
  """
  exhibitions_objects_aggregate("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): smb_exhibitions_objects_aggregate!
  id: bigint!
  location: String
  start_date: String
  title: String
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.exhibitions"
"""
type smb_exhibitions_aggregate {
  aggregate: smb_exhibitions_aggregate_fields
  nodes: [smb_exhibitions!]!
}

"""
aggregate fields of "smb.exhibitions"
"""
type smb_exhibitions_aggregate_fields {
  avg: smb_exhibitions_avg_fields
  count(columns: [smb_exhibitions_select_column!], distinct: Boolean): Int!
  max: smb_exhibitions_max_fields
  min: smb_exhibitions_min_fields
  stddev: smb_exhibitions_stddev_fields
  stddev_pop: smb_exhibitions_stddev_pop_fields
  stddev_samp: smb_exhibitions_stddev_samp_fields
  sum: smb_exhibitions_sum_fields
  var_pop: smb_exhibitions_var_pop_fields
  var_samp: smb_exhibitions_var_samp_fields
  variance: smb_exhibitions_variance_fields
}

"""
aggregate avg on columns
"""
type smb_exhibitions_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.exhibitions". All fields are combined with a logical 'AND'.
"""
input smb_exhibitions_bool_exp {
  _and: [smb_exhibitions_bool_exp!]
  _not: smb_exhibitions_bool_exp
  _or: [smb_exhibitions_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  end_date: String_comparison_exp
  exhibitions_objects: smb_exhibitions_objects_bool_exp
  exhibitions_objects_aggregate: smb_exhibitions_objects_aggregate_bool_exp
  id: bigint_comparison_exp
  location: String_comparison_exp
  start_date: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.exhibitions"
"""
enum smb_exhibitions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  exhibitions_pkey
}

"""
input type for incrementing numeric columns in table "smb.exhibitions"
"""
input smb_exhibitions_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.exhibitions"
"""
input smb_exhibitions_insert_input {
  created_at: timestamptz
  description: String
  end_date: String
  exhibitions_objects: smb_exhibitions_objects_arr_rel_insert_input
  id: bigint
  location: String
  start_date: String
  title: String
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_exhibitions_max_fields {
  created_at: timestamptz
  description: String
  end_date: String
  id: bigint
  location: String
  start_date: String
  title: String
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type smb_exhibitions_min_fields {
  created_at: timestamptz
  description: String
  end_date: String
  id: bigint
  location: String
  start_date: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "smb.exhibitions"
"""
type smb_exhibitions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_exhibitions!]!
}

"""
input type for inserting object relation for remote table "smb.exhibitions"
"""
input smb_exhibitions_obj_rel_insert_input {
  data: smb_exhibitions_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_exhibitions_on_conflict
}

"""
Linkage of exhibitions and objects
"""
type smb_exhibitions_objects {
  created_at: timestamptz!
  """
  An object relationship
  """
  exhibition: smb_exhibitions!
  exhibition_id: bigint!
  id: bigint!
  """
  An object relationship
  """
  object: smb_objects!
  object_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.exhibitions_objects"
"""
type smb_exhibitions_objects_aggregate {
  aggregate: smb_exhibitions_objects_aggregate_fields
  nodes: [smb_exhibitions_objects!]!
}

input smb_exhibitions_objects_aggregate_bool_exp {
  count: smb_exhibitions_objects_aggregate_bool_exp_count
}

input smb_exhibitions_objects_aggregate_bool_exp_count {
  arguments: [smb_exhibitions_objects_select_column!]
  distinct: Boolean
  filter: smb_exhibitions_objects_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.exhibitions_objects"
"""
type smb_exhibitions_objects_aggregate_fields {
  avg: smb_exhibitions_objects_avg_fields
  count(columns: [smb_exhibitions_objects_select_column!], distinct: Boolean): Int!
  max: smb_exhibitions_objects_max_fields
  min: smb_exhibitions_objects_min_fields
  stddev: smb_exhibitions_objects_stddev_fields
  stddev_pop: smb_exhibitions_objects_stddev_pop_fields
  stddev_samp: smb_exhibitions_objects_stddev_samp_fields
  sum: smb_exhibitions_objects_sum_fields
  var_pop: smb_exhibitions_objects_var_pop_fields
  var_samp: smb_exhibitions_objects_var_samp_fields
  variance: smb_exhibitions_objects_variance_fields
}

"""
order by aggregate values of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_aggregate_order_by {
  avg: smb_exhibitions_objects_avg_order_by
  count: order_by
  max: smb_exhibitions_objects_max_order_by
  min: smb_exhibitions_objects_min_order_by
  stddev: smb_exhibitions_objects_stddev_order_by
  stddev_pop: smb_exhibitions_objects_stddev_pop_order_by
  stddev_samp: smb_exhibitions_objects_stddev_samp_order_by
  sum: smb_exhibitions_objects_sum_order_by
  var_pop: smb_exhibitions_objects_var_pop_order_by
  var_samp: smb_exhibitions_objects_var_samp_order_by
  variance: smb_exhibitions_objects_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_arr_rel_insert_input {
  data: [smb_exhibitions_objects_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_exhibitions_objects_on_conflict
}

"""
aggregate avg on columns
"""
type smb_exhibitions_objects_avg_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by avg() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_avg_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.exhibitions_objects". All fields are combined with a logical 'AND'.
"""
input smb_exhibitions_objects_bool_exp {
  _and: [smb_exhibitions_objects_bool_exp!]
  _not: smb_exhibitions_objects_bool_exp
  _or: [smb_exhibitions_objects_bool_exp!]
  created_at: timestamptz_comparison_exp
  exhibition: smb_exhibitions_bool_exp
  exhibition_id: bigint_comparison_exp
  id: bigint_comparison_exp
  object: smb_objects_bool_exp
  object_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.exhibitions_objects"
"""
enum smb_exhibitions_objects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  exhibitions_objects_pkey
}

"""
input type for incrementing numeric columns in table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_inc_input {
  exhibition_id: bigint
  id: bigint
  object_id: bigint
}

"""
input type for inserting data into table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_insert_input {
  created_at: timestamptz
  exhibition: smb_exhibitions_obj_rel_insert_input
  exhibition_id: bigint
  id: bigint
  object: smb_objects_obj_rel_insert_input
  object_id: bigint
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_exhibitions_objects_max_fields {
  created_at: timestamptz
  exhibition_id: bigint
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_max_order_by {
  created_at: order_by
  exhibition_id: order_by
  id: order_by
  object_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type smb_exhibitions_objects_min_fields {
  created_at: timestamptz
  exhibition_id: bigint
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_min_order_by {
  created_at: order_by
  exhibition_id: order_by
  id: order_by
  object_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "smb.exhibitions_objects"
"""
type smb_exhibitions_objects_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_exhibitions_objects!]!
}

"""
on_conflict condition type for table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_on_conflict {
  constraint: smb_exhibitions_objects_constraint!
  update_columns: [smb_exhibitions_objects_update_column!]! = []
  where: smb_exhibitions_objects_bool_exp
}

"""
Ordering options when selecting data from "smb.exhibitions_objects".
"""
input smb_exhibitions_objects_order_by {
  created_at: order_by
  exhibition: smb_exhibitions_order_by
  exhibition_id: order_by
  id: order_by
  object: smb_objects_order_by
  object_id: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.exhibitions_objects
"""
input smb_exhibitions_objects_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.exhibitions_objects"
"""
enum smb_exhibitions_objects_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  exhibition_id
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_set_input {
  created_at: timestamptz
  exhibition_id: bigint
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_exhibitions_objects_stddev_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by stddev() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_stddev_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_exhibitions_objects_stddev_pop_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by stddev_pop() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_stddev_pop_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_exhibitions_objects_stddev_samp_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by stddev_samp() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_stddev_samp_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
Streaming cursor of the table "smb_exhibitions_objects"
"""
input smb_exhibitions_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_exhibitions_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_exhibitions_objects_stream_cursor_value_input {
  created_at: timestamptz
  exhibition_id: bigint
  id: bigint
  object_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_exhibitions_objects_sum_fields {
  exhibition_id: bigint
  id: bigint
  object_id: bigint
}

"""
order by sum() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_sum_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
update columns of table "smb.exhibitions_objects"
"""
enum smb_exhibitions_objects_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  exhibition_id
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  updated_at
}

input smb_exhibitions_objects_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_exhibitions_objects_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_exhibitions_objects_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_exhibitions_objects_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_exhibitions_objects_var_pop_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by var_pop() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_var_pop_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_exhibitions_objects_var_samp_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by var_samp() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_var_samp_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
aggregate variance on columns
"""
type smb_exhibitions_objects_variance_fields {
  exhibition_id: Float
  id: Float
  object_id: Float
}

"""
order by variance() on columns of table "smb.exhibitions_objects"
"""
input smb_exhibitions_objects_variance_order_by {
  exhibition_id: order_by
  id: order_by
  object_id: order_by
}

"""
on_conflict condition type for table "smb.exhibitions"
"""
input smb_exhibitions_on_conflict {
  constraint: smb_exhibitions_constraint!
  update_columns: [smb_exhibitions_update_column!]! = []
  where: smb_exhibitions_bool_exp
}

"""
Ordering options when selecting data from "smb.exhibitions".
"""
input smb_exhibitions_order_by {
  created_at: order_by
  description: order_by
  end_date: order_by
  exhibitions_objects_aggregate: smb_exhibitions_objects_aggregate_order_by
  id: order_by
  location: order_by
  start_date: order_by
  title: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.exhibitions
"""
input smb_exhibitions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.exhibitions"
"""
enum smb_exhibitions_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  description
  """
  column name
  """
  end_date
  """
  column name
  """
  id
  """
  column name
  """
  location
  """
  column name
  """
  start_date
  """
  column name
  """
  title
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.exhibitions"
"""
input smb_exhibitions_set_input {
  created_at: timestamptz
  description: String
  end_date: String
  id: bigint
  location: String
  start_date: String
  title: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_exhibitions_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_exhibitions_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_exhibitions_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_exhibitions"
"""
input smb_exhibitions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_exhibitions_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_exhibitions_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  end_date: String
  id: bigint
  location: String
  start_date: String
  title: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_exhibitions_sum_fields {
  id: bigint
}

"""
update columns of table "smb.exhibitions"
"""
enum smb_exhibitions_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  description
  """
  column name
  """
  end_date
  """
  column name
  """
  id
  """
  column name
  """
  location
  """
  column name
  """
  start_date
  """
  column name
  """
  title
  """
  column name
  """
  updated_at
}

input smb_exhibitions_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_exhibitions_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_exhibitions_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_exhibitions_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_exhibitions_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_exhibitions_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_exhibitions_variance_fields {
  id: Float
}

"""
geographic locations collected from repeatable group items
"""
type smb_geographical_references {
  details: String
  geo_item_id: bigint!
  """
  An object relationship
  """
  geopol_voc: smb_thesaurus
  geopol_voc_id: bigint
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  object_id: bigint!
  """
  An object relationship
  """
  place_voc: smb_thesaurus
  place_voc_id: bigint
  sequence: Int!
  """
  An object relationship
  """
  type_voc: smb_thesaurus
  type_voc_id: bigint
}

"""
aggregated selection of "smb.geographical_references"
"""
type smb_geographical_references_aggregate {
  aggregate: smb_geographical_references_aggregate_fields
  nodes: [smb_geographical_references!]!
}

input smb_geographical_references_aggregate_bool_exp {
  count: smb_geographical_references_aggregate_bool_exp_count
}

input smb_geographical_references_aggregate_bool_exp_count {
  arguments: [smb_geographical_references_select_column!]
  distinct: Boolean
  filter: smb_geographical_references_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.geographical_references"
"""
type smb_geographical_references_aggregate_fields {
  avg: smb_geographical_references_avg_fields
  count(columns: [smb_geographical_references_select_column!], distinct: Boolean): Int!
  max: smb_geographical_references_max_fields
  min: smb_geographical_references_min_fields
  stddev: smb_geographical_references_stddev_fields
  stddev_pop: smb_geographical_references_stddev_pop_fields
  stddev_samp: smb_geographical_references_stddev_samp_fields
  sum: smb_geographical_references_sum_fields
  var_pop: smb_geographical_references_var_pop_fields
  var_samp: smb_geographical_references_var_samp_fields
  variance: smb_geographical_references_variance_fields
}

"""
order by aggregate values of table "smb.geographical_references"
"""
input smb_geographical_references_aggregate_order_by {
  avg: smb_geographical_references_avg_order_by
  count: order_by
  max: smb_geographical_references_max_order_by
  min: smb_geographical_references_min_order_by
  stddev: smb_geographical_references_stddev_order_by
  stddev_pop: smb_geographical_references_stddev_pop_order_by
  stddev_samp: smb_geographical_references_stddev_samp_order_by
  sum: smb_geographical_references_sum_order_by
  var_pop: smb_geographical_references_var_pop_order_by
  var_samp: smb_geographical_references_var_samp_order_by
  variance: smb_geographical_references_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.geographical_references"
"""
input smb_geographical_references_arr_rel_insert_input {
  data: [smb_geographical_references_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_geographical_references_on_conflict
}

"""
aggregate avg on columns
"""
type smb_geographical_references_avg_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by avg() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_avg_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.geographical_references". All fields are combined with a logical 'AND'.
"""
input smb_geographical_references_bool_exp {
  _and: [smb_geographical_references_bool_exp!]
  _not: smb_geographical_references_bool_exp
  _or: [smb_geographical_references_bool_exp!]
  details: String_comparison_exp
  geo_item_id: bigint_comparison_exp
  geopol_voc: smb_thesaurus_bool_exp
  geopol_voc_id: bigint_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  object_id: bigint_comparison_exp
  place_voc: smb_thesaurus_bool_exp
  place_voc_id: bigint_comparison_exp
  sequence: Int_comparison_exp
  type_voc: smb_thesaurus_bool_exp
  type_voc_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "smb.geographical_references"
"""
enum smb_geographical_references_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  geographical_references_pkey
}

"""
input type for incrementing numeric columns in table "smb.geographical_references"
"""
input smb_geographical_references_inc_input {
  geo_item_id: bigint
  geopol_voc_id: bigint
  id: bigint
  language_id: bigint
  object_id: bigint
  place_voc_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
input type for inserting data into table "smb.geographical_references"
"""
input smb_geographical_references_insert_input {
  details: String
  geo_item_id: bigint
  geopol_voc: smb_thesaurus_obj_rel_insert_input
  geopol_voc_id: bigint
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  object_id: bigint
  place_voc: smb_thesaurus_obj_rel_insert_input
  place_voc_id: bigint
  sequence: Int
  type_voc: smb_thesaurus_obj_rel_insert_input
  type_voc_id: bigint
}

"""
aggregate max on columns
"""
type smb_geographical_references_max_fields {
  details: String
  geo_item_id: bigint
  geopol_voc_id: bigint
  id: bigint
  language_id: bigint
  object_id: bigint
  place_voc_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
order by max() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_max_order_by {
  details: order_by
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate min on columns
"""
type smb_geographical_references_min_fields {
  details: String
  geo_item_id: bigint
  geopol_voc_id: bigint
  id: bigint
  language_id: bigint
  object_id: bigint
  place_voc_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
order by min() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_min_order_by {
  details: order_by
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
response of any mutation on the table "smb.geographical_references"
"""
type smb_geographical_references_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_geographical_references!]!
}

"""
on_conflict condition type for table "smb.geographical_references"
"""
input smb_geographical_references_on_conflict {
  constraint: smb_geographical_references_constraint!
  update_columns: [smb_geographical_references_update_column!]! = []
  where: smb_geographical_references_bool_exp
}

"""
Ordering options when selecting data from "smb.geographical_references".
"""
input smb_geographical_references_order_by {
  details: order_by
  geo_item_id: order_by
  geopol_voc: smb_thesaurus_order_by
  geopol_voc_id: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  object_id: order_by
  place_voc: smb_thesaurus_order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc: smb_thesaurus_order_by
  type_voc_id: order_by
}

"""
primary key columns input for table: smb.geographical_references
"""
input smb_geographical_references_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.geographical_references"
"""
enum smb_geographical_references_select_column {
  """
  column name
  """
  details
  """
  column name
  """
  geo_item_id
  """
  column name
  """
  geopol_voc_id
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  object_id
  """
  column name
  """
  place_voc_id
  """
  column name
  """
  sequence
  """
  column name
  """
  type_voc_id
}

"""
input type for updating data in table "smb.geographical_references"
"""
input smb_geographical_references_set_input {
  details: String
  geo_item_id: bigint
  geopol_voc_id: bigint
  id: bigint
  language_id: bigint
  object_id: bigint
  place_voc_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
aggregate stddev on columns
"""
type smb_geographical_references_stddev_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by stddev() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_stddev_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_geographical_references_stddev_pop_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by stddev_pop() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_stddev_pop_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_geographical_references_stddev_samp_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by stddev_samp() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_stddev_samp_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
Streaming cursor of the table "smb_geographical_references"
"""
input smb_geographical_references_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_geographical_references_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_geographical_references_stream_cursor_value_input {
  details: String
  geo_item_id: bigint
  geopol_voc_id: bigint
  id: bigint
  language_id: bigint
  object_id: bigint
  place_voc_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
aggregate sum on columns
"""
type smb_geographical_references_sum_fields {
  geo_item_id: bigint
  geopol_voc_id: bigint
  id: bigint
  language_id: bigint
  object_id: bigint
  place_voc_id: bigint
  sequence: Int
  type_voc_id: bigint
}

"""
order by sum() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_sum_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
update columns of table "smb.geographical_references"
"""
enum smb_geographical_references_update_column {
  """
  column name
  """
  details
  """
  column name
  """
  geo_item_id
  """
  column name
  """
  geopol_voc_id
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  object_id
  """
  column name
  """
  place_voc_id
  """
  column name
  """
  sequence
  """
  column name
  """
  type_voc_id
}

input smb_geographical_references_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_geographical_references_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_geographical_references_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_geographical_references_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_geographical_references_var_pop_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by var_pop() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_var_pop_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_geographical_references_var_samp_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by var_samp() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_var_samp_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
aggregate variance on columns
"""
type smb_geographical_references_variance_fields {
  geo_item_id: Float
  geopol_voc_id: Float
  id: Float
  language_id: Float
  object_id: Float
  place_voc_id: Float
  sequence: Float
  type_voc_id: Float
}

"""
order by variance() on columns of table "smb.geographical_references"
"""
input smb_geographical_references_variance_order_by {
  geo_item_id: order_by
  geopol_voc_id: order_by
  id: order_by
  language_id: order_by
  object_id: order_by
  place_voc_id: order_by
  sequence: order_by
  type_voc_id: order_by
}

"""
SMB highlight objects
"""
type smb_highlights {
  id: bigint!
  """
  An object relationship
  """
  object: smb_objects!
  object_id: bigint!
  """
  An object relationship
  """
  org_unit: smb_org_unit!
  org_unit_id: bigint!
}

"""
aggregated selection of "smb.highlights"
"""
type smb_highlights_aggregate {
  aggregate: smb_highlights_aggregate_fields
  nodes: [smb_highlights!]!
}

input smb_highlights_aggregate_bool_exp {
  count: smb_highlights_aggregate_bool_exp_count
}

input smb_highlights_aggregate_bool_exp_count {
  arguments: [smb_highlights_select_column!]
  distinct: Boolean
  filter: smb_highlights_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.highlights"
"""
type smb_highlights_aggregate_fields {
  avg: smb_highlights_avg_fields
  count(columns: [smb_highlights_select_column!], distinct: Boolean): Int!
  max: smb_highlights_max_fields
  min: smb_highlights_min_fields
  stddev: smb_highlights_stddev_fields
  stddev_pop: smb_highlights_stddev_pop_fields
  stddev_samp: smb_highlights_stddev_samp_fields
  sum: smb_highlights_sum_fields
  var_pop: smb_highlights_var_pop_fields
  var_samp: smb_highlights_var_samp_fields
  variance: smb_highlights_variance_fields
}

"""
order by aggregate values of table "smb.highlights"
"""
input smb_highlights_aggregate_order_by {
  avg: smb_highlights_avg_order_by
  count: order_by
  max: smb_highlights_max_order_by
  min: smb_highlights_min_order_by
  stddev: smb_highlights_stddev_order_by
  stddev_pop: smb_highlights_stddev_pop_order_by
  stddev_samp: smb_highlights_stddev_samp_order_by
  sum: smb_highlights_sum_order_by
  var_pop: smb_highlights_var_pop_order_by
  var_samp: smb_highlights_var_samp_order_by
  variance: smb_highlights_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.highlights"
"""
input smb_highlights_arr_rel_insert_input {
  data: [smb_highlights_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_highlights_on_conflict
}

"""
aggregate avg on columns
"""
type smb_highlights_avg_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by avg() on columns of table "smb.highlights"
"""
input smb_highlights_avg_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.highlights". All fields are combined with a logical 'AND'.
"""
input smb_highlights_bool_exp {
  _and: [smb_highlights_bool_exp!]
  _not: smb_highlights_bool_exp
  _or: [smb_highlights_bool_exp!]
  id: bigint_comparison_exp
  object: smb_objects_bool_exp
  object_id: bigint_comparison_exp
  org_unit: smb_org_unit_bool_exp
  org_unit_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "smb.highlights"
"""
enum smb_highlights_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  highlights_pkey
}

"""
input type for incrementing numeric columns in table "smb.highlights"
"""
input smb_highlights_inc_input {
  id: bigint
  object_id: bigint
  org_unit_id: bigint
}

"""
input type for inserting data into table "smb.highlights"
"""
input smb_highlights_insert_input {
  id: bigint
  object: smb_objects_obj_rel_insert_input
  object_id: bigint
  org_unit: smb_org_unit_obj_rel_insert_input
  org_unit_id: bigint
}

"""
aggregate max on columns
"""
type smb_highlights_max_fields {
  id: bigint
  object_id: bigint
  org_unit_id: bigint
}

"""
order by max() on columns of table "smb.highlights"
"""
input smb_highlights_max_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
aggregate min on columns
"""
type smb_highlights_min_fields {
  id: bigint
  object_id: bigint
  org_unit_id: bigint
}

"""
order by min() on columns of table "smb.highlights"
"""
input smb_highlights_min_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
response of any mutation on the table "smb.highlights"
"""
type smb_highlights_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_highlights!]!
}

"""
on_conflict condition type for table "smb.highlights"
"""
input smb_highlights_on_conflict {
  constraint: smb_highlights_constraint!
  update_columns: [smb_highlights_update_column!]! = []
  where: smb_highlights_bool_exp
}

"""
Ordering options when selecting data from "smb.highlights".
"""
input smb_highlights_order_by {
  id: order_by
  object: smb_objects_order_by
  object_id: order_by
  org_unit: smb_org_unit_order_by
  org_unit_id: order_by
}

"""
primary key columns input for table: smb.highlights
"""
input smb_highlights_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.highlights"
"""
enum smb_highlights_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  org_unit_id
}

"""
input type for updating data in table "smb.highlights"
"""
input smb_highlights_set_input {
  id: bigint
  object_id: bigint
  org_unit_id: bigint
}

"""
aggregate stddev on columns
"""
type smb_highlights_stddev_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by stddev() on columns of table "smb.highlights"
"""
input smb_highlights_stddev_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_highlights_stddev_pop_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by stddev_pop() on columns of table "smb.highlights"
"""
input smb_highlights_stddev_pop_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_highlights_stddev_samp_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by stddev_samp() on columns of table "smb.highlights"
"""
input smb_highlights_stddev_samp_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
Streaming cursor of the table "smb_highlights"
"""
input smb_highlights_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_highlights_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_highlights_stream_cursor_value_input {
  id: bigint
  object_id: bigint
  org_unit_id: bigint
}

"""
aggregate sum on columns
"""
type smb_highlights_sum_fields {
  id: bigint
  object_id: bigint
  org_unit_id: bigint
}

"""
order by sum() on columns of table "smb.highlights"
"""
input smb_highlights_sum_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
update columns of table "smb.highlights"
"""
enum smb_highlights_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  org_unit_id
}

input smb_highlights_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_highlights_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_highlights_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_highlights_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_highlights_var_pop_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by var_pop() on columns of table "smb.highlights"
"""
input smb_highlights_var_pop_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_highlights_var_samp_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by var_samp() on columns of table "smb.highlights"
"""
input smb_highlights_var_samp_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
aggregate variance on columns
"""
type smb_highlights_variance_fields {
  id: Float
  object_id: Float
  org_unit_id: Float
}

"""
order by variance() on columns of table "smb.highlights"
"""
input smb_highlights_variance_order_by {
  id: order_by
  object_id: order_by
  org_unit_id: order_by
}

"""
Attribute keys that should be ignored during import from MDS
"""
type smb_ignoreable_keys {
  id: bigint!
  key: String!
}

"""
aggregated selection of "smb.ignoreable_keys"
"""
type smb_ignoreable_keys_aggregate {
  aggregate: smb_ignoreable_keys_aggregate_fields
  nodes: [smb_ignoreable_keys!]!
}

"""
aggregate fields of "smb.ignoreable_keys"
"""
type smb_ignoreable_keys_aggregate_fields {
  avg: smb_ignoreable_keys_avg_fields
  count(columns: [smb_ignoreable_keys_select_column!], distinct: Boolean): Int!
  max: smb_ignoreable_keys_max_fields
  min: smb_ignoreable_keys_min_fields
  stddev: smb_ignoreable_keys_stddev_fields
  stddev_pop: smb_ignoreable_keys_stddev_pop_fields
  stddev_samp: smb_ignoreable_keys_stddev_samp_fields
  sum: smb_ignoreable_keys_sum_fields
  var_pop: smb_ignoreable_keys_var_pop_fields
  var_samp: smb_ignoreable_keys_var_samp_fields
  variance: smb_ignoreable_keys_variance_fields
}

"""
aggregate avg on columns
"""
type smb_ignoreable_keys_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.ignoreable_keys". All fields are combined with a logical 'AND'.
"""
input smb_ignoreable_keys_bool_exp {
  _and: [smb_ignoreable_keys_bool_exp!]
  _not: smb_ignoreable_keys_bool_exp
  _or: [smb_ignoreable_keys_bool_exp!]
  id: bigint_comparison_exp
  key: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.ignoreable_keys"
"""
enum smb_ignoreable_keys_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  ignoreable_keys_key_ukey
  """
  unique or primary key constraint on columns "id"
  """
  ignoreable_keys_pkey
}

"""
input type for incrementing numeric columns in table "smb.ignoreable_keys"
"""
input smb_ignoreable_keys_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.ignoreable_keys"
"""
input smb_ignoreable_keys_insert_input {
  id: bigint
  key: String
}

"""
aggregate max on columns
"""
type smb_ignoreable_keys_max_fields {
  id: bigint
  key: String
}

"""
aggregate min on columns
"""
type smb_ignoreable_keys_min_fields {
  id: bigint
  key: String
}

"""
response of any mutation on the table "smb.ignoreable_keys"
"""
type smb_ignoreable_keys_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_ignoreable_keys!]!
}

"""
on_conflict condition type for table "smb.ignoreable_keys"
"""
input smb_ignoreable_keys_on_conflict {
  constraint: smb_ignoreable_keys_constraint!
  update_columns: [smb_ignoreable_keys_update_column!]! = []
  where: smb_ignoreable_keys_bool_exp
}

"""
Ordering options when selecting data from "smb.ignoreable_keys".
"""
input smb_ignoreable_keys_order_by {
  id: order_by
  key: order_by
}

"""
primary key columns input for table: smb.ignoreable_keys
"""
input smb_ignoreable_keys_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.ignoreable_keys"
"""
enum smb_ignoreable_keys_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  key
}

"""
input type for updating data in table "smb.ignoreable_keys"
"""
input smb_ignoreable_keys_set_input {
  id: bigint
  key: String
}

"""
aggregate stddev on columns
"""
type smb_ignoreable_keys_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_ignoreable_keys_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_ignoreable_keys_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_ignoreable_keys"
"""
input smb_ignoreable_keys_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_ignoreable_keys_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_ignoreable_keys_stream_cursor_value_input {
  id: bigint
  key: String
}

"""
aggregate sum on columns
"""
type smb_ignoreable_keys_sum_fields {
  id: bigint
}

"""
update columns of table "smb.ignoreable_keys"
"""
enum smb_ignoreable_keys_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  key
}

input smb_ignoreable_keys_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_ignoreable_keys_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_ignoreable_keys_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_ignoreable_keys_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_ignoreable_keys_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_ignoreable_keys_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_ignoreable_keys_variance_fields {
  id: Float
}

"""
Multilanguage support
"""
type smb_language {
  id: bigint!
  lang: String!
  sync_enabled: Boolean
}

"""
aggregated selection of "smb.language"
"""
type smb_language_aggregate {
  aggregate: smb_language_aggregate_fields
  nodes: [smb_language!]!
}

"""
aggregate fields of "smb.language"
"""
type smb_language_aggregate_fields {
  avg: smb_language_avg_fields
  count(columns: [smb_language_select_column!], distinct: Boolean): Int!
  max: smb_language_max_fields
  min: smb_language_min_fields
  stddev: smb_language_stddev_fields
  stddev_pop: smb_language_stddev_pop_fields
  stddev_samp: smb_language_stddev_samp_fields
  sum: smb_language_sum_fields
  var_pop: smb_language_var_pop_fields
  var_samp: smb_language_var_samp_fields
  variance: smb_language_variance_fields
}

"""
aggregate avg on columns
"""
type smb_language_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.language". All fields are combined with a logical 'AND'.
"""
input smb_language_bool_exp {
  _and: [smb_language_bool_exp!]
  _not: smb_language_bool_exp
  _or: [smb_language_bool_exp!]
  id: bigint_comparison_exp
  lang: String_comparison_exp
  sync_enabled: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "smb.language"
"""
enum smb_language_constraint {
  """
  unique or primary key constraint on columns "lang"
  """
  language_lang_ukey
  """
  unique or primary key constraint on columns "id"
  """
  language_pkey
}

"""
input type for incrementing numeric columns in table "smb.language"
"""
input smb_language_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.language"
"""
input smb_language_insert_input {
  id: bigint
  lang: String
  sync_enabled: Boolean
}

"""
aggregate max on columns
"""
type smb_language_max_fields {
  id: bigint
  lang: String
}

"""
aggregate min on columns
"""
type smb_language_min_fields {
  id: bigint
  lang: String
}

"""
response of any mutation on the table "smb.language"
"""
type smb_language_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_language!]!
}

"""
input type for inserting object relation for remote table "smb.language"
"""
input smb_language_obj_rel_insert_input {
  data: smb_language_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_language_on_conflict
}

"""
on_conflict condition type for table "smb.language"
"""
input smb_language_on_conflict {
  constraint: smb_language_constraint!
  update_columns: [smb_language_update_column!]! = []
  where: smb_language_bool_exp
}

"""
Ordering options when selecting data from "smb.language".
"""
input smb_language_order_by {
  id: order_by
  lang: order_by
  sync_enabled: order_by
}

"""
primary key columns input for table: smb.language
"""
input smb_language_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.language"
"""
enum smb_language_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  lang
  """
  column name
  """
  sync_enabled
}

"""
input type for updating data in table "smb.language"
"""
input smb_language_set_input {
  id: bigint
  lang: String
  sync_enabled: Boolean
}

"""
aggregate stddev on columns
"""
type smb_language_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_language_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_language_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_language"
"""
input smb_language_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_language_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_language_stream_cursor_value_input {
  id: bigint
  lang: String
  sync_enabled: Boolean
}

"""
aggregate sum on columns
"""
type smb_language_sum_fields {
  id: bigint
}

"""
update columns of table "smb.language"
"""
enum smb_language_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  lang
  """
  column name
  """
  sync_enabled
}

input smb_language_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_language_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_language_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_language_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_language_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_language_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_language_variance_fields {
  id: Float
}

"""
License deeds for attachments
"""
type smb_licenses {
  """
  An array relationship
  """
  i18n("""distinct select on columns""" distinct_on: [smb_licenses_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_translation_order_by!], """filter the rows returned""" where: smb_licenses_translation_bool_exp): [smb_licenses_translation!]!
  """
  An aggregate relationship
  """
  i18n_aggregate("""distinct select on columns""" distinct_on: [smb_licenses_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_translation_order_by!], """filter the rows returned""" where: smb_licenses_translation_bool_exp): smb_licenses_translation_aggregate!
  id: bigint!
  key: String!
  link: String
}

"""
aggregated selection of "smb.licenses"
"""
type smb_licenses_aggregate {
  aggregate: smb_licenses_aggregate_fields
  nodes: [smb_licenses!]!
}

"""
aggregate fields of "smb.licenses"
"""
type smb_licenses_aggregate_fields {
  avg: smb_licenses_avg_fields
  count(columns: [smb_licenses_select_column!], distinct: Boolean): Int!
  max: smb_licenses_max_fields
  min: smb_licenses_min_fields
  stddev: smb_licenses_stddev_fields
  stddev_pop: smb_licenses_stddev_pop_fields
  stddev_samp: smb_licenses_stddev_samp_fields
  sum: smb_licenses_sum_fields
  var_pop: smb_licenses_var_pop_fields
  var_samp: smb_licenses_var_samp_fields
  variance: smb_licenses_variance_fields
}

"""
aggregate avg on columns
"""
type smb_licenses_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.licenses". All fields are combined with a logical 'AND'.
"""
input smb_licenses_bool_exp {
  _and: [smb_licenses_bool_exp!]
  _not: smb_licenses_bool_exp
  _or: [smb_licenses_bool_exp!]
  i18n: smb_licenses_translation_bool_exp
  i18n_aggregate: smb_licenses_translation_aggregate_bool_exp
  id: bigint_comparison_exp
  key: String_comparison_exp
  link: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.licenses"
"""
enum smb_licenses_constraint {
  """
  unique or primary key constraint on columns "key"
  """
  licenses_key_ukey
  """
  unique or primary key constraint on columns "id"
  """
  licenses_pkey
}

"""
input type for incrementing numeric columns in table "smb.licenses"
"""
input smb_licenses_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.licenses"
"""
input smb_licenses_insert_input {
  i18n: smb_licenses_translation_arr_rel_insert_input
  id: bigint
  key: String
  link: String
}

"""
aggregate max on columns
"""
type smb_licenses_max_fields {
  id: bigint
  key: String
  link: String
}

"""
aggregate min on columns
"""
type smb_licenses_min_fields {
  id: bigint
  key: String
  link: String
}

"""
response of any mutation on the table "smb.licenses"
"""
type smb_licenses_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_licenses!]!
}

"""
input type for inserting object relation for remote table "smb.licenses"
"""
input smb_licenses_obj_rel_insert_input {
  data: smb_licenses_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_licenses_on_conflict
}

"""
on_conflict condition type for table "smb.licenses"
"""
input smb_licenses_on_conflict {
  constraint: smb_licenses_constraint!
  update_columns: [smb_licenses_update_column!]! = []
  where: smb_licenses_bool_exp
}

"""
Ordering options when selecting data from "smb.licenses".
"""
input smb_licenses_order_by {
  i18n_aggregate: smb_licenses_translation_aggregate_order_by
  id: order_by
  key: order_by
  link: order_by
}

"""
primary key columns input for table: smb.licenses
"""
input smb_licenses_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.licenses"
"""
enum smb_licenses_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  key
  """
  column name
  """
  link
}

"""
input type for updating data in table "smb.licenses"
"""
input smb_licenses_set_input {
  id: bigint
  key: String
  link: String
}

"""
aggregate stddev on columns
"""
type smb_licenses_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_licenses_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_licenses_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_licenses"
"""
input smb_licenses_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_licenses_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_licenses_stream_cursor_value_input {
  id: bigint
  key: String
  link: String
}

"""
aggregate sum on columns
"""
type smb_licenses_sum_fields {
  id: bigint
}

"""
columns and relationships of "smb.licenses_translation"
"""
type smb_licenses_translation {
  content: String!
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  license_id: bigint!
  license_text: String
}

"""
aggregated selection of "smb.licenses_translation"
"""
type smb_licenses_translation_aggregate {
  aggregate: smb_licenses_translation_aggregate_fields
  nodes: [smb_licenses_translation!]!
}

input smb_licenses_translation_aggregate_bool_exp {
  count: smb_licenses_translation_aggregate_bool_exp_count
}

input smb_licenses_translation_aggregate_bool_exp_count {
  arguments: [smb_licenses_translation_select_column!]
  distinct: Boolean
  filter: smb_licenses_translation_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.licenses_translation"
"""
type smb_licenses_translation_aggregate_fields {
  avg: smb_licenses_translation_avg_fields
  count(columns: [smb_licenses_translation_select_column!], distinct: Boolean): Int!
  max: smb_licenses_translation_max_fields
  min: smb_licenses_translation_min_fields
  stddev: smb_licenses_translation_stddev_fields
  stddev_pop: smb_licenses_translation_stddev_pop_fields
  stddev_samp: smb_licenses_translation_stddev_samp_fields
  sum: smb_licenses_translation_sum_fields
  var_pop: smb_licenses_translation_var_pop_fields
  var_samp: smb_licenses_translation_var_samp_fields
  variance: smb_licenses_translation_variance_fields
}

"""
order by aggregate values of table "smb.licenses_translation"
"""
input smb_licenses_translation_aggregate_order_by {
  avg: smb_licenses_translation_avg_order_by
  count: order_by
  max: smb_licenses_translation_max_order_by
  min: smb_licenses_translation_min_order_by
  stddev: smb_licenses_translation_stddev_order_by
  stddev_pop: smb_licenses_translation_stddev_pop_order_by
  stddev_samp: smb_licenses_translation_stddev_samp_order_by
  sum: smb_licenses_translation_sum_order_by
  var_pop: smb_licenses_translation_var_pop_order_by
  var_samp: smb_licenses_translation_var_samp_order_by
  variance: smb_licenses_translation_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.licenses_translation"
"""
input smb_licenses_translation_arr_rel_insert_input {
  data: [smb_licenses_translation_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_licenses_translation_on_conflict
}

"""
aggregate avg on columns
"""
type smb_licenses_translation_avg_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by avg() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_avg_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.licenses_translation". All fields are combined with a logical 'AND'.
"""
input smb_licenses_translation_bool_exp {
  _and: [smb_licenses_translation_bool_exp!]
  _not: smb_licenses_translation_bool_exp
  _or: [smb_licenses_translation_bool_exp!]
  content: String_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  license_id: bigint_comparison_exp
  license_text: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.licenses_translation"
"""
enum smb_licenses_translation_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  licenses_translation_pkey
}

"""
input type for incrementing numeric columns in table "smb.licenses_translation"
"""
input smb_licenses_translation_inc_input {
  id: bigint
  language_id: bigint
  license_id: bigint
}

"""
input type for inserting data into table "smb.licenses_translation"
"""
input smb_licenses_translation_insert_input {
  content: String
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  license_id: bigint
  license_text: String
}

"""
aggregate max on columns
"""
type smb_licenses_translation_max_fields {
  content: String
  id: bigint
  language_id: bigint
  license_id: bigint
  license_text: String
}

"""
order by max() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_max_order_by {
  content: order_by
  id: order_by
  language_id: order_by
  license_id: order_by
  license_text: order_by
}

"""
aggregate min on columns
"""
type smb_licenses_translation_min_fields {
  content: String
  id: bigint
  language_id: bigint
  license_id: bigint
  license_text: String
}

"""
order by min() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_min_order_by {
  content: order_by
  id: order_by
  language_id: order_by
  license_id: order_by
  license_text: order_by
}

"""
response of any mutation on the table "smb.licenses_translation"
"""
type smb_licenses_translation_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_licenses_translation!]!
}

"""
on_conflict condition type for table "smb.licenses_translation"
"""
input smb_licenses_translation_on_conflict {
  constraint: smb_licenses_translation_constraint!
  update_columns: [smb_licenses_translation_update_column!]! = []
  where: smb_licenses_translation_bool_exp
}

"""
Ordering options when selecting data from "smb.licenses_translation".
"""
input smb_licenses_translation_order_by {
  content: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  license_id: order_by
  license_text: order_by
}

"""
primary key columns input for table: smb.licenses_translation
"""
input smb_licenses_translation_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.licenses_translation"
"""
enum smb_licenses_translation_select_column {
  """
  column name
  """
  content
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  license_id
  """
  column name
  """
  license_text
}

"""
input type for updating data in table "smb.licenses_translation"
"""
input smb_licenses_translation_set_input {
  content: String
  id: bigint
  language_id: bigint
  license_id: bigint
  license_text: String
}

"""
aggregate stddev on columns
"""
type smb_licenses_translation_stddev_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by stddev() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_stddev_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_licenses_translation_stddev_pop_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by stddev_pop() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_stddev_pop_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_licenses_translation_stddev_samp_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by stddev_samp() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_stddev_samp_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
Streaming cursor of the table "smb_licenses_translation"
"""
input smb_licenses_translation_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_licenses_translation_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_licenses_translation_stream_cursor_value_input {
  content: String
  id: bigint
  language_id: bigint
  license_id: bigint
  license_text: String
}

"""
aggregate sum on columns
"""
type smb_licenses_translation_sum_fields {
  id: bigint
  language_id: bigint
  license_id: bigint
}

"""
order by sum() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_sum_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
update columns of table "smb.licenses_translation"
"""
enum smb_licenses_translation_update_column {
  """
  column name
  """
  content
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  license_id
  """
  column name
  """
  license_text
}

input smb_licenses_translation_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_licenses_translation_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_licenses_translation_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_licenses_translation_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_licenses_translation_var_pop_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by var_pop() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_var_pop_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_licenses_translation_var_samp_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by var_samp() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_var_samp_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
aggregate variance on columns
"""
type smb_licenses_translation_variance_fields {
  id: Float
  language_id: Float
  license_id: Float
}

"""
order by variance() on columns of table "smb.licenses_translation"
"""
input smb_licenses_translation_variance_order_by {
  id: order_by
  language_id: order_by
  license_id: order_by
}

"""
update columns of table "smb.licenses"
"""
enum smb_licenses_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  key
  """
  column name
  """
  link
}

input smb_licenses_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_licenses_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_licenses_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_licenses_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_licenses_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_licenses_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_licenses_variance_fields {
  id: Float
}

"""
materials and techniques collected from repeatable group items
"""
type smb_material_references {
  details: String
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  material_item_id: bigint!
  object_id: bigint!
  sequence: Int!
  """
  An object relationship
  """
  specific_type_voc: smb_thesaurus
  specific_type_voc_id: bigint
  """
  An object relationship
  """
  type_voc: smb_thesaurus
  type_voc_id: bigint
}

"""
aggregated selection of "smb.material_references"
"""
type smb_material_references_aggregate {
  aggregate: smb_material_references_aggregate_fields
  nodes: [smb_material_references!]!
}

input smb_material_references_aggregate_bool_exp {
  count: smb_material_references_aggregate_bool_exp_count
}

input smb_material_references_aggregate_bool_exp_count {
  arguments: [smb_material_references_select_column!]
  distinct: Boolean
  filter: smb_material_references_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.material_references"
"""
type smb_material_references_aggregate_fields {
  avg: smb_material_references_avg_fields
  count(columns: [smb_material_references_select_column!], distinct: Boolean): Int!
  max: smb_material_references_max_fields
  min: smb_material_references_min_fields
  stddev: smb_material_references_stddev_fields
  stddev_pop: smb_material_references_stddev_pop_fields
  stddev_samp: smb_material_references_stddev_samp_fields
  sum: smb_material_references_sum_fields
  var_pop: smb_material_references_var_pop_fields
  var_samp: smb_material_references_var_samp_fields
  variance: smb_material_references_variance_fields
}

"""
order by aggregate values of table "smb.material_references"
"""
input smb_material_references_aggregate_order_by {
  avg: smb_material_references_avg_order_by
  count: order_by
  max: smb_material_references_max_order_by
  min: smb_material_references_min_order_by
  stddev: smb_material_references_stddev_order_by
  stddev_pop: smb_material_references_stddev_pop_order_by
  stddev_samp: smb_material_references_stddev_samp_order_by
  sum: smb_material_references_sum_order_by
  var_pop: smb_material_references_var_pop_order_by
  var_samp: smb_material_references_var_samp_order_by
  variance: smb_material_references_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.material_references"
"""
input smb_material_references_arr_rel_insert_input {
  data: [smb_material_references_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_material_references_on_conflict
}

"""
aggregate avg on columns
"""
type smb_material_references_avg_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by avg() on columns of table "smb.material_references"
"""
input smb_material_references_avg_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.material_references". All fields are combined with a logical 'AND'.
"""
input smb_material_references_bool_exp {
  _and: [smb_material_references_bool_exp!]
  _not: smb_material_references_bool_exp
  _or: [smb_material_references_bool_exp!]
  details: String_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  material_item_id: bigint_comparison_exp
  object_id: bigint_comparison_exp
  sequence: Int_comparison_exp
  specific_type_voc: smb_thesaurus_bool_exp
  specific_type_voc_id: bigint_comparison_exp
  type_voc: smb_thesaurus_bool_exp
  type_voc_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "smb.material_references"
"""
enum smb_material_references_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  material_references_pkey
}

"""
input type for incrementing numeric columns in table "smb.material_references"
"""
input smb_material_references_inc_input {
  id: bigint
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc_id: bigint
  type_voc_id: bigint
}

"""
input type for inserting data into table "smb.material_references"
"""
input smb_material_references_insert_input {
  details: String
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc: smb_thesaurus_obj_rel_insert_input
  specific_type_voc_id: bigint
  type_voc: smb_thesaurus_obj_rel_insert_input
  type_voc_id: bigint
}

"""
aggregate max on columns
"""
type smb_material_references_max_fields {
  details: String
  id: bigint
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc_id: bigint
  type_voc_id: bigint
}

"""
order by max() on columns of table "smb.material_references"
"""
input smb_material_references_max_order_by {
  details: order_by
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
aggregate min on columns
"""
type smb_material_references_min_fields {
  details: String
  id: bigint
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc_id: bigint
  type_voc_id: bigint
}

"""
order by min() on columns of table "smb.material_references"
"""
input smb_material_references_min_order_by {
  details: order_by
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
response of any mutation on the table "smb.material_references"
"""
type smb_material_references_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_material_references!]!
}

"""
on_conflict condition type for table "smb.material_references"
"""
input smb_material_references_on_conflict {
  constraint: smb_material_references_constraint!
  update_columns: [smb_material_references_update_column!]! = []
  where: smb_material_references_bool_exp
}

"""
Ordering options when selecting data from "smb.material_references".
"""
input smb_material_references_order_by {
  details: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc: smb_thesaurus_order_by
  specific_type_voc_id: order_by
  type_voc: smb_thesaurus_order_by
  type_voc_id: order_by
}

"""
primary key columns input for table: smb.material_references
"""
input smb_material_references_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.material_references"
"""
enum smb_material_references_select_column {
  """
  column name
  """
  details
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  material_item_id
  """
  column name
  """
  object_id
  """
  column name
  """
  sequence
  """
  column name
  """
  specific_type_voc_id
  """
  column name
  """
  type_voc_id
}

"""
input type for updating data in table "smb.material_references"
"""
input smb_material_references_set_input {
  details: String
  id: bigint
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc_id: bigint
  type_voc_id: bigint
}

"""
aggregate stddev on columns
"""
type smb_material_references_stddev_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by stddev() on columns of table "smb.material_references"
"""
input smb_material_references_stddev_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_material_references_stddev_pop_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by stddev_pop() on columns of table "smb.material_references"
"""
input smb_material_references_stddev_pop_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_material_references_stddev_samp_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by stddev_samp() on columns of table "smb.material_references"
"""
input smb_material_references_stddev_samp_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
Streaming cursor of the table "smb_material_references"
"""
input smb_material_references_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_material_references_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_material_references_stream_cursor_value_input {
  details: String
  id: bigint
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc_id: bigint
  type_voc_id: bigint
}

"""
aggregate sum on columns
"""
type smb_material_references_sum_fields {
  id: bigint
  language_id: bigint
  material_item_id: bigint
  object_id: bigint
  sequence: Int
  specific_type_voc_id: bigint
  type_voc_id: bigint
}

"""
order by sum() on columns of table "smb.material_references"
"""
input smb_material_references_sum_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
update columns of table "smb.material_references"
"""
enum smb_material_references_update_column {
  """
  column name
  """
  details
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  material_item_id
  """
  column name
  """
  object_id
  """
  column name
  """
  sequence
  """
  column name
  """
  specific_type_voc_id
  """
  column name
  """
  type_voc_id
}

input smb_material_references_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_material_references_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_material_references_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_material_references_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_material_references_var_pop_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by var_pop() on columns of table "smb.material_references"
"""
input smb_material_references_var_pop_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_material_references_var_samp_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by var_samp() on columns of table "smb.material_references"
"""
input smb_material_references_var_samp_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
aggregate variance on columns
"""
type smb_material_references_variance_fields {
  id: Float
  language_id: Float
  material_item_id: Float
  object_id: Float
  sequence: Float
  specific_type_voc_id: Float
  type_voc_id: Float
}

"""
order by variance() on columns of table "smb.material_references"
"""
input smb_material_references_variance_order_by {
  id: order_by
  language_id: order_by
  material_item_id: order_by
  object_id: order_by
  sequence: order_by
  specific_type_voc_id: order_by
  type_voc_id: order_by
}

"""
SMB objects fetched from MDS
"""
type smb_objects {
  """
  An array relationship
  """
  attachments("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): [smb_attachments!]!
  """
  An aggregate relationship
  """
  attachments_aggregate("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): smb_attachments_aggregate!
  """
  An array relationship
  """
  attributes("""distinct select on columns""" distinct_on: [smb_attribute_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_translations_order_by!], """filter the rows returned""" where: smb_attribute_translations_bool_exp): [smb_attribute_translations!]!
  """
  An aggregate relationship
  """
  attributes_aggregate("""distinct select on columns""" distinct_on: [smb_attribute_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_translations_order_by!], """filter the rows returned""" where: smb_attribute_translations_bool_exp): smb_attribute_translations_aggregate!
  collectionKey: String
  compilation: String
  created_at: timestamptz!
  """
  An array relationship
  """
  cultural_references("""distinct select on columns""" distinct_on: [smb_cultural_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_cultural_references_order_by!], """filter the rows returned""" where: smb_cultural_references_bool_exp): [smb_cultural_references!]!
  """
  An aggregate relationship
  """
  cultural_references_aggregate("""distinct select on columns""" distinct_on: [smb_cultural_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_cultural_references_order_by!], """filter the rows returned""" where: smb_cultural_references_bool_exp): smb_cultural_references_aggregate!
  exhibition_space: String
  """
  An array relationship
  """
  exhibitions("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): [smb_exhibitions_objects!]!
  """
  An aggregate relationship
  """
  exhibitions_aggregate("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): smb_exhibitions_objects_aggregate!
  """
  An array relationship
  """
  geographical_references("""distinct select on columns""" distinct_on: [smb_geographical_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_geographical_references_order_by!], """filter the rows returned""" where: smb_geographical_references_bool_exp): [smb_geographical_references!]!
  """
  An aggregate relationship
  """
  geographical_references_aggregate("""distinct select on columns""" distinct_on: [smb_geographical_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_geographical_references_order_by!], """filter the rows returned""" where: smb_geographical_references_bool_exp): smb_geographical_references_aggregate!
  """
  An array relationship
  """
  highlights("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): [smb_highlights!]!
  """
  An aggregate relationship
  """
  highlights_aggregate("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): smb_highlights_aggregate!
  id: bigint!
  """
  An array relationship
  """
  involved_parties("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): [smb_persons_objects!]!
  """
  An aggregate relationship
  """
  involved_parties_aggregate("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): smb_persons_objects_aggregate!
  """
  An object relationship
  """
  location: smb_thesaurus
  location_voc_id: bigint
  """
  An array relationship
  """
  materials_and_techniques("""distinct select on columns""" distinct_on: [smb_material_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_material_references_order_by!], """filter the rows returned""" where: smb_material_references_bool_exp): [smb_material_references!]!
  """
  An aggregate relationship
  """
  materials_and_techniques_aggregate("""distinct select on columns""" distinct_on: [smb_material_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_material_references_order_by!], """filter the rows returned""" where: smb_material_references_bool_exp): smb_material_references_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.objects"
"""
type smb_objects_aggregate {
  aggregate: smb_objects_aggregate_fields
  nodes: [smb_objects!]!
}

"""
aggregate fields of "smb.objects"
"""
type smb_objects_aggregate_fields {
  avg: smb_objects_avg_fields
  count(columns: [smb_objects_select_column!], distinct: Boolean): Int!
  max: smb_objects_max_fields
  min: smb_objects_min_fields
  stddev: smb_objects_stddev_fields
  stddev_pop: smb_objects_stddev_pop_fields
  stddev_samp: smb_objects_stddev_samp_fields
  sum: smb_objects_sum_fields
  var_pop: smb_objects_var_pop_fields
  var_samp: smb_objects_var_samp_fields
  variance: smb_objects_variance_fields
}

"""
aggregate avg on columns
"""
type smb_objects_avg_fields {
  id: Float
  location_voc_id: Float
}

"""
Boolean expression to filter rows from the table "smb.objects". All fields are combined with a logical 'AND'.
"""
input smb_objects_bool_exp {
  _and: [smb_objects_bool_exp!]
  _not: smb_objects_bool_exp
  _or: [smb_objects_bool_exp!]
  attachments: smb_attachments_bool_exp
  attachments_aggregate: smb_attachments_aggregate_bool_exp
  attributes: smb_attribute_translations_bool_exp
  attributes_aggregate: smb_attribute_translations_aggregate_bool_exp
  collectionKey: String_comparison_exp
  compilation: String_comparison_exp
  created_at: timestamptz_comparison_exp
  cultural_references: smb_cultural_references_bool_exp
  cultural_references_aggregate: smb_cultural_references_aggregate_bool_exp
  exhibition_space: String_comparison_exp
  exhibitions: smb_exhibitions_objects_bool_exp
  exhibitions_aggregate: smb_exhibitions_objects_aggregate_bool_exp
  geographical_references: smb_geographical_references_bool_exp
  geographical_references_aggregate: smb_geographical_references_aggregate_bool_exp
  highlights: smb_highlights_bool_exp
  highlights_aggregate: smb_highlights_aggregate_bool_exp
  id: bigint_comparison_exp
  involved_parties: smb_persons_objects_bool_exp
  involved_parties_aggregate: smb_persons_objects_aggregate_bool_exp
  location: smb_thesaurus_bool_exp
  location_voc_id: bigint_comparison_exp
  materials_and_techniques: smb_material_references_bool_exp
  materials_and_techniques_aggregate: smb_material_references_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.objects"
"""
enum smb_objects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  objects_pkey
}

"""
input type for incrementing numeric columns in table "smb.objects"
"""
input smb_objects_inc_input {
  id: bigint
  location_voc_id: bigint
}

"""
input type for inserting data into table "smb.objects"
"""
input smb_objects_insert_input {
  attachments: smb_attachments_arr_rel_insert_input
  attributes: smb_attribute_translations_arr_rel_insert_input
  created_at: timestamptz
  cultural_references: smb_cultural_references_arr_rel_insert_input
  exhibition_space: String
  exhibitions: smb_exhibitions_objects_arr_rel_insert_input
  geographical_references: smb_geographical_references_arr_rel_insert_input
  highlights: smb_highlights_arr_rel_insert_input
  id: bigint
  involved_parties: smb_persons_objects_arr_rel_insert_input
  location: smb_thesaurus_obj_rel_insert_input
  location_voc_id: bigint
  materials_and_techniques: smb_material_references_arr_rel_insert_input
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_objects_max_fields {
  collectionKey: String
  compilation: String
  created_at: timestamptz
  exhibition_space: String
  id: bigint
  location_voc_id: bigint
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type smb_objects_min_fields {
  collectionKey: String
  compilation: String
  created_at: timestamptz
  exhibition_space: String
  id: bigint
  location_voc_id: bigint
  updated_at: timestamptz
}

"""
response of any mutation on the table "smb.objects"
"""
type smb_objects_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_objects!]!
}

"""
input type for inserting object relation for remote table "smb.objects"
"""
input smb_objects_obj_rel_insert_input {
  data: smb_objects_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_objects_on_conflict
}

"""
on_conflict condition type for table "smb.objects"
"""
input smb_objects_on_conflict {
  constraint: smb_objects_constraint!
  update_columns: [smb_objects_update_column!]! = []
  where: smb_objects_bool_exp
}

"""
Ordering options when selecting data from "smb.objects".
"""
input smb_objects_order_by {
  attachments_aggregate: smb_attachments_aggregate_order_by
  attributes_aggregate: smb_attribute_translations_aggregate_order_by
  collectionKey: order_by
  compilation: order_by
  created_at: order_by
  cultural_references_aggregate: smb_cultural_references_aggregate_order_by
  exhibition_space: order_by
  exhibitions_aggregate: smb_exhibitions_objects_aggregate_order_by
  geographical_references_aggregate: smb_geographical_references_aggregate_order_by
  highlights_aggregate: smb_highlights_aggregate_order_by
  id: order_by
  involved_parties_aggregate: smb_persons_objects_aggregate_order_by
  location: smb_thesaurus_order_by
  location_voc_id: order_by
  materials_and_techniques_aggregate: smb_material_references_aggregate_order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.objects
"""
input smb_objects_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.objects"
"""
enum smb_objects_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  exhibition_space
  """
  column name
  """
  id
  """
  column name
  """
  location_voc_id
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.objects"
"""
input smb_objects_set_input {
  created_at: timestamptz
  exhibition_space: String
  id: bigint
  location_voc_id: bigint
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_objects_stddev_fields {
  id: Float
  location_voc_id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_objects_stddev_pop_fields {
  id: Float
  location_voc_id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_objects_stddev_samp_fields {
  id: Float
  location_voc_id: Float
}

"""
Streaming cursor of the table "smb_objects"
"""
input smb_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_objects_stream_cursor_value_input {
  created_at: timestamptz
  exhibition_space: String
  id: bigint
  location_voc_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_objects_sum_fields {
  id: bigint
  location_voc_id: bigint
}

"""
update columns of table "smb.objects"
"""
enum smb_objects_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  exhibition_space
  """
  column name
  """
  id
  """
  column name
  """
  location_voc_id
  """
  column name
  """
  updated_at
}

input smb_objects_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_objects_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_objects_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_objects_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_objects_var_pop_fields {
  id: Float
  location_voc_id: Float
}

"""
aggregate var_samp on columns
"""
type smb_objects_var_samp_fields {
  id: Float
  location_voc_id: Float
}

"""
aggregate variance on columns
"""
type smb_objects_variance_fields {
  id: Float
  location_voc_id: Float
}

"""
Org-units fetched from MDS, used to group SMB objects
"""
type smb_org_unit {
  collectionKey: String
  """
  An array relationship
  """
  highlights("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): [smb_highlights!]!
  """
  An aggregate relationship
  """
  highlights_aggregate("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): smb_highlights_aggregate!
  id: bigint!
  is_compilation: Boolean
  name: String!
  """
  A computed field, executes function "smb.build_search_value_o"
  """
  searchValue: String
  title: String
}

"""
aggregated selection of "smb.org_unit"
"""
type smb_org_unit_aggregate {
  aggregate: smb_org_unit_aggregate_fields
  nodes: [smb_org_unit!]!
}

"""
aggregate fields of "smb.org_unit"
"""
type smb_org_unit_aggregate_fields {
  avg: smb_org_unit_avg_fields
  count(columns: [smb_org_unit_select_column!], distinct: Boolean): Int!
  max: smb_org_unit_max_fields
  min: smb_org_unit_min_fields
  stddev: smb_org_unit_stddev_fields
  stddev_pop: smb_org_unit_stddev_pop_fields
  stddev_samp: smb_org_unit_stddev_samp_fields
  sum: smb_org_unit_sum_fields
  var_pop: smb_org_unit_var_pop_fields
  var_samp: smb_org_unit_var_samp_fields
  variance: smb_org_unit_variance_fields
}

"""
aggregate avg on columns
"""
type smb_org_unit_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.org_unit". All fields are combined with a logical 'AND'.
"""
input smb_org_unit_bool_exp {
  _and: [smb_org_unit_bool_exp!]
  _not: smb_org_unit_bool_exp
  _or: [smb_org_unit_bool_exp!]
  collectionKey: String_comparison_exp
  highlights: smb_highlights_bool_exp
  highlights_aggregate: smb_highlights_aggregate_bool_exp
  id: bigint_comparison_exp
  is_compilation: Boolean_comparison_exp
  name: String_comparison_exp
  searchValue: String_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.org_unit"
"""
enum smb_org_unit_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  org_unit_name_ukey
  """
  unique or primary key constraint on columns "id"
  """
  org_unit_pkey
}

"""
input type for incrementing numeric columns in table "smb.org_unit"
"""
input smb_org_unit_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.org_unit"
"""
input smb_org_unit_insert_input {
  highlights: smb_highlights_arr_rel_insert_input
  id: bigint
  is_compilation: Boolean
  name: String
  title: String
}

"""
aggregate max on columns
"""
type smb_org_unit_max_fields {
  collectionKey: String
  id: bigint
  name: String
  """
  A computed field, executes function "smb.build_search_value_o"
  """
  searchValue: String
  title: String
}

"""
aggregate min on columns
"""
type smb_org_unit_min_fields {
  collectionKey: String
  id: bigint
  name: String
  """
  A computed field, executes function "smb.build_search_value_o"
  """
  searchValue: String
  title: String
}

"""
response of any mutation on the table "smb.org_unit"
"""
type smb_org_unit_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_org_unit!]!
}

"""
input type for inserting object relation for remote table "smb.org_unit"
"""
input smb_org_unit_obj_rel_insert_input {
  data: smb_org_unit_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_org_unit_on_conflict
}

"""
on_conflict condition type for table "smb.org_unit"
"""
input smb_org_unit_on_conflict {
  constraint: smb_org_unit_constraint!
  update_columns: [smb_org_unit_update_column!]! = []
  where: smb_org_unit_bool_exp
}

"""
Ordering options when selecting data from "smb.org_unit".
"""
input smb_org_unit_order_by {
  collectionKey: order_by
  highlights_aggregate: smb_highlights_aggregate_order_by
  id: order_by
  is_compilation: order_by
  name: order_by
  searchValue: order_by
  title: order_by
}

"""
primary key columns input for table: smb.org_unit
"""
input smb_org_unit_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.org_unit"
"""
enum smb_org_unit_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  is_compilation
  """
  column name
  """
  name
  """
  column name
  """
  title
}

"""
input type for updating data in table "smb.org_unit"
"""
input smb_org_unit_set_input {
  id: bigint
  is_compilation: Boolean
  name: String
  title: String
}

"""
aggregate stddev on columns
"""
type smb_org_unit_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_org_unit_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_org_unit_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_org_unit"
"""
input smb_org_unit_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_org_unit_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_org_unit_stream_cursor_value_input {
  id: bigint
  is_compilation: Boolean
  name: String
  title: String
}

"""
aggregate sum on columns
"""
type smb_org_unit_sum_fields {
  id: bigint
}

"""
update columns of table "smb.org_unit"
"""
enum smb_org_unit_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  is_compilation
  """
  column name
  """
  name
  """
  column name
  """
  title
}

input smb_org_unit_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_org_unit_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_org_unit_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_org_unit_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_org_unit_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_org_unit_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_org_unit_variance_fields {
  id: Float
}

"""
persons
"""
type smb_persons {
  created_at: timestamptz!
  date_of_birth: String
  date_of_death: String
  date_range: String
  id: bigint!
  """
  An array relationship
  """
  involved_parties("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): [smb_persons_objects!]!
  """
  An aggregate relationship
  """
  involved_parties_aggregate("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): smb_persons_objects_aggregate!
  name: String
  normdata1: String
  normdata2: String
  normdata3: String
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.persons"
"""
type smb_persons_aggregate {
  aggregate: smb_persons_aggregate_fields
  nodes: [smb_persons!]!
}

"""
aggregate fields of "smb.persons"
"""
type smb_persons_aggregate_fields {
  avg: smb_persons_avg_fields
  count(columns: [smb_persons_select_column!], distinct: Boolean): Int!
  max: smb_persons_max_fields
  min: smb_persons_min_fields
  stddev: smb_persons_stddev_fields
  stddev_pop: smb_persons_stddev_pop_fields
  stddev_samp: smb_persons_stddev_samp_fields
  sum: smb_persons_sum_fields
  var_pop: smb_persons_var_pop_fields
  var_samp: smb_persons_var_samp_fields
  variance: smb_persons_variance_fields
}

"""
aggregate avg on columns
"""
type smb_persons_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.persons". All fields are combined with a logical 'AND'.
"""
input smb_persons_bool_exp {
  _and: [smb_persons_bool_exp!]
  _not: smb_persons_bool_exp
  _or: [smb_persons_bool_exp!]
  created_at: timestamptz_comparison_exp
  date_of_birth: String_comparison_exp
  date_of_death: String_comparison_exp
  date_range: String_comparison_exp
  id: bigint_comparison_exp
  involved_parties: smb_persons_objects_bool_exp
  involved_parties_aggregate: smb_persons_objects_aggregate_bool_exp
  name: String_comparison_exp
  normdata1: String_comparison_exp
  normdata2: String_comparison_exp
  normdata3: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.persons"
"""
enum smb_persons_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  persons_pkey
}

"""
input type for incrementing numeric columns in table "smb.persons"
"""
input smb_persons_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.persons"
"""
input smb_persons_insert_input {
  created_at: timestamptz
  date_of_birth: String
  date_of_death: String
  date_range: String
  id: bigint
  involved_parties: smb_persons_objects_arr_rel_insert_input
  name: String
  normdata1: String
  normdata2: String
  normdata3: String
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_persons_max_fields {
  created_at: timestamptz
  date_of_birth: String
  date_of_death: String
  date_range: String
  id: bigint
  name: String
  normdata1: String
  normdata2: String
  normdata3: String
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type smb_persons_min_fields {
  created_at: timestamptz
  date_of_birth: String
  date_of_death: String
  date_range: String
  id: bigint
  name: String
  normdata1: String
  normdata2: String
  normdata3: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "smb.persons"
"""
type smb_persons_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_persons!]!
}

"""
input type for inserting object relation for remote table "smb.persons"
"""
input smb_persons_obj_rel_insert_input {
  data: smb_persons_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_persons_on_conflict
}

"""
involved parties; persons who are stakeholders on objects
"""
type smb_persons_objects {
  """
  An object relationship
  """
  attribution_voc: smb_thesaurus
  attribution_voc_id: bigint
  created_at: timestamptz!
  id: bigint!
  """
  An object relationship
  """
  object: smb_objects!
  object_id: bigint!
  """
  An object relationship
  """
  person: smb_persons!
  person_id: bigint!
  """
  An object relationship
  """
  role_voc: smb_thesaurus
  role_voc_id: bigint
  sequence: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.persons_objects"
"""
type smb_persons_objects_aggregate {
  aggregate: smb_persons_objects_aggregate_fields
  nodes: [smb_persons_objects!]!
}

input smb_persons_objects_aggregate_bool_exp {
  count: smb_persons_objects_aggregate_bool_exp_count
}

input smb_persons_objects_aggregate_bool_exp_count {
  arguments: [smb_persons_objects_select_column!]
  distinct: Boolean
  filter: smb_persons_objects_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.persons_objects"
"""
type smb_persons_objects_aggregate_fields {
  avg: smb_persons_objects_avg_fields
  count(columns: [smb_persons_objects_select_column!], distinct: Boolean): Int!
  max: smb_persons_objects_max_fields
  min: smb_persons_objects_min_fields
  stddev: smb_persons_objects_stddev_fields
  stddev_pop: smb_persons_objects_stddev_pop_fields
  stddev_samp: smb_persons_objects_stddev_samp_fields
  sum: smb_persons_objects_sum_fields
  var_pop: smb_persons_objects_var_pop_fields
  var_samp: smb_persons_objects_var_samp_fields
  variance: smb_persons_objects_variance_fields
}

"""
order by aggregate values of table "smb.persons_objects"
"""
input smb_persons_objects_aggregate_order_by {
  avg: smb_persons_objects_avg_order_by
  count: order_by
  max: smb_persons_objects_max_order_by
  min: smb_persons_objects_min_order_by
  stddev: smb_persons_objects_stddev_order_by
  stddev_pop: smb_persons_objects_stddev_pop_order_by
  stddev_samp: smb_persons_objects_stddev_samp_order_by
  sum: smb_persons_objects_sum_order_by
  var_pop: smb_persons_objects_var_pop_order_by
  var_samp: smb_persons_objects_var_samp_order_by
  variance: smb_persons_objects_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.persons_objects"
"""
input smb_persons_objects_arr_rel_insert_input {
  data: [smb_persons_objects_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_persons_objects_on_conflict
}

"""
aggregate avg on columns
"""
type smb_persons_objects_avg_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by avg() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_avg_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
Boolean expression to filter rows from the table "smb.persons_objects". All fields are combined with a logical 'AND'.
"""
input smb_persons_objects_bool_exp {
  _and: [smb_persons_objects_bool_exp!]
  _not: smb_persons_objects_bool_exp
  _or: [smb_persons_objects_bool_exp!]
  attribution_voc: smb_thesaurus_bool_exp
  attribution_voc_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  object: smb_objects_bool_exp
  object_id: bigint_comparison_exp
  person: smb_persons_bool_exp
  person_id: bigint_comparison_exp
  role_voc: smb_thesaurus_bool_exp
  role_voc_id: bigint_comparison_exp
  sequence: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.persons_objects"
"""
enum smb_persons_objects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  persons_objects_pkey
}

"""
input type for incrementing numeric columns in table "smb.persons_objects"
"""
input smb_persons_objects_inc_input {
  attribution_voc_id: bigint
  id: bigint
  object_id: bigint
  person_id: bigint
  role_voc_id: bigint
  sequence: Int
}

"""
input type for inserting data into table "smb.persons_objects"
"""
input smb_persons_objects_insert_input {
  attribution_voc: smb_thesaurus_obj_rel_insert_input
  attribution_voc_id: bigint
  created_at: timestamptz
  id: bigint
  object: smb_objects_obj_rel_insert_input
  object_id: bigint
  person: smb_persons_obj_rel_insert_input
  person_id: bigint
  role_voc: smb_thesaurus_obj_rel_insert_input
  role_voc_id: bigint
  sequence: Int
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_persons_objects_max_fields {
  attribution_voc_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  person_id: bigint
  role_voc_id: bigint
  sequence: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_max_order_by {
  attribution_voc_id: order_by
  created_at: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type smb_persons_objects_min_fields {
  attribution_voc_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  person_id: bigint
  role_voc_id: bigint
  sequence: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_min_order_by {
  attribution_voc_id: order_by
  created_at: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "smb.persons_objects"
"""
type smb_persons_objects_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_persons_objects!]!
}

"""
on_conflict condition type for table "smb.persons_objects"
"""
input smb_persons_objects_on_conflict {
  constraint: smb_persons_objects_constraint!
  update_columns: [smb_persons_objects_update_column!]! = []
  where: smb_persons_objects_bool_exp
}

"""
Ordering options when selecting data from "smb.persons_objects".
"""
input smb_persons_objects_order_by {
  attribution_voc: smb_thesaurus_order_by
  attribution_voc_id: order_by
  created_at: order_by
  id: order_by
  object: smb_objects_order_by
  object_id: order_by
  person: smb_persons_order_by
  person_id: order_by
  role_voc: smb_thesaurus_order_by
  role_voc_id: order_by
  sequence: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.persons_objects
"""
input smb_persons_objects_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.persons_objects"
"""
enum smb_persons_objects_select_column {
  """
  column name
  """
  attribution_voc_id
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  person_id
  """
  column name
  """
  role_voc_id
  """
  column name
  """
  sequence
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.persons_objects"
"""
input smb_persons_objects_set_input {
  attribution_voc_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  person_id: bigint
  role_voc_id: bigint
  sequence: Int
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_persons_objects_stddev_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by stddev() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_stddev_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_persons_objects_stddev_pop_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by stddev_pop() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_stddev_pop_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_persons_objects_stddev_samp_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by stddev_samp() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_stddev_samp_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
Streaming cursor of the table "smb_persons_objects"
"""
input smb_persons_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_persons_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_persons_objects_stream_cursor_value_input {
  attribution_voc_id: bigint
  created_at: timestamptz
  id: bigint
  object_id: bigint
  person_id: bigint
  role_voc_id: bigint
  sequence: Int
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_persons_objects_sum_fields {
  attribution_voc_id: bigint
  id: bigint
  object_id: bigint
  person_id: bigint
  role_voc_id: bigint
  sequence: Int
}

"""
order by sum() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_sum_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
update columns of table "smb.persons_objects"
"""
enum smb_persons_objects_update_column {
  """
  column name
  """
  attribution_voc_id
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  person_id
  """
  column name
  """
  role_voc_id
  """
  column name
  """
  sequence
  """
  column name
  """
  updated_at
}

input smb_persons_objects_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_persons_objects_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_persons_objects_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_persons_objects_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_persons_objects_var_pop_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by var_pop() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_var_pop_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
aggregate var_samp on columns
"""
type smb_persons_objects_var_samp_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by var_samp() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_var_samp_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
aggregate variance on columns
"""
type smb_persons_objects_variance_fields {
  attribution_voc_id: Float
  id: Float
  object_id: Float
  person_id: Float
  role_voc_id: Float
  sequence: Float
}

"""
order by variance() on columns of table "smb.persons_objects"
"""
input smb_persons_objects_variance_order_by {
  attribution_voc_id: order_by
  id: order_by
  object_id: order_by
  person_id: order_by
  role_voc_id: order_by
  sequence: order_by
}

"""
on_conflict condition type for table "smb.persons"
"""
input smb_persons_on_conflict {
  constraint: smb_persons_constraint!
  update_columns: [smb_persons_update_column!]! = []
  where: smb_persons_bool_exp
}

"""
Ordering options when selecting data from "smb.persons".
"""
input smb_persons_order_by {
  created_at: order_by
  date_of_birth: order_by
  date_of_death: order_by
  date_range: order_by
  id: order_by
  involved_parties_aggregate: smb_persons_objects_aggregate_order_by
  name: order_by
  normdata1: order_by
  normdata2: order_by
  normdata3: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.persons
"""
input smb_persons_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.persons"
"""
enum smb_persons_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  date_of_birth
  """
  column name
  """
  date_of_death
  """
  column name
  """
  date_range
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  normdata1
  """
  column name
  """
  normdata2
  """
  column name
  """
  normdata3
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.persons"
"""
input smb_persons_set_input {
  created_at: timestamptz
  date_of_birth: String
  date_of_death: String
  date_range: String
  id: bigint
  name: String
  normdata1: String
  normdata2: String
  normdata3: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_persons_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_persons_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_persons_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_persons"
"""
input smb_persons_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_persons_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_persons_stream_cursor_value_input {
  created_at: timestamptz
  date_of_birth: String
  date_of_death: String
  date_range: String
  id: bigint
  name: String
  normdata1: String
  normdata2: String
  normdata3: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_persons_sum_fields {
  id: bigint
}

"""
update columns of table "smb.persons"
"""
enum smb_persons_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  date_of_birth
  """
  column name
  """
  date_of_death
  """
  column name
  """
  date_range
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  normdata1
  """
  column name
  """
  normdata2
  """
  column name
  """
  normdata3
  """
  column name
  """
  updated_at
}

input smb_persons_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_persons_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_persons_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_persons_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_persons_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_persons_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_persons_variance_fields {
  id: Float
}

"""
Enum type definition for STT platforms
"""
type smb_stt_platform {
  comment: String
  value: String!
}

"""
aggregated selection of "smb.stt_platform"
"""
type smb_stt_platform_aggregate {
  aggregate: smb_stt_platform_aggregate_fields
  nodes: [smb_stt_platform!]!
}

"""
aggregate fields of "smb.stt_platform"
"""
type smb_stt_platform_aggregate_fields {
  count(columns: [smb_stt_platform_select_column!], distinct: Boolean): Int!
  max: smb_stt_platform_max_fields
  min: smb_stt_platform_min_fields
}

"""
Boolean expression to filter rows from the table "smb.stt_platform". All fields are combined with a logical 'AND'.
"""
input smb_stt_platform_bool_exp {
  _and: [smb_stt_platform_bool_exp!]
  _not: smb_stt_platform_bool_exp
  _or: [smb_stt_platform_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
STT platform configuration
"""
type smb_stt_platform_config {
  created_at: timestamptz!
  enable_story_filter: Boolean
  hero_slider_limit: Int!
  hide_in_overview: Boolean
  id: bigint!
  link_template: String!
  platform_key: smb_stt_platform_enum!
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.stt_platform_config"
"""
type smb_stt_platform_config_aggregate {
  aggregate: smb_stt_platform_config_aggregate_fields
  nodes: [smb_stt_platform_config!]!
}

"""
aggregate fields of "smb.stt_platform_config"
"""
type smb_stt_platform_config_aggregate_fields {
  avg: smb_stt_platform_config_avg_fields
  count(columns: [smb_stt_platform_config_select_column!], distinct: Boolean): Int!
  max: smb_stt_platform_config_max_fields
  min: smb_stt_platform_config_min_fields
  stddev: smb_stt_platform_config_stddev_fields
  stddev_pop: smb_stt_platform_config_stddev_pop_fields
  stddev_samp: smb_stt_platform_config_stddev_samp_fields
  sum: smb_stt_platform_config_sum_fields
  var_pop: smb_stt_platform_config_var_pop_fields
  var_samp: smb_stt_platform_config_var_samp_fields
  variance: smb_stt_platform_config_variance_fields
}

"""
aggregate avg on columns
"""
type smb_stt_platform_config_avg_fields {
  hero_slider_limit: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.stt_platform_config". All fields are combined with a logical 'AND'.
"""
input smb_stt_platform_config_bool_exp {
  _and: [smb_stt_platform_config_bool_exp!]
  _not: smb_stt_platform_config_bool_exp
  _or: [smb_stt_platform_config_bool_exp!]
  created_at: timestamptz_comparison_exp
  enable_story_filter: Boolean_comparison_exp
  hero_slider_limit: Int_comparison_exp
  hide_in_overview: Boolean_comparison_exp
  id: bigint_comparison_exp
  link_template: String_comparison_exp
  platform_key: smb_stt_platform_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.stt_platform_config"
"""
enum smb_stt_platform_config_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  stt_platform_config_pkey
  """
  unique or primary key constraint on columns "platform_key"
  """
  stt_platform_config_ukey
}

"""
input type for incrementing numeric columns in table "smb.stt_platform_config"
"""
input smb_stt_platform_config_inc_input {
  hero_slider_limit: Int
  id: bigint
}

"""
input type for inserting data into table "smb.stt_platform_config"
"""
input smb_stt_platform_config_insert_input {
  created_at: timestamptz
  enable_story_filter: Boolean
  hero_slider_limit: Int
  hide_in_overview: Boolean
  id: bigint
  link_template: String
  platform_key: smb_stt_platform_enum
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_stt_platform_config_max_fields {
  created_at: timestamptz
  hero_slider_limit: Int
  id: bigint
  link_template: String
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type smb_stt_platform_config_min_fields {
  created_at: timestamptz
  hero_slider_limit: Int
  id: bigint
  link_template: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "smb.stt_platform_config"
"""
type smb_stt_platform_config_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_stt_platform_config!]!
}

"""
on_conflict condition type for table "smb.stt_platform_config"
"""
input smb_stt_platform_config_on_conflict {
  constraint: smb_stt_platform_config_constraint!
  update_columns: [smb_stt_platform_config_update_column!]! = []
  where: smb_stt_platform_config_bool_exp
}

"""
Ordering options when selecting data from "smb.stt_platform_config".
"""
input smb_stt_platform_config_order_by {
  created_at: order_by
  enable_story_filter: order_by
  hero_slider_limit: order_by
  hide_in_overview: order_by
  id: order_by
  link_template: order_by
  platform_key: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.stt_platform_config
"""
input smb_stt_platform_config_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.stt_platform_config"
"""
enum smb_stt_platform_config_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  enable_story_filter
  """
  column name
  """
  hero_slider_limit
  """
  column name
  """
  hide_in_overview
  """
  column name
  """
  id
  """
  column name
  """
  link_template
  """
  column name
  """
  platform_key
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.stt_platform_config"
"""
input smb_stt_platform_config_set_input {
  created_at: timestamptz
  enable_story_filter: Boolean
  hero_slider_limit: Int
  hide_in_overview: Boolean
  id: bigint
  link_template: String
  platform_key: smb_stt_platform_enum
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_stt_platform_config_stddev_fields {
  hero_slider_limit: Float
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_stt_platform_config_stddev_pop_fields {
  hero_slider_limit: Float
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_stt_platform_config_stddev_samp_fields {
  hero_slider_limit: Float
  id: Float
}

"""
Streaming cursor of the table "smb_stt_platform_config"
"""
input smb_stt_platform_config_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_stt_platform_config_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_stt_platform_config_stream_cursor_value_input {
  created_at: timestamptz
  enable_story_filter: Boolean
  hero_slider_limit: Int
  hide_in_overview: Boolean
  id: bigint
  link_template: String
  platform_key: smb_stt_platform_enum
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_stt_platform_config_sum_fields {
  hero_slider_limit: Int
  id: bigint
}

"""
update columns of table "smb.stt_platform_config"
"""
enum smb_stt_platform_config_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  enable_story_filter
  """
  column name
  """
  hero_slider_limit
  """
  column name
  """
  hide_in_overview
  """
  column name
  """
  id
  """
  column name
  """
  link_template
  """
  column name
  """
  platform_key
  """
  column name
  """
  updated_at
}

input smb_stt_platform_config_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_stt_platform_config_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_stt_platform_config_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_stt_platform_config_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_stt_platform_config_var_pop_fields {
  hero_slider_limit: Float
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_stt_platform_config_var_samp_fields {
  hero_slider_limit: Float
  id: Float
}

"""
aggregate variance on columns
"""
type smb_stt_platform_config_variance_fields {
  hero_slider_limit: Float
  id: Float
}

"""
unique or primary key constraints on table "smb.stt_platform"
"""
enum smb_stt_platform_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  stt_platform_pkey
}

enum smb_stt_platform_enum {
  """
  Hamburger Bahnhof
  """
  HBF
  """
  Museum fÃ¼r Islamische Kunst
  """
  ISL
  """
  Kunstgewerbemuseum
  """
  KGM
  """
  Sammlungen Online
  """
  SMB
}

"""
Boolean expression to compare columns of type "smb_stt_platform_enum". All fields are combined with logical 'AND'.
"""
input smb_stt_platform_enum_comparison_exp {
  _eq: smb_stt_platform_enum
  _in: [smb_stt_platform_enum!]
  _is_null: Boolean
  _neq: smb_stt_platform_enum
  _nin: [smb_stt_platform_enum!]
}

"""
input type for inserting data into table "smb.stt_platform"
"""
input smb_stt_platform_insert_input {
  comment: String
  value: String
}

"""
aggregate max on columns
"""
type smb_stt_platform_max_fields {
  comment: String
  value: String
}

"""
aggregate min on columns
"""
type smb_stt_platform_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "smb.stt_platform"
"""
type smb_stt_platform_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_stt_platform!]!
}

"""
on_conflict condition type for table "smb.stt_platform"
"""
input smb_stt_platform_on_conflict {
  constraint: smb_stt_platform_constraint!
  update_columns: [smb_stt_platform_update_column!]! = []
  where: smb_stt_platform_bool_exp
}

"""
Ordering options when selecting data from "smb.stt_platform".
"""
input smb_stt_platform_order_by {
  comment: order_by
  value: order_by
}

"""
primary key columns input for table: smb.stt_platform
"""
input smb_stt_platform_pk_columns_input {
  value: String!
}

"""
select columns of table "smb.stt_platform"
"""
enum smb_stt_platform_select_column {
  """
  column name
  """
  comment
  """
  column name
  """
  value
}

"""
input type for updating data in table "smb.stt_platform"
"""
input smb_stt_platform_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "smb_stt_platform"
"""
input smb_stt_platform_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_stt_platform_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_stt_platform_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "smb.stt_platform"
"""
enum smb_stt_platform_update_column {
  """
  column name
  """
  comment
  """
  column name
  """
  value
}

input smb_stt_platform_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_stt_platform_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_stt_platform_bool_exp!
}

"""
Enum type definition for sync-cycles
"""
type smb_sync_cycle_type {
  comment: String
  """
  An array relationship
  """
  sync_cycles("""distinct select on columns""" distinct_on: [smb_sync_cycles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycles_order_by!], """filter the rows returned""" where: smb_sync_cycles_bool_exp): [smb_sync_cycles!]!
  """
  An aggregate relationship
  """
  sync_cycles_aggregate("""distinct select on columns""" distinct_on: [smb_sync_cycles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycles_order_by!], """filter the rows returned""" where: smb_sync_cycles_bool_exp): smb_sync_cycles_aggregate!
  value: String!
}

"""
aggregated selection of "smb.sync_cycle_type"
"""
type smb_sync_cycle_type_aggregate {
  aggregate: smb_sync_cycle_type_aggregate_fields
  nodes: [smb_sync_cycle_type!]!
}

"""
aggregate fields of "smb.sync_cycle_type"
"""
type smb_sync_cycle_type_aggregate_fields {
  count(columns: [smb_sync_cycle_type_select_column!], distinct: Boolean): Int!
  max: smb_sync_cycle_type_max_fields
  min: smb_sync_cycle_type_min_fields
}

"""
Boolean expression to filter rows from the table "smb.sync_cycle_type". All fields are combined with a logical 'AND'.
"""
input smb_sync_cycle_type_bool_exp {
  _and: [smb_sync_cycle_type_bool_exp!]
  _not: smb_sync_cycle_type_bool_exp
  _or: [smb_sync_cycle_type_bool_exp!]
  comment: String_comparison_exp
  sync_cycles: smb_sync_cycles_bool_exp
  sync_cycles_aggregate: smb_sync_cycles_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.sync_cycle_type"
"""
enum smb_sync_cycle_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  isync_cycle_type_pkey
}

enum smb_sync_cycle_type_enum {
  """
  search collections update
  """
  ASSORTMENTS
  """
  removing objects moved to trashbin
  """
  DELETIONS
  """
  highlights update based on object-groups
  """
  HIGHLIGHTS
  """
  incremental update based on last-modified filter
  """
  INCREMENTAL
  """
  manually triggered sync
  """
  MANUAL
}

"""
Boolean expression to compare columns of type "smb_sync_cycle_type_enum". All fields are combined with logical 'AND'.
"""
input smb_sync_cycle_type_enum_comparison_exp {
  _eq: smb_sync_cycle_type_enum
  _in: [smb_sync_cycle_type_enum!]
  _is_null: Boolean
  _neq: smb_sync_cycle_type_enum
  _nin: [smb_sync_cycle_type_enum!]
}

"""
input type for inserting data into table "smb.sync_cycle_type"
"""
input smb_sync_cycle_type_insert_input {
  comment: String
  sync_cycles: smb_sync_cycles_arr_rel_insert_input
  value: String
}

"""
aggregate max on columns
"""
type smb_sync_cycle_type_max_fields {
  comment: String
  value: String
}

"""
aggregate min on columns
"""
type smb_sync_cycle_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "smb.sync_cycle_type"
"""
type smb_sync_cycle_type_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_sync_cycle_type!]!
}

"""
input type for inserting object relation for remote table "smb.sync_cycle_type"
"""
input smb_sync_cycle_type_obj_rel_insert_input {
  data: smb_sync_cycle_type_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_sync_cycle_type_on_conflict
}

"""
on_conflict condition type for table "smb.sync_cycle_type"
"""
input smb_sync_cycle_type_on_conflict {
  constraint: smb_sync_cycle_type_constraint!
  update_columns: [smb_sync_cycle_type_update_column!]! = []
  where: smb_sync_cycle_type_bool_exp
}

"""
Ordering options when selecting data from "smb.sync_cycle_type".
"""
input smb_sync_cycle_type_order_by {
  comment: order_by
  sync_cycles_aggregate: smb_sync_cycles_aggregate_order_by
  value: order_by
}

"""
primary key columns input for table: smb.sync_cycle_type
"""
input smb_sync_cycle_type_pk_columns_input {
  value: String!
}

"""
select columns of table "smb.sync_cycle_type"
"""
enum smb_sync_cycle_type_select_column {
  """
  column name
  """
  comment
  """
  column name
  """
  value
}

"""
input type for updating data in table "smb.sync_cycle_type"
"""
input smb_sync_cycle_type_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "smb_sync_cycle_type"
"""
input smb_sync_cycle_type_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_sync_cycle_type_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_sync_cycle_type_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "smb.sync_cycle_type"
"""
enum smb_sync_cycle_type_update_column {
  """
  column name
  """
  comment
  """
  column name
  """
  value
}

input smb_sync_cycle_type_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_sync_cycle_type_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_sync_cycle_type_bool_exp!
}

"""
Enum type definition for sync-cycles
"""
type smb_sync_cycles {
  debug_information: String!
  failed_ids: _int8
  id: bigint!
  module: String
  skipped_ids: _int8
  succeeded_ids: _int8
  """
  An object relationship
  """
  sync_cycle_type: smb_sync_cycle_type!
  timestamp: timestamptz!
  type: smb_sync_cycle_type_enum!
}

"""
aggregated selection of "smb.sync_cycles"
"""
type smb_sync_cycles_aggregate {
  aggregate: smb_sync_cycles_aggregate_fields
  nodes: [smb_sync_cycles!]!
}

input smb_sync_cycles_aggregate_bool_exp {
  count: smb_sync_cycles_aggregate_bool_exp_count
}

input smb_sync_cycles_aggregate_bool_exp_count {
  arguments: [smb_sync_cycles_select_column!]
  distinct: Boolean
  filter: smb_sync_cycles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.sync_cycles"
"""
type smb_sync_cycles_aggregate_fields {
  avg: smb_sync_cycles_avg_fields
  count(columns: [smb_sync_cycles_select_column!], distinct: Boolean): Int!
  max: smb_sync_cycles_max_fields
  min: smb_sync_cycles_min_fields
  stddev: smb_sync_cycles_stddev_fields
  stddev_pop: smb_sync_cycles_stddev_pop_fields
  stddev_samp: smb_sync_cycles_stddev_samp_fields
  sum: smb_sync_cycles_sum_fields
  var_pop: smb_sync_cycles_var_pop_fields
  var_samp: smb_sync_cycles_var_samp_fields
  variance: smb_sync_cycles_variance_fields
}

"""
order by aggregate values of table "smb.sync_cycles"
"""
input smb_sync_cycles_aggregate_order_by {
  avg: smb_sync_cycles_avg_order_by
  count: order_by
  max: smb_sync_cycles_max_order_by
  min: smb_sync_cycles_min_order_by
  stddev: smb_sync_cycles_stddev_order_by
  stddev_pop: smb_sync_cycles_stddev_pop_order_by
  stddev_samp: smb_sync_cycles_stddev_samp_order_by
  sum: smb_sync_cycles_sum_order_by
  var_pop: smb_sync_cycles_var_pop_order_by
  var_samp: smb_sync_cycles_var_samp_order_by
  variance: smb_sync_cycles_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.sync_cycles"
"""
input smb_sync_cycles_arr_rel_insert_input {
  data: [smb_sync_cycles_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_sync_cycles_on_conflict
}

"""
aggregate avg on columns
"""
type smb_sync_cycles_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "smb.sync_cycles". All fields are combined with a logical 'AND'.
"""
input smb_sync_cycles_bool_exp {
  _and: [smb_sync_cycles_bool_exp!]
  _not: smb_sync_cycles_bool_exp
  _or: [smb_sync_cycles_bool_exp!]
  debug_information: String_comparison_exp
  failed_ids: _int8_comparison_exp
  id: bigint_comparison_exp
  module: String_comparison_exp
  skipped_ids: _int8_comparison_exp
  succeeded_ids: _int8_comparison_exp
  sync_cycle_type: smb_sync_cycle_type_bool_exp
  timestamp: timestamptz_comparison_exp
  type: smb_sync_cycle_type_enum_comparison_exp
}

"""
unique or primary key constraints on table "smb.sync_cycles"
"""
enum smb_sync_cycles_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  sync_cycles_pkey
}

"""
input type for incrementing numeric columns in table "smb.sync_cycles"
"""
input smb_sync_cycles_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.sync_cycles"
"""
input smb_sync_cycles_insert_input {
  debug_information: String
  failed_ids: _int8
  id: bigint
  module: String
  skipped_ids: _int8
  succeeded_ids: _int8
  sync_cycle_type: smb_sync_cycle_type_obj_rel_insert_input
  timestamp: timestamptz
  type: smb_sync_cycle_type_enum
}

"""
aggregate max on columns
"""
type smb_sync_cycles_max_fields {
  debug_information: String
  id: bigint
  module: String
  timestamp: timestamptz
}

"""
order by max() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_max_order_by {
  debug_information: order_by
  id: order_by
  module: order_by
  timestamp: order_by
}

"""
aggregate min on columns
"""
type smb_sync_cycles_min_fields {
  debug_information: String
  id: bigint
  module: String
  timestamp: timestamptz
}

"""
order by min() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_min_order_by {
  debug_information: order_by
  id: order_by
  module: order_by
  timestamp: order_by
}

"""
response of any mutation on the table "smb.sync_cycles"
"""
type smb_sync_cycles_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_sync_cycles!]!
}

"""
on_conflict condition type for table "smb.sync_cycles"
"""
input smb_sync_cycles_on_conflict {
  constraint: smb_sync_cycles_constraint!
  update_columns: [smb_sync_cycles_update_column!]! = []
  where: smb_sync_cycles_bool_exp
}

"""
Ordering options when selecting data from "smb.sync_cycles".
"""
input smb_sync_cycles_order_by {
  debug_information: order_by
  failed_ids: order_by
  id: order_by
  module: order_by
  skipped_ids: order_by
  succeeded_ids: order_by
  sync_cycle_type: smb_sync_cycle_type_order_by
  timestamp: order_by
  type: order_by
}

"""
primary key columns input for table: smb.sync_cycles
"""
input smb_sync_cycles_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.sync_cycles"
"""
enum smb_sync_cycles_select_column {
  """
  column name
  """
  debug_information
  """
  column name
  """
  failed_ids
  """
  column name
  """
  id
  """
  column name
  """
  module
  """
  column name
  """
  skipped_ids
  """
  column name
  """
  succeeded_ids
  """
  column name
  """
  timestamp
  """
  column name
  """
  type
}

"""
input type for updating data in table "smb.sync_cycles"
"""
input smb_sync_cycles_set_input {
  debug_information: String
  failed_ids: _int8
  id: bigint
  module: String
  skipped_ids: _int8
  succeeded_ids: _int8
  timestamp: timestamptz
  type: smb_sync_cycle_type_enum
}

"""
aggregate stddev on columns
"""
type smb_sync_cycles_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_stddev_order_by {
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_sync_cycles_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_stddev_pop_order_by {
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_sync_cycles_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_stddev_samp_order_by {
  id: order_by
}

"""
Streaming cursor of the table "smb_sync_cycles"
"""
input smb_sync_cycles_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_sync_cycles_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_sync_cycles_stream_cursor_value_input {
  debug_information: String
  failed_ids: _int8
  id: bigint
  module: String
  skipped_ids: _int8
  succeeded_ids: _int8
  timestamp: timestamptz
  type: smb_sync_cycle_type_enum
}

"""
aggregate sum on columns
"""
type smb_sync_cycles_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_sum_order_by {
  id: order_by
}

"""
update columns of table "smb.sync_cycles"
"""
enum smb_sync_cycles_update_column {
  """
  column name
  """
  debug_information
  """
  column name
  """
  failed_ids
  """
  column name
  """
  id
  """
  column name
  """
  module
  """
  column name
  """
  skipped_ids
  """
  column name
  """
  succeeded_ids
  """
  column name
  """
  timestamp
  """
  column name
  """
  type
}

input smb_sync_cycles_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_sync_cycles_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_sync_cycles_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_sync_cycles_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_sync_cycles_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_var_pop_order_by {
  id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_sync_cycles_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_var_samp_order_by {
  id: order_by
}

"""
aggregate variance on columns
"""
type smb_sync_cycles_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "smb.sync_cycles"
"""
input smb_sync_cycles_variance_order_by {
  id: order_by
}

"""
thesaurus
"""
type smb_thesaurus {
  created_at: timestamptz!
  """
  An array relationship
  """
  i18n("""distinct select on columns""" distinct_on: [smb_thesaurus_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_translations_order_by!], """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): [smb_thesaurus_translations!]!
  """
  An aggregate relationship
  """
  i18n_aggregate("""distinct select on columns""" distinct_on: [smb_thesaurus_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_translations_order_by!], """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): smb_thesaurus_translations_aggregate!
  id: bigint!
  instance: String!
  mds_id: bigint!
  name: String
  """
  An array relationship
  """
  parent("""distinct select on columns""" distinct_on: [smb_thesaurus_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_order_by!], """filter the rows returned""" where: smb_thesaurus_bool_exp): [smb_thesaurus!]!
  """
  An aggregate relationship
  """
  parent_aggregate("""distinct select on columns""" distinct_on: [smb_thesaurus_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_order_by!], """filter the rows returned""" where: smb_thesaurus_bool_exp): smb_thesaurus_aggregate!
  parent_id: bigint
  type: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "smb.thesaurus"
"""
type smb_thesaurus_aggregate {
  aggregate: smb_thesaurus_aggregate_fields
  nodes: [smb_thesaurus!]!
}

input smb_thesaurus_aggregate_bool_exp {
  count: smb_thesaurus_aggregate_bool_exp_count
}

input smb_thesaurus_aggregate_bool_exp_count {
  arguments: [smb_thesaurus_select_column!]
  distinct: Boolean
  filter: smb_thesaurus_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.thesaurus"
"""
type smb_thesaurus_aggregate_fields {
  avg: smb_thesaurus_avg_fields
  count(columns: [smb_thesaurus_select_column!], distinct: Boolean): Int!
  max: smb_thesaurus_max_fields
  min: smb_thesaurus_min_fields
  stddev: smb_thesaurus_stddev_fields
  stddev_pop: smb_thesaurus_stddev_pop_fields
  stddev_samp: smb_thesaurus_stddev_samp_fields
  sum: smb_thesaurus_sum_fields
  var_pop: smb_thesaurus_var_pop_fields
  var_samp: smb_thesaurus_var_samp_fields
  variance: smb_thesaurus_variance_fields
}

"""
order by aggregate values of table "smb.thesaurus"
"""
input smb_thesaurus_aggregate_order_by {
  avg: smb_thesaurus_avg_order_by
  count: order_by
  max: smb_thesaurus_max_order_by
  min: smb_thesaurus_min_order_by
  stddev: smb_thesaurus_stddev_order_by
  stddev_pop: smb_thesaurus_stddev_pop_order_by
  stddev_samp: smb_thesaurus_stddev_samp_order_by
  sum: smb_thesaurus_sum_order_by
  var_pop: smb_thesaurus_var_pop_order_by
  var_samp: smb_thesaurus_var_samp_order_by
  variance: smb_thesaurus_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.thesaurus"
"""
input smb_thesaurus_arr_rel_insert_input {
  data: [smb_thesaurus_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_thesaurus_on_conflict
}

"""
aggregate avg on columns
"""
type smb_thesaurus_avg_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by avg() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_avg_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.thesaurus". All fields are combined with a logical 'AND'.
"""
input smb_thesaurus_bool_exp {
  _and: [smb_thesaurus_bool_exp!]
  _not: smb_thesaurus_bool_exp
  _or: [smb_thesaurus_bool_exp!]
  created_at: timestamptz_comparison_exp
  i18n: smb_thesaurus_translations_bool_exp
  i18n_aggregate: smb_thesaurus_translations_aggregate_bool_exp
  id: bigint_comparison_exp
  instance: String_comparison_exp
  mds_id: bigint_comparison_exp
  name: String_comparison_exp
  parent: smb_thesaurus_bool_exp
  parent_aggregate: smb_thesaurus_aggregate_bool_exp
  parent_id: bigint_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "smb.thesaurus"
"""
enum smb_thesaurus_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  thesaurus_pkey
  """
  unique or primary key constraint on columns "type", "mds_id"
  """
  thesaurus_ukey
}

"""
input type for incrementing numeric columns in table "smb.thesaurus"
"""
input smb_thesaurus_inc_input {
  id: bigint
  mds_id: bigint
  parent_id: bigint
}

"""
input type for inserting data into table "smb.thesaurus"
"""
input smb_thesaurus_insert_input {
  created_at: timestamptz
  i18n: smb_thesaurus_translations_arr_rel_insert_input
  id: bigint
  instance: String
  mds_id: bigint
  name: String
  parent: smb_thesaurus_arr_rel_insert_input
  parent_id: bigint
  type: String
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type smb_thesaurus_max_fields {
  created_at: timestamptz
  id: bigint
  instance: String
  mds_id: bigint
  name: String
  parent_id: bigint
  type: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_max_order_by {
  created_at: order_by
  id: order_by
  instance: order_by
  mds_id: order_by
  name: order_by
  parent_id: order_by
  type: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type smb_thesaurus_min_fields {
  created_at: timestamptz
  id: bigint
  instance: String
  mds_id: bigint
  name: String
  parent_id: bigint
  type: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_min_order_by {
  created_at: order_by
  id: order_by
  instance: order_by
  mds_id: order_by
  name: order_by
  parent_id: order_by
  type: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "smb.thesaurus"
"""
type smb_thesaurus_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_thesaurus!]!
}

"""
input type for inserting object relation for remote table "smb.thesaurus"
"""
input smb_thesaurus_obj_rel_insert_input {
  data: smb_thesaurus_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_thesaurus_on_conflict
}

"""
on_conflict condition type for table "smb.thesaurus"
"""
input smb_thesaurus_on_conflict {
  constraint: smb_thesaurus_constraint!
  update_columns: [smb_thesaurus_update_column!]! = []
  where: smb_thesaurus_bool_exp
}

"""
Ordering options when selecting data from "smb.thesaurus".
"""
input smb_thesaurus_order_by {
  created_at: order_by
  i18n_aggregate: smb_thesaurus_translations_aggregate_order_by
  id: order_by
  instance: order_by
  mds_id: order_by
  name: order_by
  parent_aggregate: smb_thesaurus_aggregate_order_by
  parent_id: order_by
  type: order_by
  updated_at: order_by
}

"""
primary key columns input for table: smb.thesaurus
"""
input smb_thesaurus_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.thesaurus"
"""
enum smb_thesaurus_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  instance
  """
  column name
  """
  mds_id
  """
  column name
  """
  name
  """
  column name
  """
  parent_id
  """
  column name
  """
  type
  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "smb.thesaurus"
"""
input smb_thesaurus_set_input {
  created_at: timestamptz
  id: bigint
  instance: String
  mds_id: bigint
  name: String
  parent_id: bigint
  type: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type smb_thesaurus_stddev_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by stddev() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_stddev_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_thesaurus_stddev_pop_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by stddev_pop() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_stddev_pop_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_thesaurus_stddev_samp_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by stddev_samp() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_stddev_samp_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
Streaming cursor of the table "smb_thesaurus"
"""
input smb_thesaurus_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_thesaurus_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_thesaurus_stream_cursor_value_input {
  created_at: timestamptz
  id: bigint
  instance: String
  mds_id: bigint
  name: String
  parent_id: bigint
  type: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type smb_thesaurus_sum_fields {
  id: bigint
  mds_id: bigint
  parent_id: bigint
}

"""
order by sum() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_sum_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
language specific display values for thesaurus entries
"""
type smb_thesaurus_translations {
  created_at: timestamptz!
  id: bigint!
  """
  An object relationship
  """
  language: smb_language!
  language_id: bigint!
  """
  An object relationship
  """
  thesaurus: smb_thesaurus!
  thesaurus_id: bigint!
  updated_at: timestamptz!
  value: String
}

"""
aggregated selection of "smb.thesaurus_translations"
"""
type smb_thesaurus_translations_aggregate {
  aggregate: smb_thesaurus_translations_aggregate_fields
  nodes: [smb_thesaurus_translations!]!
}

input smb_thesaurus_translations_aggregate_bool_exp {
  count: smb_thesaurus_translations_aggregate_bool_exp_count
}

input smb_thesaurus_translations_aggregate_bool_exp_count {
  arguments: [smb_thesaurus_translations_select_column!]
  distinct: Boolean
  filter: smb_thesaurus_translations_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "smb.thesaurus_translations"
"""
type smb_thesaurus_translations_aggregate_fields {
  avg: smb_thesaurus_translations_avg_fields
  count(columns: [smb_thesaurus_translations_select_column!], distinct: Boolean): Int!
  max: smb_thesaurus_translations_max_fields
  min: smb_thesaurus_translations_min_fields
  stddev: smb_thesaurus_translations_stddev_fields
  stddev_pop: smb_thesaurus_translations_stddev_pop_fields
  stddev_samp: smb_thesaurus_translations_stddev_samp_fields
  sum: smb_thesaurus_translations_sum_fields
  var_pop: smb_thesaurus_translations_var_pop_fields
  var_samp: smb_thesaurus_translations_var_samp_fields
  variance: smb_thesaurus_translations_variance_fields
}

"""
order by aggregate values of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_aggregate_order_by {
  avg: smb_thesaurus_translations_avg_order_by
  count: order_by
  max: smb_thesaurus_translations_max_order_by
  min: smb_thesaurus_translations_min_order_by
  stddev: smb_thesaurus_translations_stddev_order_by
  stddev_pop: smb_thesaurus_translations_stddev_pop_order_by
  stddev_samp: smb_thesaurus_translations_stddev_samp_order_by
  sum: smb_thesaurus_translations_sum_order_by
  var_pop: smb_thesaurus_translations_var_pop_order_by
  var_samp: smb_thesaurus_translations_var_samp_order_by
  variance: smb_thesaurus_translations_variance_order_by
}

"""
input type for inserting array relation for remote table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_arr_rel_insert_input {
  data: [smb_thesaurus_translations_insert_input!]!
  """
  upsert condition
  """
  on_conflict: smb_thesaurus_translations_on_conflict
}

"""
aggregate avg on columns
"""
type smb_thesaurus_translations_avg_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by avg() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_avg_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
Boolean expression to filter rows from the table "smb.thesaurus_translations". All fields are combined with a logical 'AND'.
"""
input smb_thesaurus_translations_bool_exp {
  _and: [smb_thesaurus_translations_bool_exp!]
  _not: smb_thesaurus_translations_bool_exp
  _or: [smb_thesaurus_translations_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  language: smb_language_bool_exp
  language_id: bigint_comparison_exp
  thesaurus: smb_thesaurus_bool_exp
  thesaurus_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.thesaurus_translations"
"""
enum smb_thesaurus_translations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  thesaurus_translations_pkey
}

"""
input type for incrementing numeric columns in table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_inc_input {
  id: bigint
  language_id: bigint
  thesaurus_id: bigint
}

"""
input type for inserting data into table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_insert_input {
  created_at: timestamptz
  id: bigint
  language: smb_language_obj_rel_insert_input
  language_id: bigint
  thesaurus: smb_thesaurus_obj_rel_insert_input
  thesaurus_id: bigint
  updated_at: timestamptz
  value: String
}

"""
aggregate max on columns
"""
type smb_thesaurus_translations_max_fields {
  created_at: timestamptz
  id: bigint
  language_id: bigint
  thesaurus_id: bigint
  updated_at: timestamptz
  value: String
}

"""
order by max() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_max_order_by {
  created_at: order_by
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
  updated_at: order_by
  value: order_by
}

"""
aggregate min on columns
"""
type smb_thesaurus_translations_min_fields {
  created_at: timestamptz
  id: bigint
  language_id: bigint
  thesaurus_id: bigint
  updated_at: timestamptz
  value: String
}

"""
order by min() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_min_order_by {
  created_at: order_by
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
  updated_at: order_by
  value: order_by
}

"""
response of any mutation on the table "smb.thesaurus_translations"
"""
type smb_thesaurus_translations_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_thesaurus_translations!]!
}

"""
on_conflict condition type for table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_on_conflict {
  constraint: smb_thesaurus_translations_constraint!
  update_columns: [smb_thesaurus_translations_update_column!]! = []
  where: smb_thesaurus_translations_bool_exp
}

"""
Ordering options when selecting data from "smb.thesaurus_translations".
"""
input smb_thesaurus_translations_order_by {
  created_at: order_by
  id: order_by
  language: smb_language_order_by
  language_id: order_by
  thesaurus: smb_thesaurus_order_by
  thesaurus_id: order_by
  updated_at: order_by
  value: order_by
}

"""
primary key columns input for table: smb.thesaurus_translations
"""
input smb_thesaurus_translations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.thesaurus_translations"
"""
enum smb_thesaurus_translations_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  thesaurus_id
  """
  column name
  """
  updated_at
  """
  column name
  """
  value
}

"""
input type for updating data in table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_set_input {
  created_at: timestamptz
  id: bigint
  language_id: bigint
  thesaurus_id: bigint
  updated_at: timestamptz
  value: String
}

"""
aggregate stddev on columns
"""
type smb_thesaurus_translations_stddev_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by stddev() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_stddev_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type smb_thesaurus_translations_stddev_pop_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by stddev_pop() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_stddev_pop_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type smb_thesaurus_translations_stddev_samp_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by stddev_samp() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_stddev_samp_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
Streaming cursor of the table "smb_thesaurus_translations"
"""
input smb_thesaurus_translations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_thesaurus_translations_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_thesaurus_translations_stream_cursor_value_input {
  created_at: timestamptz
  id: bigint
  language_id: bigint
  thesaurus_id: bigint
  updated_at: timestamptz
  value: String
}

"""
aggregate sum on columns
"""
type smb_thesaurus_translations_sum_fields {
  id: bigint
  language_id: bigint
  thesaurus_id: bigint
}

"""
order by sum() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_sum_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
update columns of table "smb.thesaurus_translations"
"""
enum smb_thesaurus_translations_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  language_id
  """
  column name
  """
  thesaurus_id
  """
  column name
  """
  updated_at
  """
  column name
  """
  value
}

input smb_thesaurus_translations_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_thesaurus_translations_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_thesaurus_translations_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_thesaurus_translations_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_thesaurus_translations_var_pop_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by var_pop() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_var_pop_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_thesaurus_translations_var_samp_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by var_samp() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_var_samp_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
aggregate variance on columns
"""
type smb_thesaurus_translations_variance_fields {
  id: Float
  language_id: Float
  thesaurus_id: Float
}

"""
order by variance() on columns of table "smb.thesaurus_translations"
"""
input smb_thesaurus_translations_variance_order_by {
  id: order_by
  language_id: order_by
  thesaurus_id: order_by
}

"""
update columns of table "smb.thesaurus"
"""
enum smb_thesaurus_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  instance
  """
  column name
  """
  mds_id
  """
  column name
  """
  name
  """
  column name
  """
  parent_id
  """
  column name
  """
  type
  """
  column name
  """
  updated_at
}

input smb_thesaurus_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_thesaurus_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_thesaurus_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_thesaurus_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_thesaurus_var_pop_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by var_pop() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_var_pop_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
aggregate var_samp on columns
"""
type smb_thesaurus_var_samp_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by var_samp() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_var_samp_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
aggregate variance on columns
"""
type smb_thesaurus_variance_fields {
  id: Float
  mds_id: Float
  parent_id: Float
}

"""
order by variance() on columns of table "smb.thesaurus"
"""
input smb_thesaurus_variance_order_by {
  id: order_by
  mds_id: order_by
  parent_id: order_by
}

"""
Users
"""
type smb_user {
  editor_scope: String
  email: String!
  id: uuid!
  password: String!
  role_id: Int
  """
  An object relationship
  """
  user_role: smb_user_role
}

"""
aggregated selection of "smb.user"
"""
type smb_user_aggregate {
  aggregate: smb_user_aggregate_fields
  nodes: [smb_user!]!
}

"""
aggregate fields of "smb.user"
"""
type smb_user_aggregate_fields {
  avg: smb_user_avg_fields
  count(columns: [smb_user_select_column!], distinct: Boolean): Int!
  max: smb_user_max_fields
  min: smb_user_min_fields
  stddev: smb_user_stddev_fields
  stddev_pop: smb_user_stddev_pop_fields
  stddev_samp: smb_user_stddev_samp_fields
  sum: smb_user_sum_fields
  var_pop: smb_user_var_pop_fields
  var_samp: smb_user_var_samp_fields
  variance: smb_user_variance_fields
}

"""
aggregate avg on columns
"""
type smb_user_avg_fields {
  role_id: Float
}

"""
Boolean expression to filter rows from the table "smb.user". All fields are combined with a logical 'AND'.
"""
input smb_user_bool_exp {
  _and: [smb_user_bool_exp!]
  _not: smb_user_bool_exp
  _or: [smb_user_bool_exp!]
  editor_scope: String_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  password: String_comparison_exp
  role_id: Int_comparison_exp
  user_role: smb_user_role_bool_exp
}

"""
unique or primary key constraints on table "smb.user"
"""
enum smb_user_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  user_email_ukey
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
input type for incrementing numeric columns in table "smb.user"
"""
input smb_user_inc_input {
  role_id: Int
}

"""
input type for inserting data into table "smb.user"
"""
input smb_user_insert_input {
  editor_scope: String
  email: String
  id: uuid
  password: String
  role_id: Int
  user_role: smb_user_role_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type smb_user_max_fields {
  editor_scope: String
  email: String
  id: uuid
  password: String
  role_id: Int
}

"""
aggregate min on columns
"""
type smb_user_min_fields {
  editor_scope: String
  email: String
  id: uuid
  password: String
  role_id: Int
}

"""
response of any mutation on the table "smb.user"
"""
type smb_user_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_user!]!
}

"""
on_conflict condition type for table "smb.user"
"""
input smb_user_on_conflict {
  constraint: smb_user_constraint!
  update_columns: [smb_user_update_column!]! = []
  where: smb_user_bool_exp
}

"""
Ordering options when selecting data from "smb.user".
"""
input smb_user_order_by {
  editor_scope: order_by
  email: order_by
  id: order_by
  password: order_by
  role_id: order_by
  user_role: smb_user_role_order_by
}

"""
primary key columns input for table: smb.user
"""
input smb_user_pk_columns_input {
  id: uuid!
}

"""
Roles
"""
type smb_user_role {
  id: bigint!
  role: String!
}

"""
aggregated selection of "smb.user_role"
"""
type smb_user_role_aggregate {
  aggregate: smb_user_role_aggregate_fields
  nodes: [smb_user_role!]!
}

"""
aggregate fields of "smb.user_role"
"""
type smb_user_role_aggregate_fields {
  avg: smb_user_role_avg_fields
  count(columns: [smb_user_role_select_column!], distinct: Boolean): Int!
  max: smb_user_role_max_fields
  min: smb_user_role_min_fields
  stddev: smb_user_role_stddev_fields
  stddev_pop: smb_user_role_stddev_pop_fields
  stddev_samp: smb_user_role_stddev_samp_fields
  sum: smb_user_role_sum_fields
  var_pop: smb_user_role_var_pop_fields
  var_samp: smb_user_role_var_samp_fields
  variance: smb_user_role_variance_fields
}

"""
aggregate avg on columns
"""
type smb_user_role_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "smb.user_role". All fields are combined with a logical 'AND'.
"""
input smb_user_role_bool_exp {
  _and: [smb_user_role_bool_exp!]
  _not: smb_user_role_bool_exp
  _or: [smb_user_role_bool_exp!]
  id: bigint_comparison_exp
  role: String_comparison_exp
}

"""
unique or primary key constraints on table "smb.user_role"
"""
enum smb_user_role_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_role_pkey
  """
  unique or primary key constraint on columns "role"
  """
  user_role_role_ukey
}

"""
input type for incrementing numeric columns in table "smb.user_role"
"""
input smb_user_role_inc_input {
  id: bigint
}

"""
input type for inserting data into table "smb.user_role"
"""
input smb_user_role_insert_input {
  id: bigint
  role: String
}

"""
aggregate max on columns
"""
type smb_user_role_max_fields {
  id: bigint
  role: String
}

"""
aggregate min on columns
"""
type smb_user_role_min_fields {
  id: bigint
  role: String
}

"""
response of any mutation on the table "smb.user_role"
"""
type smb_user_role_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!
  """
  data from the rows affected by the mutation
  """
  returning: [smb_user_role!]!
}

"""
input type for inserting object relation for remote table "smb.user_role"
"""
input smb_user_role_obj_rel_insert_input {
  data: smb_user_role_insert_input!
  """
  upsert condition
  """
  on_conflict: smb_user_role_on_conflict
}

"""
on_conflict condition type for table "smb.user_role"
"""
input smb_user_role_on_conflict {
  constraint: smb_user_role_constraint!
  update_columns: [smb_user_role_update_column!]! = []
  where: smb_user_role_bool_exp
}

"""
Ordering options when selecting data from "smb.user_role".
"""
input smb_user_role_order_by {
  id: order_by
  role: order_by
}

"""
primary key columns input for table: smb.user_role
"""
input smb_user_role_pk_columns_input {
  id: bigint!
}

"""
select columns of table "smb.user_role"
"""
enum smb_user_role_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  role
}

"""
input type for updating data in table "smb.user_role"
"""
input smb_user_role_set_input {
  id: bigint
  role: String
}

"""
aggregate stddev on columns
"""
type smb_user_role_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_user_role_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_user_role_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "smb_user_role"
"""
input smb_user_role_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_user_role_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_user_role_stream_cursor_value_input {
  id: bigint
  role: String
}

"""
aggregate sum on columns
"""
type smb_user_role_sum_fields {
  id: bigint
}

"""
update columns of table "smb.user_role"
"""
enum smb_user_role_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  role
}

input smb_user_role_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_user_role_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_user_role_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_user_role_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_user_role_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type smb_user_role_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type smb_user_role_variance_fields {
  id: Float
}

"""
select columns of table "smb.user"
"""
enum smb_user_select_column {
  """
  column name
  """
  editor_scope
  """
  column name
  """
  email
  """
  column name
  """
  id
  """
  column name
  """
  password
  """
  column name
  """
  role_id
}

"""
input type for updating data in table "smb.user"
"""
input smb_user_set_input {
  editor_scope: String
  email: String
  id: uuid
  password: String
  role_id: Int
}

"""
aggregate stddev on columns
"""
type smb_user_stddev_fields {
  role_id: Float
}

"""
aggregate stddev_pop on columns
"""
type smb_user_stddev_pop_fields {
  role_id: Float
}

"""
aggregate stddev_samp on columns
"""
type smb_user_stddev_samp_fields {
  role_id: Float
}

"""
Streaming cursor of the table "smb_user"
"""
input smb_user_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: smb_user_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input smb_user_stream_cursor_value_input {
  editor_scope: String
  email: String
  id: uuid
  password: String
  role_id: Int
}

"""
aggregate sum on columns
"""
type smb_user_sum_fields {
  role_id: Int
}

"""
update columns of table "smb.user"
"""
enum smb_user_update_column {
  """
  column name
  """
  editor_scope
  """
  column name
  """
  email
  """
  column name
  """
  id
  """
  column name
  """
  password
  """
  column name
  """
  role_id
}

input smb_user_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: smb_user_inc_input
  """
  sets the columns of the filtered rows to the given values
  """
  _set: smb_user_set_input
  """
  filter the rows which have to be updated
  """
  where: smb_user_bool_exp!
}

"""
aggregate var_pop on columns
"""
type smb_user_var_pop_fields {
  role_id: Float
}

"""
aggregate var_samp on columns
"""
type smb_user_var_samp_fields {
  role_id: Float
}

"""
aggregate variance on columns
"""
type smb_user_variance_fields {
  role_id: Float
}

type strapi_hbfMutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCategory(data: CategoryInput!, locale: I18NLocaleCode): CategoryEntityResponse
  createCategoryLocalization(data: CategoryInput, id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  createIndexLocalization(data: IndexInput, id: ID, locale: I18NLocaleCode): IndexEntityResponse
  createRoom(data: RoomInput!, locale: I18NLocaleCode): RoomEntityResponse
  createRoomLocalization(data: RoomInput, id: ID, locale: I18NLocaleCode): RoomEntityResponse
  createSiteConfigLocalization(data: SiteConfigInput, id: ID, locale: I18NLocaleCode): SiteConfigEntityResponse
  createSmbGuidepageLocalization(data: SmbGuidepageInput, id: ID, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  createSmbLandingpageLocalization(data: SmbLandingpageInput, id: ID, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  createSmbResearchpageLocalization(data: SmbResearchpageInput, id: ID, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  createSmbSiteConfigLocalization(data: SmbSiteConfigInput, id: ID, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  createSmbTopicspageLocalization(data: SmbTopicspageInput, id: ID, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  createStory(data: StoryInput!, locale: I18NLocaleCode): StoryEntityResponse
  createStoryLocalization(data: StoryInput, id: ID, locale: I18NLocaleCode): StoryEntityResponse
  createTopic(data: TopicInput!, locale: I18NLocaleCode): TopicEntityResponse
  createTopicLocalization(data: TopicInput, id: ID, locale: I18NLocaleCode): TopicEntityResponse
  createTour(data: TourInput!, locale: I18NLocaleCode): TourEntityResponse
  createTourLocalization(data: TourInput, id: ID, locale: I18NLocaleCode): TourEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCategory(id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  deleteIndex(locale: I18NLocaleCode): IndexEntityResponse
  deleteQrReader: QrReaderEntityResponse
  deleteRoom(id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  deleteSiteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  deleteSmbGuidepage(locale: I18NLocaleCode): SmbGuidepageEntityResponse
  deleteSmbLandingpage(locale: I18NLocaleCode): SmbLandingpageEntityResponse
  deleteSmbResearchpage(locale: I18NLocaleCode): SmbResearchpageEntityResponse
  deleteSmbSiteConfig(locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  deleteSmbTopicspage(locale: I18NLocaleCode): SmbTopicspageEntityResponse
  deleteStory(id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  deleteTopic(id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  deleteTour(id: ID!, locale: I18NLocaleCode): TourEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(data: CategoryInput!, id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateIndex(data: IndexInput!, locale: I18NLocaleCode): IndexEntityResponse
  updateQrReader(data: QrReaderInput!): QrReaderEntityResponse
  updateRoom(data: RoomInput!, id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  updateSiteConfig(data: SiteConfigInput!, locale: I18NLocaleCode): SiteConfigEntityResponse
  updateSmbGuidepage(data: SmbGuidepageInput!, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  updateSmbLandingpage(data: SmbLandingpageInput!, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  updateSmbResearchpage(data: SmbResearchpageInput!, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  updateSmbSiteConfig(data: SmbSiteConfigInput!, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  updateSmbTopicspage(data: SmbTopicspageInput!, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  updateStory(data: StoryInput!, id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  updateTopic(data: TopicInput!, id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  updateTour(data: TourInput!, id: ID!, locale: I18NLocaleCode): TourEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type strapi_hbfQuery {
  categories(filters: CategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  index(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): IndexEntityResponse
  me: UsersPermissionsMe
  qrReader(publicationState: PublicationState = LIVE): QrReaderEntityResponse
  room(id: ID, locale: I18NLocaleCode): RoomEntityResponse
  rooms(filters: RoomFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomEntityResponseCollection
  siteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  smbGuidepage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbGuidepageEntityResponse
  smbLandingpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbLandingpageEntityResponse
  smbResearchpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbResearchpageEntityResponse
  smbSiteConfig(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbSiteConfigEntityResponse
  smbTopicspage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbTopicspageEntityResponse
  stories(filters: StoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryEntityResponseCollection
  story(id: ID, locale: I18NLocaleCode): StoryEntityResponse
  topic(id: ID, locale: I18NLocaleCode): TopicEntityResponse
  topics(filters: TopicFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TopicEntityResponseCollection
  tour(id: ID, locale: I18NLocaleCode): TourEntityResponse
  tours(filters: TourFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type strapi_islMutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCategory(data: CategoryInput!, locale: I18NLocaleCode): CategoryEntityResponse
  createCategoryLocalization(data: CategoryInput, id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  createIndexLocalization(data: IndexInput, id: ID, locale: I18NLocaleCode): IndexEntityResponse
  createRoom(data: RoomInput!, locale: I18NLocaleCode): RoomEntityResponse
  createRoomLocalization(data: RoomInput, id: ID, locale: I18NLocaleCode): RoomEntityResponse
  createSiteConfigLocalization(data: SiteConfigInput, id: ID, locale: I18NLocaleCode): SiteConfigEntityResponse
  createSmbGuidepageLocalization(data: SmbGuidepageInput, id: ID, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  createSmbLandingpageLocalization(data: SmbLandingpageInput, id: ID, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  createSmbResearchpageLocalization(data: SmbResearchpageInput, id: ID, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  createSmbSiteConfigLocalization(data: SmbSiteConfigInput, id: ID, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  createSmbTopicspageLocalization(data: SmbTopicspageInput, id: ID, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  createStory(data: StoryInput!, locale: I18NLocaleCode): StoryEntityResponse
  createStoryLocalization(data: StoryInput, id: ID, locale: I18NLocaleCode): StoryEntityResponse
  createTopic(data: TopicInput!, locale: I18NLocaleCode): TopicEntityResponse
  createTopicLocalization(data: TopicInput, id: ID, locale: I18NLocaleCode): TopicEntityResponse
  createTour(data: TourInput!, locale: I18NLocaleCode): TourEntityResponse
  createTourLocalization(data: TourInput, id: ID, locale: I18NLocaleCode): TourEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCategory(id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  deleteIndex(locale: I18NLocaleCode): IndexEntityResponse
  deleteQrReader: QrReaderEntityResponse
  deleteRoom(id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  deleteSiteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  deleteSmbGuidepage(locale: I18NLocaleCode): SmbGuidepageEntityResponse
  deleteSmbLandingpage(locale: I18NLocaleCode): SmbLandingpageEntityResponse
  deleteSmbResearchpage(locale: I18NLocaleCode): SmbResearchpageEntityResponse
  deleteSmbSiteConfig(locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  deleteSmbTopicspage(locale: I18NLocaleCode): SmbTopicspageEntityResponse
  deleteStory(id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  deleteTopic(id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  deleteTour(id: ID!, locale: I18NLocaleCode): TourEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(data: CategoryInput!, id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateIndex(data: IndexInput!, locale: I18NLocaleCode): IndexEntityResponse
  updateQrReader(data: QrReaderInput!): QrReaderEntityResponse
  updateRoom(data: RoomInput!, id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  updateSiteConfig(data: SiteConfigInput!, locale: I18NLocaleCode): SiteConfigEntityResponse
  updateSmbGuidepage(data: SmbGuidepageInput!, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  updateSmbLandingpage(data: SmbLandingpageInput!, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  updateSmbResearchpage(data: SmbResearchpageInput!, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  updateSmbSiteConfig(data: SmbSiteConfigInput!, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  updateSmbTopicspage(data: SmbTopicspageInput!, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  updateStory(data: StoryInput!, id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  updateTopic(data: TopicInput!, id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  updateTour(data: TourInput!, id: ID!, locale: I18NLocaleCode): TourEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type strapi_islQuery {
  categories(filters: CategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  index(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): IndexEntityResponse
  me: UsersPermissionsMe
  qrReader(publicationState: PublicationState = LIVE): QrReaderEntityResponse
  room(id: ID, locale: I18NLocaleCode): RoomEntityResponse
  rooms(filters: RoomFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomEntityResponseCollection
  siteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  smbGuidepage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbGuidepageEntityResponse
  smbLandingpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbLandingpageEntityResponse
  smbResearchpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbResearchpageEntityResponse
  smbSiteConfig(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbSiteConfigEntityResponse
  smbTopicspage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbTopicspageEntityResponse
  stories(filters: StoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryEntityResponseCollection
  story(id: ID, locale: I18NLocaleCode): StoryEntityResponse
  topic(id: ID, locale: I18NLocaleCode): TopicEntityResponse
  topics(filters: TopicFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TopicEntityResponseCollection
  tour(id: ID, locale: I18NLocaleCode): TourEntityResponse
  tours(filters: TourFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type strapi_kgmMutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCategory(data: CategoryInput!, locale: I18NLocaleCode): CategoryEntityResponse
  createCategoryLocalization(data: CategoryInput, id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  createIndexLocalization(data: IndexInput, id: ID, locale: I18NLocaleCode): IndexEntityResponse
  createRoom(data: RoomInput!, locale: I18NLocaleCode): RoomEntityResponse
  createRoomLocalization(data: RoomInput, id: ID, locale: I18NLocaleCode): RoomEntityResponse
  createSiteConfigLocalization(data: SiteConfigInput, id: ID, locale: I18NLocaleCode): SiteConfigEntityResponse
  createSmbGuidepageLocalization(data: SmbGuidepageInput, id: ID, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  createSmbLandingpageLocalization(data: SmbLandingpageInput, id: ID, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  createSmbResearchpageLocalization(data: SmbResearchpageInput, id: ID, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  createSmbSiteConfigLocalization(data: SmbSiteConfigInput, id: ID, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  createSmbTopicspageLocalization(data: SmbTopicspageInput, id: ID, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  createStory(data: StoryInput!, locale: I18NLocaleCode): StoryEntityResponse
  createStoryLocalization(data: StoryInput, id: ID, locale: I18NLocaleCode): StoryEntityResponse
  createTopic(data: TopicInput!, locale: I18NLocaleCode): TopicEntityResponse
  createTopicLocalization(data: TopicInput, id: ID, locale: I18NLocaleCode): TopicEntityResponse
  createTour(data: TourInput!, locale: I18NLocaleCode): TourEntityResponse
  createTourLocalization(data: TourInput, id: ID, locale: I18NLocaleCode): TourEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCategory(id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  deleteIndex(locale: I18NLocaleCode): IndexEntityResponse
  deleteQrReader: QrReaderEntityResponse
  deleteRoom(id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  deleteSiteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  deleteSmbGuidepage(locale: I18NLocaleCode): SmbGuidepageEntityResponse
  deleteSmbLandingpage(locale: I18NLocaleCode): SmbLandingpageEntityResponse
  deleteSmbResearchpage(locale: I18NLocaleCode): SmbResearchpageEntityResponse
  deleteSmbSiteConfig(locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  deleteSmbTopicspage(locale: I18NLocaleCode): SmbTopicspageEntityResponse
  deleteStory(id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  deleteTopic(id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  deleteTour(id: ID!, locale: I18NLocaleCode): TourEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(data: CategoryInput!, id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateIndex(data: IndexInput!, locale: I18NLocaleCode): IndexEntityResponse
  updateQrReader(data: QrReaderInput!): QrReaderEntityResponse
  updateRoom(data: RoomInput!, id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  updateSiteConfig(data: SiteConfigInput!, locale: I18NLocaleCode): SiteConfigEntityResponse
  updateSmbGuidepage(data: SmbGuidepageInput!, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  updateSmbLandingpage(data: SmbLandingpageInput!, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  updateSmbResearchpage(data: SmbResearchpageInput!, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  updateSmbSiteConfig(data: SmbSiteConfigInput!, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  updateSmbTopicspage(data: SmbTopicspageInput!, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  updateStory(data: StoryInput!, id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  updateTopic(data: TopicInput!, id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  updateTour(data: TourInput!, id: ID!, locale: I18NLocaleCode): TourEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type strapi_kgmQuery {
  categories(filters: CategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  index(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): IndexEntityResponse
  me: UsersPermissionsMe
  qrReader(publicationState: PublicationState = LIVE): QrReaderEntityResponse
  room(id: ID, locale: I18NLocaleCode): RoomEntityResponse
  rooms(filters: RoomFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomEntityResponseCollection
  siteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  smbGuidepage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbGuidepageEntityResponse
  smbLandingpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbLandingpageEntityResponse
  smbResearchpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbResearchpageEntityResponse
  smbSiteConfig(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbSiteConfigEntityResponse
  smbTopicspage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbTopicspageEntityResponse
  stories(filters: StoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryEntityResponseCollection
  story(id: ID, locale: I18NLocaleCode): StoryEntityResponse
  topic(id: ID, locale: I18NLocaleCode): TopicEntityResponse
  topics(filters: TopicFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TopicEntityResponseCollection
  tour(id: ID, locale: I18NLocaleCode): TourEntityResponse
  tours(filters: TourFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type strapi_smbMutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCategory(data: CategoryInput!, locale: I18NLocaleCode): CategoryEntityResponse
  createCategoryLocalization(data: CategoryInput, id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  createIndexLocalization(data: IndexInput, id: ID, locale: I18NLocaleCode): IndexEntityResponse
  createRoom(data: RoomInput!, locale: I18NLocaleCode): RoomEntityResponse
  createRoomLocalization(data: RoomInput, id: ID, locale: I18NLocaleCode): RoomEntityResponse
  createSiteConfigLocalization(data: SiteConfigInput, id: ID, locale: I18NLocaleCode): SiteConfigEntityResponse
  createSmbGuidepageLocalization(data: SmbGuidepageInput, id: ID, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  createSmbLandingpageLocalization(data: SmbLandingpageInput, id: ID, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  createSmbResearchpageLocalization(data: SmbResearchpageInput, id: ID, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  createSmbSiteConfigLocalization(data: SmbSiteConfigInput, id: ID, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  createSmbTopicspageLocalization(data: SmbTopicspageInput, id: ID, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  createStory(data: StoryInput!, locale: I18NLocaleCode): StoryEntityResponse
  createStoryLocalization(data: StoryInput, id: ID, locale: I18NLocaleCode): StoryEntityResponse
  createTopic(data: TopicInput!, locale: I18NLocaleCode): TopicEntityResponse
  createTopicLocalization(data: TopicInput, id: ID, locale: I18NLocaleCode): TopicEntityResponse
  createTour(data: TourInput!, locale: I18NLocaleCode): TourEntityResponse
  createTourLocalization(data: TourInput, id: ID, locale: I18NLocaleCode): TourEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCategory(id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  deleteIndex(locale: I18NLocaleCode): IndexEntityResponse
  deleteQrReader: QrReaderEntityResponse
  deleteRoom(id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  deleteSiteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  deleteSmbGuidepage(locale: I18NLocaleCode): SmbGuidepageEntityResponse
  deleteSmbLandingpage(locale: I18NLocaleCode): SmbLandingpageEntityResponse
  deleteSmbResearchpage(locale: I18NLocaleCode): SmbResearchpageEntityResponse
  deleteSmbSiteConfig(locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  deleteSmbTopicspage(locale: I18NLocaleCode): SmbTopicspageEntityResponse
  deleteStory(id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  deleteTopic(id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  deleteTour(id: ID!, locale: I18NLocaleCode): TourEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCategory(data: CategoryInput!, id: ID!, locale: I18NLocaleCode): CategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateIndex(data: IndexInput!, locale: I18NLocaleCode): IndexEntityResponse
  updateQrReader(data: QrReaderInput!): QrReaderEntityResponse
  updateRoom(data: RoomInput!, id: ID!, locale: I18NLocaleCode): RoomEntityResponse
  updateSiteConfig(data: SiteConfigInput!, locale: I18NLocaleCode): SiteConfigEntityResponse
  updateSmbGuidepage(data: SmbGuidepageInput!, locale: I18NLocaleCode): SmbGuidepageEntityResponse
  updateSmbLandingpage(data: SmbLandingpageInput!, locale: I18NLocaleCode): SmbLandingpageEntityResponse
  updateSmbResearchpage(data: SmbResearchpageInput!, locale: I18NLocaleCode): SmbResearchpageEntityResponse
  updateSmbSiteConfig(data: SmbSiteConfigInput!, locale: I18NLocaleCode): SmbSiteConfigEntityResponse
  updateSmbTopicspage(data: SmbTopicspageInput!, locale: I18NLocaleCode): SmbTopicspageEntityResponse
  updateStory(data: StoryInput!, id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  updateTopic(data: TopicInput!, id: ID!, locale: I18NLocaleCode): TopicEntityResponse
  updateTour(data: TourInput!, id: ID!, locale: I18NLocaleCode): TourEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type strapi_smbQuery {
  categories(filters: CategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID, locale: I18NLocaleCode): CategoryEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  index(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): IndexEntityResponse
  me: UsersPermissionsMe
  qrReader(publicationState: PublicationState = LIVE): QrReaderEntityResponse
  room(id: ID, locale: I18NLocaleCode): RoomEntityResponse
  rooms(filters: RoomFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RoomEntityResponseCollection
  siteConfig(locale: I18NLocaleCode): SiteConfigEntityResponse
  smbGuidepage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbGuidepageEntityResponse
  smbLandingpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbLandingpageEntityResponse
  smbResearchpage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbResearchpageEntityResponse
  smbSiteConfig(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbSiteConfigEntityResponse
  smbTopicspage(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): SmbTopicspageEntityResponse
  stories(filters: StoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StoryEntityResponseCollection
  story(id: ID, locale: I18NLocaleCode): StoryEntityResponse
  topic(id: ID, locale: I18NLocaleCode): TopicEntityResponse
  topics(filters: TopicFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TopicEntityResponseCollection
  tour(id: ID, locale: I18NLocaleCode): TourEntityResponse
  tours(filters: TourFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TourEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type subscription_root {
  """
  fetch data from the table: "smb.assortments"
  """
  smb_assortments("""distinct select on columns""" distinct_on: [smb_assortments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_order_by!], """filter the rows returned""" where: smb_assortments_bool_exp): [smb_assortments!]!
  """
  fetch aggregated fields from the table: "smb.assortments"
  """
  smb_assortments_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_order_by!], """filter the rows returned""" where: smb_assortments_bool_exp): smb_assortments_aggregate!
  """
  fetch data from the table: "smb.assortments" using primary key columns
  """
  smb_assortments_by_pk(id: bigint!): smb_assortments
  """
  fetch data from the table: "smb.assortments_objects"
  """
  smb_assortments_objects("""distinct select on columns""" distinct_on: [smb_assortments_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_objects_order_by!], """filter the rows returned""" where: smb_assortments_objects_bool_exp): [smb_assortments_objects!]!
  """
  fetch aggregated fields from the table: "smb.assortments_objects"
  """
  smb_assortments_objects_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_objects_order_by!], """filter the rows returned""" where: smb_assortments_objects_bool_exp): smb_assortments_objects_aggregate!
  """
  fetch data from the table: "smb.assortments_objects" using primary key columns
  """
  smb_assortments_objects_by_pk(id: bigint!): smb_assortments_objects
  """
  fetch data from the table in a streaming manner: "smb.assortments_objects"
  """
  smb_assortments_objects_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_assortments_objects_stream_cursor_input]!, """filter the rows returned""" where: smb_assortments_objects_bool_exp): [smb_assortments_objects!]!
  """
  fetch data from the table in a streaming manner: "smb.assortments"
  """
  smb_assortments_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_assortments_stream_cursor_input]!, """filter the rows returned""" where: smb_assortments_bool_exp): [smb_assortments!]!
  """
  fetch data from the table: "smb.assortments_translation"
  """
  smb_assortments_translation("""distinct select on columns""" distinct_on: [smb_assortments_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_translation_order_by!], """filter the rows returned""" where: smb_assortments_translation_bool_exp): [smb_assortments_translation!]!
  """
  fetch aggregated fields from the table: "smb.assortments_translation"
  """
  smb_assortments_translation_aggregate("""distinct select on columns""" distinct_on: [smb_assortments_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_assortments_translation_order_by!], """filter the rows returned""" where: smb_assortments_translation_bool_exp): smb_assortments_translation_aggregate!
  """
  fetch data from the table: "smb.assortments_translation" using primary key columns
  """
  smb_assortments_translation_by_pk(id: bigint!): smb_assortments_translation
  """
  fetch data from the table in a streaming manner: "smb.assortments_translation"
  """
  smb_assortments_translation_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_assortments_translation_stream_cursor_input]!, """filter the rows returned""" where: smb_assortments_translation_bool_exp): [smb_assortments_translation!]!
  """
  fetch data from the table: "smb.attachments"
  """
  smb_attachments("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): [smb_attachments!]!
  """
  fetch aggregated fields from the table: "smb.attachments"
  """
  smb_attachments_aggregate("""distinct select on columns""" distinct_on: [smb_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attachments_order_by!], """filter the rows returned""" where: smb_attachments_bool_exp): smb_attachments_aggregate!
  """
  fetch data from the table: "smb.attachments" using primary key columns
  """
  smb_attachments_by_pk(id: bigint!, object_id: bigint!): smb_attachments
  """
  fetch data from the table in a streaming manner: "smb.attachments"
  """
  smb_attachments_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_attachments_stream_cursor_input]!, """filter the rows returned""" where: smb_attachments_bool_exp): [smb_attachments!]!
  """
  fetch data from the table: "smb.attribute_approval"
  """
  smb_attribute_approval("""distinct select on columns""" distinct_on: [smb_attribute_approval_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_approval_order_by!], """filter the rows returned""" where: smb_attribute_approval_bool_exp): [smb_attribute_approval!]!
  """
  fetch aggregated fields from the table: "smb.attribute_approval"
  """
  smb_attribute_approval_aggregate("""distinct select on columns""" distinct_on: [smb_attribute_approval_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_approval_order_by!], """filter the rows returned""" where: smb_attribute_approval_bool_exp): smb_attribute_approval_aggregate!
  """
  fetch data from the table: "smb.attribute_approval" using primary key columns
  """
  smb_attribute_approval_by_pk(id: bigint!): smb_attribute_approval
  """
  fetch data from the table in a streaming manner: "smb.attribute_approval"
  """
  smb_attribute_approval_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_attribute_approval_stream_cursor_input]!, """filter the rows returned""" where: smb_attribute_approval_bool_exp): [smb_attribute_approval!]!
  """
  fetch data from the table: "smb.attribute_translations"
  """
  smb_attribute_translations("""distinct select on columns""" distinct_on: [smb_attribute_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_translations_order_by!], """filter the rows returned""" where: smb_attribute_translations_bool_exp): [smb_attribute_translations!]!
  """
  fetch aggregated fields from the table: "smb.attribute_translations"
  """
  smb_attribute_translations_aggregate("""distinct select on columns""" distinct_on: [smb_attribute_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attribute_translations_order_by!], """filter the rows returned""" where: smb_attribute_translations_bool_exp): smb_attribute_translations_aggregate!
  """
  fetch data from the table: "smb.attribute_translations" using primary key columns
  """
  smb_attribute_translations_by_pk(id: bigint!): smb_attribute_translations
  """
  fetch data from the table in a streaming manner: "smb.attribute_translations"
  """
  smb_attribute_translations_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_attribute_translations_stream_cursor_input]!, """filter the rows returned""" where: smb_attribute_translations_bool_exp): [smb_attribute_translations!]!
  """
  fetch data from the table: "smb.attributes"
  """
  smb_attributes("""distinct select on columns""" distinct_on: [smb_attributes_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attributes_order_by!], """filter the rows returned""" where: smb_attributes_bool_exp): [smb_attributes!]!
  """
  fetch aggregated fields from the table: "smb.attributes"
  """
  smb_attributes_aggregate("""distinct select on columns""" distinct_on: [smb_attributes_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_attributes_order_by!], """filter the rows returned""" where: smb_attributes_bool_exp): smb_attributes_aggregate!
  """
  fetch data from the table: "smb.attributes" using primary key columns
  """
  smb_attributes_by_pk(key: String!): smb_attributes
  """
  fetch data from the table in a streaming manner: "smb.attributes"
  """
  smb_attributes_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_attributes_stream_cursor_input]!, """filter the rows returned""" where: smb_attributes_bool_exp): [smb_attributes!]!
  """
  fetch data from the table: "smb.blocked_attachments"
  """
  smb_blocked_attachments("""distinct select on columns""" distinct_on: [smb_blocked_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_blocked_attachments_order_by!], """filter the rows returned""" where: smb_blocked_attachments_bool_exp): [smb_blocked_attachments!]!
  """
  fetch aggregated fields from the table: "smb.blocked_attachments"
  """
  smb_blocked_attachments_aggregate("""distinct select on columns""" distinct_on: [smb_blocked_attachments_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_blocked_attachments_order_by!], """filter the rows returned""" where: smb_blocked_attachments_bool_exp): smb_blocked_attachments_aggregate!
  """
  fetch data from the table: "smb.blocked_attachments" using primary key columns
  """
  smb_blocked_attachments_by_pk(id: bigint!): smb_blocked_attachments
  """
  fetch data from the table in a streaming manner: "smb.blocked_attachments"
  """
  smb_blocked_attachments_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_blocked_attachments_stream_cursor_input]!, """filter the rows returned""" where: smb_blocked_attachments_bool_exp): [smb_blocked_attachments!]!
  """
  fetch data from the table: "smb.buildings"
  """
  smb_buildings("""distinct select on columns""" distinct_on: [smb_buildings_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_buildings_order_by!], """filter the rows returned""" where: smb_buildings_bool_exp): [smb_buildings!]!
  """
  fetch aggregated fields from the table: "smb.buildings"
  """
  smb_buildings_aggregate("""distinct select on columns""" distinct_on: [smb_buildings_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_buildings_order_by!], """filter the rows returned""" where: smb_buildings_bool_exp): smb_buildings_aggregate!
  """
  fetch data from the table: "smb.buildings" using primary key columns
  """
  smb_buildings_by_pk(key: String!): smb_buildings
  """
  fetch data from the table in a streaming manner: "smb.buildings"
  """
  smb_buildings_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_buildings_stream_cursor_input]!, """filter the rows returned""" where: smb_buildings_bool_exp): [smb_buildings!]!
  """
  fetch data from the table: "smb.collections"
  """
  smb_collections("""distinct select on columns""" distinct_on: [smb_collections_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_collections_order_by!], """filter the rows returned""" where: smb_collections_bool_exp): [smb_collections!]!
  """
  fetch aggregated fields from the table: "smb.collections"
  """
  smb_collections_aggregate("""distinct select on columns""" distinct_on: [smb_collections_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_collections_order_by!], """filter the rows returned""" where: smb_collections_bool_exp): smb_collections_aggregate!
  """
  fetch data from the table: "smb.collections" using primary key columns
  """
  smb_collections_by_pk(key: String!): smb_collections
  """
  fetch data from the table in a streaming manner: "smb.collections"
  """
  smb_collections_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_collections_stream_cursor_input]!, """filter the rows returned""" where: smb_collections_bool_exp): [smb_collections!]!
  """
  fetch data from the table: "smb.cultural_references"
  """
  smb_cultural_references("""distinct select on columns""" distinct_on: [smb_cultural_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_cultural_references_order_by!], """filter the rows returned""" where: smb_cultural_references_bool_exp): [smb_cultural_references!]!
  """
  fetch aggregated fields from the table: "smb.cultural_references"
  """
  smb_cultural_references_aggregate("""distinct select on columns""" distinct_on: [smb_cultural_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_cultural_references_order_by!], """filter the rows returned""" where: smb_cultural_references_bool_exp): smb_cultural_references_aggregate!
  """
  fetch data from the table: "smb.cultural_references" using primary key columns
  """
  smb_cultural_references_by_pk(id: bigint!): smb_cultural_references
  """
  fetch data from the table in a streaming manner: "smb.cultural_references"
  """
  smb_cultural_references_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_cultural_references_stream_cursor_input]!, """filter the rows returned""" where: smb_cultural_references_bool_exp): [smb_cultural_references!]!
  """
  fetch data from the table: "smb.exhibitions"
  """
  smb_exhibitions("""distinct select on columns""" distinct_on: [smb_exhibitions_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_order_by!], """filter the rows returned""" where: smb_exhibitions_bool_exp): [smb_exhibitions!]!
  """
  fetch aggregated fields from the table: "smb.exhibitions"
  """
  smb_exhibitions_aggregate("""distinct select on columns""" distinct_on: [smb_exhibitions_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_order_by!], """filter the rows returned""" where: smb_exhibitions_bool_exp): smb_exhibitions_aggregate!
  """
  fetch data from the table: "smb.exhibitions" using primary key columns
  """
  smb_exhibitions_by_pk(id: bigint!): smb_exhibitions
  """
  fetch data from the table: "smb.exhibitions_objects"
  """
  smb_exhibitions_objects("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): [smb_exhibitions_objects!]!
  """
  fetch aggregated fields from the table: "smb.exhibitions_objects"
  """
  smb_exhibitions_objects_aggregate("""distinct select on columns""" distinct_on: [smb_exhibitions_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_exhibitions_objects_order_by!], """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): smb_exhibitions_objects_aggregate!
  """
  fetch data from the table: "smb.exhibitions_objects" using primary key columns
  """
  smb_exhibitions_objects_by_pk(id: bigint!): smb_exhibitions_objects
  """
  fetch data from the table in a streaming manner: "smb.exhibitions_objects"
  """
  smb_exhibitions_objects_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_exhibitions_objects_stream_cursor_input]!, """filter the rows returned""" where: smb_exhibitions_objects_bool_exp): [smb_exhibitions_objects!]!
  """
  fetch data from the table in a streaming manner: "smb.exhibitions"
  """
  smb_exhibitions_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_exhibitions_stream_cursor_input]!, """filter the rows returned""" where: smb_exhibitions_bool_exp): [smb_exhibitions!]!
  """
  fetch data from the table: "smb.geographical_references"
  """
  smb_geographical_references("""distinct select on columns""" distinct_on: [smb_geographical_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_geographical_references_order_by!], """filter the rows returned""" where: smb_geographical_references_bool_exp): [smb_geographical_references!]!
  """
  fetch aggregated fields from the table: "smb.geographical_references"
  """
  smb_geographical_references_aggregate("""distinct select on columns""" distinct_on: [smb_geographical_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_geographical_references_order_by!], """filter the rows returned""" where: smb_geographical_references_bool_exp): smb_geographical_references_aggregate!
  """
  fetch data from the table: "smb.geographical_references" using primary key columns
  """
  smb_geographical_references_by_pk(id: bigint!): smb_geographical_references
  """
  fetch data from the table in a streaming manner: "smb.geographical_references"
  """
  smb_geographical_references_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_geographical_references_stream_cursor_input]!, """filter the rows returned""" where: smb_geographical_references_bool_exp): [smb_geographical_references!]!
  """
  fetch data from the table: "smb.highlights"
  """
  smb_highlights("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): [smb_highlights!]!
  """
  fetch aggregated fields from the table: "smb.highlights"
  """
  smb_highlights_aggregate("""distinct select on columns""" distinct_on: [smb_highlights_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_highlights_order_by!], """filter the rows returned""" where: smb_highlights_bool_exp): smb_highlights_aggregate!
  """
  fetch data from the table: "smb.highlights" using primary key columns
  """
  smb_highlights_by_pk(id: bigint!): smb_highlights
  """
  fetch data from the table in a streaming manner: "smb.highlights"
  """
  smb_highlights_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_highlights_stream_cursor_input]!, """filter the rows returned""" where: smb_highlights_bool_exp): [smb_highlights!]!
  """
  fetch data from the table: "smb.ignoreable_keys"
  """
  smb_ignoreable_keys("""distinct select on columns""" distinct_on: [smb_ignoreable_keys_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_ignoreable_keys_order_by!], """filter the rows returned""" where: smb_ignoreable_keys_bool_exp): [smb_ignoreable_keys!]!
  """
  fetch aggregated fields from the table: "smb.ignoreable_keys"
  """
  smb_ignoreable_keys_aggregate("""distinct select on columns""" distinct_on: [smb_ignoreable_keys_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_ignoreable_keys_order_by!], """filter the rows returned""" where: smb_ignoreable_keys_bool_exp): smb_ignoreable_keys_aggregate!
  """
  fetch data from the table: "smb.ignoreable_keys" using primary key columns
  """
  smb_ignoreable_keys_by_pk(id: bigint!): smb_ignoreable_keys
  """
  fetch data from the table in a streaming manner: "smb.ignoreable_keys"
  """
  smb_ignoreable_keys_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_ignoreable_keys_stream_cursor_input]!, """filter the rows returned""" where: smb_ignoreable_keys_bool_exp): [smb_ignoreable_keys!]!
  """
  fetch data from the table: "smb.language"
  """
  smb_language("""distinct select on columns""" distinct_on: [smb_language_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_language_order_by!], """filter the rows returned""" where: smb_language_bool_exp): [smb_language!]!
  """
  fetch aggregated fields from the table: "smb.language"
  """
  smb_language_aggregate("""distinct select on columns""" distinct_on: [smb_language_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_language_order_by!], """filter the rows returned""" where: smb_language_bool_exp): smb_language_aggregate!
  """
  fetch data from the table: "smb.language" using primary key columns
  """
  smb_language_by_pk(id: bigint!): smb_language
  """
  fetch data from the table in a streaming manner: "smb.language"
  """
  smb_language_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_language_stream_cursor_input]!, """filter the rows returned""" where: smb_language_bool_exp): [smb_language!]!
  """
  fetch data from the table: "smb.licenses"
  """
  smb_licenses("""distinct select on columns""" distinct_on: [smb_licenses_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_order_by!], """filter the rows returned""" where: smb_licenses_bool_exp): [smb_licenses!]!
  """
  fetch aggregated fields from the table: "smb.licenses"
  """
  smb_licenses_aggregate("""distinct select on columns""" distinct_on: [smb_licenses_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_order_by!], """filter the rows returned""" where: smb_licenses_bool_exp): smb_licenses_aggregate!
  """
  fetch data from the table: "smb.licenses" using primary key columns
  """
  smb_licenses_by_pk(id: bigint!): smb_licenses
  """
  fetch data from the table in a streaming manner: "smb.licenses"
  """
  smb_licenses_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_licenses_stream_cursor_input]!, """filter the rows returned""" where: smb_licenses_bool_exp): [smb_licenses!]!
  """
  fetch data from the table: "smb.licenses_translation"
  """
  smb_licenses_translation("""distinct select on columns""" distinct_on: [smb_licenses_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_translation_order_by!], """filter the rows returned""" where: smb_licenses_translation_bool_exp): [smb_licenses_translation!]!
  """
  fetch aggregated fields from the table: "smb.licenses_translation"
  """
  smb_licenses_translation_aggregate("""distinct select on columns""" distinct_on: [smb_licenses_translation_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_licenses_translation_order_by!], """filter the rows returned""" where: smb_licenses_translation_bool_exp): smb_licenses_translation_aggregate!
  """
  fetch data from the table: "smb.licenses_translation" using primary key columns
  """
  smb_licenses_translation_by_pk(id: bigint!): smb_licenses_translation
  """
  fetch data from the table in a streaming manner: "smb.licenses_translation"
  """
  smb_licenses_translation_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_licenses_translation_stream_cursor_input]!, """filter the rows returned""" where: smb_licenses_translation_bool_exp): [smb_licenses_translation!]!
  """
  fetch data from the table: "smb.material_references"
  """
  smb_material_references("""distinct select on columns""" distinct_on: [smb_material_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_material_references_order_by!], """filter the rows returned""" where: smb_material_references_bool_exp): [smb_material_references!]!
  """
  fetch aggregated fields from the table: "smb.material_references"
  """
  smb_material_references_aggregate("""distinct select on columns""" distinct_on: [smb_material_references_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_material_references_order_by!], """filter the rows returned""" where: smb_material_references_bool_exp): smb_material_references_aggregate!
  """
  fetch data from the table: "smb.material_references" using primary key columns
  """
  smb_material_references_by_pk(id: bigint!): smb_material_references
  """
  fetch data from the table in a streaming manner: "smb.material_references"
  """
  smb_material_references_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_material_references_stream_cursor_input]!, """filter the rows returned""" where: smb_material_references_bool_exp): [smb_material_references!]!
  """
  fetch data from the table: "smb.objects"
  """
  smb_objects("""distinct select on columns""" distinct_on: [smb_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_objects_order_by!], """filter the rows returned""" where: smb_objects_bool_exp): [smb_objects!]!
  """
  fetch aggregated fields from the table: "smb.objects"
  """
  smb_objects_aggregate("""distinct select on columns""" distinct_on: [smb_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_objects_order_by!], """filter the rows returned""" where: smb_objects_bool_exp): smb_objects_aggregate!
  """
  fetch data from the table: "smb.objects" using primary key columns
  """
  smb_objects_by_pk(id: bigint!): smb_objects
  """
  fetch data from the table in a streaming manner: "smb.objects"
  """
  smb_objects_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_objects_stream_cursor_input]!, """filter the rows returned""" where: smb_objects_bool_exp): [smb_objects!]!
  """
  fetch data from the table: "smb.org_unit"
  """
  smb_org_unit("""distinct select on columns""" distinct_on: [smb_org_unit_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_org_unit_order_by!], """filter the rows returned""" where: smb_org_unit_bool_exp): [smb_org_unit!]!
  """
  fetch aggregated fields from the table: "smb.org_unit"
  """
  smb_org_unit_aggregate("""distinct select on columns""" distinct_on: [smb_org_unit_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_org_unit_order_by!], """filter the rows returned""" where: smb_org_unit_bool_exp): smb_org_unit_aggregate!
  """
  fetch data from the table: "smb.org_unit" using primary key columns
  """
  smb_org_unit_by_pk(id: bigint!): smb_org_unit
  """
  fetch data from the table in a streaming manner: "smb.org_unit"
  """
  smb_org_unit_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_org_unit_stream_cursor_input]!, """filter the rows returned""" where: smb_org_unit_bool_exp): [smb_org_unit!]!
  """
  fetch data from the table: "smb.persons"
  """
  smb_persons("""distinct select on columns""" distinct_on: [smb_persons_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_order_by!], """filter the rows returned""" where: smb_persons_bool_exp): [smb_persons!]!
  """
  fetch aggregated fields from the table: "smb.persons"
  """
  smb_persons_aggregate("""distinct select on columns""" distinct_on: [smb_persons_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_order_by!], """filter the rows returned""" where: smb_persons_bool_exp): smb_persons_aggregate!
  """
  fetch data from the table: "smb.persons" using primary key columns
  """
  smb_persons_by_pk(id: bigint!): smb_persons
  """
  fetch data from the table: "smb.persons_objects"
  """
  smb_persons_objects("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): [smb_persons_objects!]!
  """
  fetch aggregated fields from the table: "smb.persons_objects"
  """
  smb_persons_objects_aggregate("""distinct select on columns""" distinct_on: [smb_persons_objects_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_persons_objects_order_by!], """filter the rows returned""" where: smb_persons_objects_bool_exp): smb_persons_objects_aggregate!
  """
  fetch data from the table: "smb.persons_objects" using primary key columns
  """
  smb_persons_objects_by_pk(id: bigint!): smb_persons_objects
  """
  fetch data from the table in a streaming manner: "smb.persons_objects"
  """
  smb_persons_objects_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_persons_objects_stream_cursor_input]!, """filter the rows returned""" where: smb_persons_objects_bool_exp): [smb_persons_objects!]!
  """
  fetch data from the table in a streaming manner: "smb.persons"
  """
  smb_persons_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_persons_stream_cursor_input]!, """filter the rows returned""" where: smb_persons_bool_exp): [smb_persons!]!
  """
  fetch data from the table: "smb.stt_platform"
  """
  smb_stt_platform("""distinct select on columns""" distinct_on: [smb_stt_platform_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_order_by!], """filter the rows returned""" where: smb_stt_platform_bool_exp): [smb_stt_platform!]!
  """
  fetch aggregated fields from the table: "smb.stt_platform"
  """
  smb_stt_platform_aggregate("""distinct select on columns""" distinct_on: [smb_stt_platform_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_order_by!], """filter the rows returned""" where: smb_stt_platform_bool_exp): smb_stt_platform_aggregate!
  """
  fetch data from the table: "smb.stt_platform" using primary key columns
  """
  smb_stt_platform_by_pk(value: String!): smb_stt_platform
  """
  fetch data from the table: "smb.stt_platform_config"
  """
  smb_stt_platform_config("""distinct select on columns""" distinct_on: [smb_stt_platform_config_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_config_order_by!], """filter the rows returned""" where: smb_stt_platform_config_bool_exp): [smb_stt_platform_config!]!
  """
  fetch aggregated fields from the table: "smb.stt_platform_config"
  """
  smb_stt_platform_config_aggregate("""distinct select on columns""" distinct_on: [smb_stt_platform_config_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_stt_platform_config_order_by!], """filter the rows returned""" where: smb_stt_platform_config_bool_exp): smb_stt_platform_config_aggregate!
  """
  fetch data from the table: "smb.stt_platform_config" using primary key columns
  """
  smb_stt_platform_config_by_pk(id: bigint!): smb_stt_platform_config
  """
  fetch data from the table in a streaming manner: "smb.stt_platform_config"
  """
  smb_stt_platform_config_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_stt_platform_config_stream_cursor_input]!, """filter the rows returned""" where: smb_stt_platform_config_bool_exp): [smb_stt_platform_config!]!
  """
  fetch data from the table in a streaming manner: "smb.stt_platform"
  """
  smb_stt_platform_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_stt_platform_stream_cursor_input]!, """filter the rows returned""" where: smb_stt_platform_bool_exp): [smb_stt_platform!]!
  """
  fetch data from the table: "smb.sync_cycle_type"
  """
  smb_sync_cycle_type("""distinct select on columns""" distinct_on: [smb_sync_cycle_type_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycle_type_order_by!], """filter the rows returned""" where: smb_sync_cycle_type_bool_exp): [smb_sync_cycle_type!]!
  """
  fetch aggregated fields from the table: "smb.sync_cycle_type"
  """
  smb_sync_cycle_type_aggregate("""distinct select on columns""" distinct_on: [smb_sync_cycle_type_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycle_type_order_by!], """filter the rows returned""" where: smb_sync_cycle_type_bool_exp): smb_sync_cycle_type_aggregate!
  """
  fetch data from the table: "smb.sync_cycle_type" using primary key columns
  """
  smb_sync_cycle_type_by_pk(value: String!): smb_sync_cycle_type
  """
  fetch data from the table in a streaming manner: "smb.sync_cycle_type"
  """
  smb_sync_cycle_type_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_sync_cycle_type_stream_cursor_input]!, """filter the rows returned""" where: smb_sync_cycle_type_bool_exp): [smb_sync_cycle_type!]!
  """
  fetch data from the table: "smb.sync_cycles"
  """
  smb_sync_cycles("""distinct select on columns""" distinct_on: [smb_sync_cycles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycles_order_by!], """filter the rows returned""" where: smb_sync_cycles_bool_exp): [smb_sync_cycles!]!
  """
  fetch aggregated fields from the table: "smb.sync_cycles"
  """
  smb_sync_cycles_aggregate("""distinct select on columns""" distinct_on: [smb_sync_cycles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_sync_cycles_order_by!], """filter the rows returned""" where: smb_sync_cycles_bool_exp): smb_sync_cycles_aggregate!
  """
  fetch data from the table: "smb.sync_cycles" using primary key columns
  """
  smb_sync_cycles_by_pk(id: bigint!): smb_sync_cycles
  """
  fetch data from the table in a streaming manner: "smb.sync_cycles"
  """
  smb_sync_cycles_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_sync_cycles_stream_cursor_input]!, """filter the rows returned""" where: smb_sync_cycles_bool_exp): [smb_sync_cycles!]!
  """
  fetch data from the table: "smb.thesaurus"
  """
  smb_thesaurus("""distinct select on columns""" distinct_on: [smb_thesaurus_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_order_by!], """filter the rows returned""" where: smb_thesaurus_bool_exp): [smb_thesaurus!]!
  """
  fetch aggregated fields from the table: "smb.thesaurus"
  """
  smb_thesaurus_aggregate("""distinct select on columns""" distinct_on: [smb_thesaurus_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_order_by!], """filter the rows returned""" where: smb_thesaurus_bool_exp): smb_thesaurus_aggregate!
  """
  fetch data from the table: "smb.thesaurus" using primary key columns
  """
  smb_thesaurus_by_pk(id: bigint!): smb_thesaurus
  """
  fetch data from the table in a streaming manner: "smb.thesaurus"
  """
  smb_thesaurus_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_thesaurus_stream_cursor_input]!, """filter the rows returned""" where: smb_thesaurus_bool_exp): [smb_thesaurus!]!
  """
  fetch data from the table: "smb.thesaurus_translations"
  """
  smb_thesaurus_translations("""distinct select on columns""" distinct_on: [smb_thesaurus_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_translations_order_by!], """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): [smb_thesaurus_translations!]!
  """
  fetch aggregated fields from the table: "smb.thesaurus_translations"
  """
  smb_thesaurus_translations_aggregate("""distinct select on columns""" distinct_on: [smb_thesaurus_translations_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_thesaurus_translations_order_by!], """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): smb_thesaurus_translations_aggregate!
  """
  fetch data from the table: "smb.thesaurus_translations" using primary key columns
  """
  smb_thesaurus_translations_by_pk(id: bigint!): smb_thesaurus_translations
  """
  fetch data from the table in a streaming manner: "smb.thesaurus_translations"
  """
  smb_thesaurus_translations_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_thesaurus_translations_stream_cursor_input]!, """filter the rows returned""" where: smb_thesaurus_translations_bool_exp): [smb_thesaurus_translations!]!
  """
  fetch data from the table: "smb.user"
  """
  smb_user("""distinct select on columns""" distinct_on: [smb_user_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_order_by!], """filter the rows returned""" where: smb_user_bool_exp): [smb_user!]!
  """
  fetch aggregated fields from the table: "smb.user"
  """
  smb_user_aggregate("""distinct select on columns""" distinct_on: [smb_user_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_order_by!], """filter the rows returned""" where: smb_user_bool_exp): smb_user_aggregate!
  """
  fetch data from the table: "smb.user" using primary key columns
  """
  smb_user_by_pk(id: uuid!): smb_user
  """
  fetch data from the table: "smb.user_role"
  """
  smb_user_role("""distinct select on columns""" distinct_on: [smb_user_role_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_role_order_by!], """filter the rows returned""" where: smb_user_role_bool_exp): [smb_user_role!]!
  """
  fetch aggregated fields from the table: "smb.user_role"
  """
  smb_user_role_aggregate("""distinct select on columns""" distinct_on: [smb_user_role_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [smb_user_role_order_by!], """filter the rows returned""" where: smb_user_role_bool_exp): smb_user_role_aggregate!
  """
  fetch data from the table: "smb.user_role" using primary key columns
  """
  smb_user_role_by_pk(id: bigint!): smb_user_role
  """
  fetch data from the table in a streaming manner: "smb.user_role"
  """
  smb_user_role_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_user_role_stream_cursor_input]!, """filter the rows returned""" where: smb_user_role_bool_exp): [smb_user_role!]!
  """
  fetch data from the table in a streaming manner: "smb.user"
  """
  smb_user_stream("""maximum number of rows returned in a single batch""" batch_size: Int!, """cursor to stream the results returned by the query""" cursor: [smb_user_stream_cursor_input]!, """filter the rows returned""" where: smb_user_bool_exp): [smb_user!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
