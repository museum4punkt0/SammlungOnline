//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.07.02 at 02:33:59 PM MESZ 
//


package de.smbonline.mdssync.jaxb.search.request;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Or complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Or">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="2">
 *           &lt;element name="and" type="{http://www.zetcom.com/ria/ws/module/search}And"/>
 *           &lt;element name="or" type="{http://www.zetcom.com/ria/ws/module/search}Or"/>
 *           &lt;element name="not" type="{http://www.zetcom.com/ria/ws/module/search}Not"/>
 *           &lt;element name="betweenIncl" type="{http://www.zetcom.com/ria/ws/module/search}BetweenIncl"/>
 *           &lt;element name="betweenExcl" type="{http://www.zetcom.com/ria/ws/module/search}BetweenExcl"/>
 *           &lt;element name="contains" type="{http://www.zetcom.com/ria/ws/module/search}Contains"/>
 *           &lt;element name="endsWithField" type="{http://www.zetcom.com/ria/ws/module/search}EndsWithField"/>
 *           &lt;element name="endsWithTerm" type="{http://www.zetcom.com/ria/ws/module/search}EndsWithTerm"/>
 *           &lt;element name="equalsField" type="{http://www.zetcom.com/ria/ws/module/search}EqualsField"/>
 *           &lt;element name="equalsTerm" type="{http://www.zetcom.com/ria/ws/module/search}EqualsTerm"/>
 *           &lt;element name="greater" type="{http://www.zetcom.com/ria/ws/module/search}Greater"/>
 *           &lt;element name="greaterEquals" type="{http://www.zetcom.com/ria/ws/module/search}GreaterEquals"/>
 *           &lt;element name="isNotNull" type="{http://www.zetcom.com/ria/ws/module/search}IsNotNull"/>
 *           &lt;element name="isNull" type="{http://www.zetcom.com/ria/ws/module/search}IsNull"/>
 *           &lt;element name="isNotBlank" type="{http://www.zetcom.com/ria/ws/module/search}IsNotBlank"/>
 *           &lt;element name="isBlank" type="{http://www.zetcom.com/ria/ws/module/search}IsBlank"/>
 *           &lt;element name="less" type="{http://www.zetcom.com/ria/ws/module/search}Less"/>
 *           &lt;element name="lessEquals" type="{http://www.zetcom.com/ria/ws/module/search}LessEquals"/>
 *           &lt;element name="notEqualsField" type="{http://www.zetcom.com/ria/ws/module/search}NotEqualsField"/>
 *           &lt;element name="notEqualsTerm" type="{http://www.zetcom.com/ria/ws/module/search}NotEqualsTerm"/>
 *           &lt;element name="startsWithField" type="{http://www.zetcom.com/ria/ws/module/search}StartsWithField"/>
 *           &lt;element name="startsWithTerm" type="{http://www.zetcom.com/ria/ws/module/search}StartsWithTerm"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Or", propOrder = {
    "andOrOrOrNot"
})
public class Or {

    @XmlElements({
        @XmlElement(name = "betweenExcl", type = BetweenExcl.class),
        @XmlElement(name = "greater", type = Greater.class),
        @XmlElement(name = "isBlank", type = IsBlank.class),
        @XmlElement(name = "notEqualsField", type = NotEqualsField.class),
        @XmlElement(name = "equalsField", type = EqualsField.class),
        @XmlElement(name = "greaterEquals", type = GreaterEquals.class),
        @XmlElement(name = "lessEquals", type = LessEquals.class),
        @XmlElement(name = "and", type = And.class),
        @XmlElement(name = "or", type = Or.class),
        @XmlElement(name = "startsWithField", type = StartsWithField.class),
        @XmlElement(name = "betweenIncl", type = BetweenIncl.class),
        @XmlElement(name = "less", type = Less.class),
        @XmlElement(name = "contains", type = Contains.class),
        @XmlElement(name = "not", type = Not.class),
        @XmlElement(name = "startsWithTerm", type = StartsWithTerm.class),
        @XmlElement(name = "endsWithTerm", type = EndsWithTerm.class),
        @XmlElement(name = "isNotBlank", type = IsNotBlank.class),
        @XmlElement(name = "equalsTerm", type = EqualsTerm.class),
        @XmlElement(name = "isNotNull", type = IsNotNull.class),
        @XmlElement(name = "endsWithField", type = EndsWithField.class),
        @XmlElement(name = "isNull", type = IsNull.class),
        @XmlElement(name = "notEqualsTerm", type = NotEqualsTerm.class)
    })
    protected List<Object> andOrOrOrNot;

    /**
     * Gets the value of the andOrOrOrNot property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the andOrOrOrNot property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAndOrOrOrNot().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BetweenExcl }
     * {@link Greater }
     * {@link IsBlank }
     * {@link NotEqualsField }
     * {@link EqualsField }
     * {@link GreaterEquals }
     * {@link LessEquals }
     * {@link And }
     * {@link Or }
     * {@link StartsWithField }
     * {@link BetweenIncl }
     * {@link Less }
     * {@link Contains }
     * {@link Not }
     * {@link StartsWithTerm }
     * {@link EndsWithTerm }
     * {@link IsNotBlank }
     * {@link EqualsTerm }
     * {@link IsNotNull }
     * {@link EndsWithField }
     * {@link IsNull }
     * {@link NotEqualsTerm }
     * 
     * 
     */
    public List<Object> getAndOrOrOrNot() {
        if (andOrOrOrNot == null) {
            andOrOrOrNot = new ArrayList<Object>();
        }
        return this.andOrOrOrNot;
    }

}
