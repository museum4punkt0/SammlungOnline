# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: query_root
    subscription: subscription_root
}

"query root"
type query_root {
    "fetch data from the table: \"smb.user\""
    smb_user(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): [smb_user!]!
    "fetch aggregated fields from the table: \"smb.user\""
    smb_user_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): smb_user_aggregate!
    "fetch data from the table: \"smb.user\" using primary key columns"
    smb_user_by_pk(id: uuid!): smb_user
    "fetch data from the table: \"smb.user_role\""
    smb_user_role(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): [smb_user_role!]!
    "fetch aggregated fields from the table: \"smb.user_role\""
    smb_user_role_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): smb_user_role_aggregate!
    "fetch data from the table: \"smb.user_role\" using primary key columns"
    smb_user_role_by_pk(id: bigint!): smb_user_role
}

"columns and relationships of \"smb.user\""
type smb_user {
    editor_scope: String
    email: String!
    id: uuid!
    password: String!
    role_id: Int
    "An object relationship"
    user_role: smb_user_role
}

"aggregated selection of \"smb.user\""
type smb_user_aggregate {
    aggregate: smb_user_aggregate_fields
    nodes: [smb_user!]!
}

"aggregate fields of \"smb.user\""
type smb_user_aggregate_fields {
    avg: smb_user_avg_fields
    count(columns: [smb_user_select_column!], distinct: Boolean): Int
    max: smb_user_max_fields
    min: smb_user_min_fields
    stddev: smb_user_stddev_fields
    stddev_pop: smb_user_stddev_pop_fields
    stddev_samp: smb_user_stddev_samp_fields
    sum: smb_user_sum_fields
    var_pop: smb_user_var_pop_fields
    var_samp: smb_user_var_samp_fields
    variance: smb_user_variance_fields
}

"aggregate avg on columns"
type smb_user_avg_fields {
    role_id: Float
}

"aggregate max on columns"
type smb_user_max_fields {
    editor_scope: String
    email: String
    id: uuid
    password: String
    role_id: Int
}

"aggregate min on columns"
type smb_user_min_fields {
    editor_scope: String
    email: String
    id: uuid
    password: String
    role_id: Int
}

"columns and relationships of \"smb.user_role\""
type smb_user_role {
    id: bigint!
    role: String!
}

"aggregated selection of \"smb.user_role\""
type smb_user_role_aggregate {
    aggregate: smb_user_role_aggregate_fields
    nodes: [smb_user_role!]!
}

"aggregate fields of \"smb.user_role\""
type smb_user_role_aggregate_fields {
    avg: smb_user_role_avg_fields
    count(columns: [smb_user_role_select_column!], distinct: Boolean): Int
    max: smb_user_role_max_fields
    min: smb_user_role_min_fields
    stddev: smb_user_role_stddev_fields
    stddev_pop: smb_user_role_stddev_pop_fields
    stddev_samp: smb_user_role_stddev_samp_fields
    sum: smb_user_role_sum_fields
    var_pop: smb_user_role_var_pop_fields
    var_samp: smb_user_role_var_samp_fields
    variance: smb_user_role_variance_fields
}

"aggregate avg on columns"
type smb_user_role_avg_fields {
    id: Float
}

"aggregate max on columns"
type smb_user_role_max_fields {
    id: bigint
    role: String
}

"aggregate min on columns"
type smb_user_role_min_fields {
    id: bigint
    role: String
}

"aggregate stddev on columns"
type smb_user_role_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type smb_user_role_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type smb_user_role_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type smb_user_role_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type smb_user_role_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type smb_user_role_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type smb_user_role_variance_fields {
    id: Float
}

"aggregate stddev on columns"
type smb_user_stddev_fields {
    role_id: Float
}

"aggregate stddev_pop on columns"
type smb_user_stddev_pop_fields {
    role_id: Float
}

"aggregate stddev_samp on columns"
type smb_user_stddev_samp_fields {
    role_id: Float
}

"aggregate sum on columns"
type smb_user_sum_fields {
    role_id: Int
}

"aggregate var_pop on columns"
type smb_user_var_pop_fields {
    role_id: Float
}

"aggregate var_samp on columns"
type smb_user_var_samp_fields {
    role_id: Float
}

"aggregate variance on columns"
type smb_user_variance_fields {
    role_id: Float
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"smb.user\""
    smb_user(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): [smb_user!]!
    "fetch aggregated fields from the table: \"smb.user\""
    smb_user_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_order_by!],
        "filter the rows returned"
        where: smb_user_bool_exp
    ): smb_user_aggregate!
    "fetch data from the table: \"smb.user\" using primary key columns"
    smb_user_by_pk(id: uuid!): smb_user
    "fetch data from the table: \"smb.user_role\""
    smb_user_role(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): [smb_user_role!]!
    "fetch aggregated fields from the table: \"smb.user_role\""
    smb_user_role_aggregate(
        "distinct select on columns"
        distinct_on: [smb_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [smb_user_role_order_by!],
        "filter the rows returned"
        where: smb_user_role_bool_exp
    ): smb_user_role_aggregate!
    "fetch data from the table: \"smb.user_role\" using primary key columns"
    smb_user_role_by_pk(id: bigint!): smb_user_role
}

"column ordering options"
enum order_by {
    "in the ascending order, nulls last"
    asc
    "in the ascending order, nulls first"
    asc_nulls_first
    "in the ascending order, nulls last"
    asc_nulls_last
    "in the descending order, nulls first"
    desc
    "in the descending order, nulls first"
    desc_nulls_first
    "in the descending order, nulls last"
    desc_nulls_last
}

"select columns of table \"smb.user_role\""
enum smb_user_role_select_column {
    "column name"
    id
    "column name"
    role
}

"select columns of table \"smb.user\""
enum smb_user_select_column {
    "column name"
    editor_scope
    "column name"
    email
    "column name"
    id
    "column name"
    password
    "column name"
    role_id
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"expression to compare columns of type bigint. All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"order by aggregate values of table \"smb.user\""
input smb_user_aggregate_order_by {
    avg: smb_user_avg_order_by
    count: order_by
    max: smb_user_max_order_by
    min: smb_user_min_order_by
    stddev: smb_user_stddev_order_by
    stddev_pop: smb_user_stddev_pop_order_by
    stddev_samp: smb_user_stddev_samp_order_by
    sum: smb_user_sum_order_by
    var_pop: smb_user_var_pop_order_by
    var_samp: smb_user_var_samp_order_by
    variance: smb_user_variance_order_by
}

"order by avg() on columns of table \"smb.user\""
input smb_user_avg_order_by {
    role_id: order_by
}

"Boolean expression to filter rows from the table \"smb.user\". All fields are combined with a logical 'AND'."
input smb_user_bool_exp {
    _and: [smb_user_bool_exp]
    _not: smb_user_bool_exp
    _or: [smb_user_bool_exp]
    editor_scope: String_comparison_exp
    email: String_comparison_exp
    id: uuid_comparison_exp
    password: String_comparison_exp
    role_id: Int_comparison_exp
    user_role: smb_user_role_bool_exp
}

"order by max() on columns of table \"smb.user\""
input smb_user_max_order_by {
    editor_scope: order_by
    email: order_by
    id: order_by
    password: order_by
    role_id: order_by
}

"order by min() on columns of table \"smb.user\""
input smb_user_min_order_by {
    editor_scope: order_by
    email: order_by
    id: order_by
    password: order_by
    role_id: order_by
}

"ordering options when selecting data from \"smb.user\""
input smb_user_order_by {
    editor_scope: order_by
    email: order_by
    id: order_by
    password: order_by
    role_id: order_by
    user_role: smb_user_role_order_by
}

"primary key columns input for table: \"smb.user\""
input smb_user_pk_columns_input {
    id: uuid!
}

"order by aggregate values of table \"smb.user_role\""
input smb_user_role_aggregate_order_by {
    avg: smb_user_role_avg_order_by
    count: order_by
    max: smb_user_role_max_order_by
    min: smb_user_role_min_order_by
    stddev: smb_user_role_stddev_order_by
    stddev_pop: smb_user_role_stddev_pop_order_by
    stddev_samp: smb_user_role_stddev_samp_order_by
    sum: smb_user_role_sum_order_by
    var_pop: smb_user_role_var_pop_order_by
    var_samp: smb_user_role_var_samp_order_by
    variance: smb_user_role_variance_order_by
}

"order by avg() on columns of table \"smb.user_role\""
input smb_user_role_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"smb.user_role\". All fields are combined with a logical 'AND'."
input smb_user_role_bool_exp {
    _and: [smb_user_role_bool_exp]
    _not: smb_user_role_bool_exp
    _or: [smb_user_role_bool_exp]
    id: bigint_comparison_exp
    role: String_comparison_exp
}

"order by max() on columns of table \"smb.user_role\""
input smb_user_role_max_order_by {
    id: order_by
    role: order_by
}

"order by min() on columns of table \"smb.user_role\""
input smb_user_role_min_order_by {
    id: order_by
    role: order_by
}

"ordering options when selecting data from \"smb.user_role\""
input smb_user_role_order_by {
    id: order_by
    role: order_by
}

"primary key columns input for table: \"smb.user_role\""
input smb_user_role_pk_columns_input {
    id: bigint!
}

"order by stddev() on columns of table \"smb.user_role\""
input smb_user_role_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"smb.user_role\""
input smb_user_role_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"smb.user_role\""
input smb_user_role_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"smb.user_role\""
input smb_user_role_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"smb.user_role\""
input smb_user_role_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"smb.user_role\""
input smb_user_role_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"smb.user_role\""
input smb_user_role_variance_order_by {
    id: order_by
}

"order by stddev() on columns of table \"smb.user\""
input smb_user_stddev_order_by {
    role_id: order_by
}

"order by stddev_pop() on columns of table \"smb.user\""
input smb_user_stddev_pop_order_by {
    role_id: order_by
}

"order by stddev_samp() on columns of table \"smb.user\""
input smb_user_stddev_samp_order_by {
    role_id: order_by
}

"order by sum() on columns of table \"smb.user\""
input smb_user_sum_order_by {
    role_id: order_by
}

"order by var_pop() on columns of table \"smb.user\""
input smb_user_var_pop_order_by {
    role_id: order_by
}

"order by var_samp() on columns of table \"smb.user\""
input smb_user_var_samp_order_by {
    role_id: order_by
}

"order by variance() on columns of table \"smb.user\""
input smb_user_variance_order_by {
    role_id: order_by
}

"expression to compare columns of type uuid. All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar bigint

scalar uuid